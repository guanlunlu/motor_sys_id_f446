
motor_sys_id_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08006e50  08006e50  00016e50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007274  08007274  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007274  08007274  00017274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800727c  0800727c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800727c  0800727c  0001727c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007280  08007280  00017280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007284  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001e0  08007460  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08007460  00020398  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbf1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002044  00000000  00000000  0002cdfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ee48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  0002f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af7  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da97  00000000  00000000  00052f97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d04a8  00000000  00000000  00060a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130ed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b4  00000000  00000000  00130f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006e34 	.word	0x08006e34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08006e34 	.word	0x08006e34

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb4:	e000      	b.n	8000fb8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fb6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f9      	beq.n	8000fb6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_write>:
#include "logging.h"

float random_input[] = {10.8284,10.5706,11.5183,11.5189,11.902,11.0753,11.2791,11.7464,10.5519,10.5802,11.2946,11.5067,10.5115,11.0751,10.6003,11.1262,11.5302,11.3835,11.8957,11.7693,11.2904,10.6379,11.4809,11.124,11.5518,11.8655,11.6433,10.8937,10.5712,11.6041,10.9924,11.449,11.6346,11.9866,11.048,10.8706,11.9738,11.584,11.63,11.4773,10.609,11.4475,11.8271,10.9091,11.1546,11.6497,11.2166,10.8567,10.9124,11.0389,10.7498,11.2298,11.8465,11.8638,10.5908,11.857,11.2568,11.2744,10.9785,11.98,11.241,10.8992,10.6361,11.9216,10.6106,11.2511,11.0762,10.9156,11.8707,11.2946,11.1967,11.9115,10.5751,11.6423,11.6553,11.7417,10.688,10.5238,11.5327,11.8024,11.4443,11.6043,11.5881,11.9992,11.8329,10.8498,10.9595,11.0265,11.2699,11.3867,11.769,11.1181,11.7623,10.904,11.1231,11.306,11.2019,10.9308,10.7675,10.7306,11.3575,11.7036,10.5496,11.3017,11.2477,11.933,11.6224,11.3319,11.8361,11.4373,11.7631,10.7397,10.8191,11.5721,10.6956,10.6365,10.9119,10.5045,11.1214,10.5403,11.5647,11.9068,10.8599,10.7713,10.9763,11.8305,11.4781,10.7255,11.522,11.0787,11.0816,11.2496,10.7213,11.3808,11.7684,11.3852,11.9331,11.3342,10.7222,11.975,11.1132,10.7127,11.3473,10.8782,11.2328,11.196,11.9416,10.689,10.7996,10.9789,11.4439,10.6901,11.4769,11.4325,11.7046,10.8718,11.2146,11.084,10.8049,10.5426,11.8525,11.1397,10.713,11.9212,11.1155,10.6968,11.8285,10.6383,10.7433,10.6066,11.048,10.8796,10.7027,11.6747,11.183,11.0243,11.1785,11.7134,11.8975,11.4775,10.8229,11.5194,11.8634,10.8752,11.7913,11.2069,11.2589,11.4006,11.7263,11.6338,11.1934,11.9271,11.4491,11.159,11.737,11.5335,11.5533,11.9807,11.9316,11.7769,10.934,11.3061,11.2717,10.6552,11.121,11.3651,11.8148,11.1601,11.5946,11.8039,11.5735,11.7011,11.5598,11.6126,10.5286,11.829,11.2875,11.195,10.5978,11.5701,11.2334,11.5015,11.5231,10.7993,11.875,11.7988,11.835,11.3159,10.7088,11.1755,11.984,10.8233,11.169,10.9736,11.272,11.8223,11.1596,11.2013,11.71,11.0477,10.8173,11.9987,10.7304,11.4457,11.4245,10.5009,10.5013,11.66,11.591,10.9788,11.1266,11.5237,11.5208,10.8079,11.7546,11.5634,11.7431,10.6418,10.6226,11.646,11.4444,10.8208,10.8203,10.6216,11.0832,11.9282,11.9213,11.0848,10.9038,11.5383,10.9261,11.6653,11.6758,11.1337,10.9232,10.791,10.517,10.7877,11.9749,10.8661,11.7296,10.7047,11.0972,11.4015,10.7653,11.7425,10.7366,11.9819,10.8858,10.8504,10.6525,10.8291,11.4521,11.544,11.6922,11.5444,11.6294,11.5043,11.4501,10.5847,11.3973,10.8405,10.9782,11.5498,10.6762,11.6439,11.2892,11.3309,11.382,10.9945,11.5545,10.7146,10.7425,11.228,11.7903,11.7199,11.3353,11.6085,10.974,10.703,11.2928,10.9661,11.3822,11.2771,11.1463,10.8883,11.0553,11.0895,11.1703,11.2138,11.0817,10.9189,10.6174,11.0546,10.8809,11.5077,11.5144,11.2709,11.5929,11.5812,11.9171,11.191,11.9102,10.9823,11.1907,11.2757,11.492,11.1027,11.4085,11.9798,10.7256,11.5051,11.0157,11.3126,11.2842,11.7439,10.5224,10.9113,11.4645,11.3192,11.8768,10.8999,11.9551,10.8701,11.766,11.541,11.1836,11.7257,10.5331,10.7411,11.5604,11.5617,11.155,11.3736,11.6276,11.9873,11.5435,10.9193,11.6308,10.7568,10.5064,11.2435,10.6199,10.7446,11.855,11.6745,11.62,11.1546,10.5095,11.3772,11.2777,10.6003,11.316,11.0846,10.8237,11.0787,11.4403,11.4886,11.564,11.308,10.9204};
int random_input_size = 400;

int _write(int file, char *ptr, int len){
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i ++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffc9 	bl	8000f8c <ITM_SendChar>
	for(int i = 0; i < len; i ++){
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
	}
	return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <logger_setup>:
void logger_setup(Logger *logger){
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	logger->time_stamp = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
	logger->sample_size = sizeof(random_input)/sizeof(float);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f240 1291 	movw	r2, #401	; 0x191
 8001028:	605a      	str	r2, [r3, #4]
	logger->sample_iter_idx = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
	logger->finished_logging = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <log_motor_state>:

void log_motor_state(motor *motor, float time_stamp){
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af04      	add	r7, sp, #16
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	ed87 0a00 	vstr	s0, [r7]
	printf("%f, %f, %f\n", time_stamp, motor->driver.pwm_duty, motor->angular_vel);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa92 	bl	8000588 <__aeabi_f2d>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800106e:	e9cd 0100 	strd	r0, r1, [sp]
 8001072:	4622      	mov	r2, r4
 8001074:	462b      	mov	r3, r5
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <log_motor_state+0x40>)
 8001078:	f003 fda2 	bl	8004bc0 <iprintf>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bdb0      	pop	{r4, r5, r7, pc}
 8001084:	08006e50 	.word	0x08006e50

08001088 <HAL_TIM_PeriodElapsedCallback>:
float duty = 1.0;
float max_voltage = 12.24;
float output_duty = 0;
int sample_idx = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d14f      	bne.n	8001138 <HAL_TIM_PeriodElapsedCallback+0xb0>
		motor_encoder_update(&motor_1);
 8001098:	482a      	ldr	r0, [pc, #168]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800109a:	f000 fbbd 	bl	8001818 <motor_encoder_update>

		if (tim_cnt == 0){
 800109e:	4b2a      	ldr	r3, [pc, #168]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x24>
			printf("timestamp, output_voltage, angular_velocity \n");
 80010a6:	4829      	ldr	r0, [pc, #164]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010a8:	f003 fe10 	bl	8004ccc <puts>
		}

    motor_command_tracking(&motor_1);
 80010ac:	4825      	ldr	r0, [pc, #148]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010ae:	f000 fc03 	bl	80018b8 <motor_command_tracking>
		// 	else{
		// 		motor_duty_output(&motor_1, 0, 1);
		// 	}
		// }

     if (sec == 1)
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010b4:	edd3 7a00 	vldr	s15, [r3]
 80010b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010bc:	eef4 7a47 	vcmp.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	d105      	bne.n	80010d2 <HAL_TIM_PeriodElapsedCallback+0x4a>
    	 motor_1.controller.command_vel = 12.0;
 80010c6:	491f      	ldr	r1, [pc, #124]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010ce:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
//       motor_duty_output(&motor_1, 1.0, 1);

     if (tim_cnt % 10 == 0 && sec <= 5)
 80010d2:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	4b20      	ldr	r3, [pc, #128]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010d8:	fb83 2301 	smull	r2, r3, r3, r1
 80010dc:	109a      	asrs	r2, r3, #2
 80010de:	17cb      	asrs	r3, r1, #31
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	1aca      	subs	r2, r1, r3
 80010ec:	2a00      	cmp	r2, #0
 80010ee:	d111      	bne.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x8c>
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010f2:	edd3 7a00 	vldr	s15, [r3]
 80010f6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80010fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d807      	bhi.n	8001114 <HAL_TIM_PeriodElapsedCallback+0x8c>
       log_motor_state(&motor_1, sec);
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	480d      	ldr	r0, [pc, #52]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001110:	f7ff ff98 	bl	8001044 <log_motor_state>

		tim_cnt ++;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	3301      	adds	r3, #1
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800111c:	6013      	str	r3, [r2, #0]
		sec = (float)tim_cnt/1000;
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800115c <HAL_TIM_PeriodElapsedCallback+0xd4>
 800112e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001134:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	2000028c 	.word	0x2000028c
 8001144:	200002d8 	.word	0x200002d8
 8001148:	20000378 	.word	0x20000378
 800114c:	08006e5c 	.word	0x08006e5c
 8001150:	2000037c 	.word	0x2000037c
 8001154:	40280000 	.word	0x40280000
 8001158:	66666667 	.word	0x66666667
 800115c:	447a0000 	.word	0x447a0000

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001164:	f000 fe50 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001168:	f000 f81c 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116c:	f000 f9a4 	bl	80014b8 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001170:	f000 f88a 	bl	8001288 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001174:	f000 f8dc 	bl	8001330 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001178:	f000 f950 	bl	800141c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  motor_hardware_setup(&motor_1);
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <main+0x38>)
 800117e:	f000 fa0b 	bl	8001598 <motor_hardware_setup>
  motor_driver_initialize(&motor_1);
 8001182:	4805      	ldr	r0, [pc, #20]	; (8001198 <main+0x38>)
 8001184:	f000 fa86 	bl	8001694 <motor_driver_initialize>
  logger_setup(&logger);
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <main+0x3c>)
 800118a:	f7ff ff42 	bl	8001012 <logger_setup>
  HAL_TIM_Base_Start_IT(&htim5);
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <main+0x40>)
 8001190:	f001 ff3a 	bl	8003008 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001194:	e7fe      	b.n	8001194 <main+0x34>
 8001196:	bf00      	nop
 8001198:	200002d8 	.word	0x200002d8
 800119c:	20000368 	.word	0x20000368
 80011a0:	2000028c 	.word	0x2000028c

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	; 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 031c 	add.w	r3, r7, #28
 80011ae:	2234      	movs	r2, #52	; 0x34
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 f892 	bl	80042dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b2c      	ldr	r3, [pc, #176]	; (8001280 <SystemClock_Config+0xdc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	4a2b      	ldr	r2, [pc, #172]	; (8001280 <SystemClock_Config+0xdc>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	; 0x40
 80011d8:	4b29      	ldr	r3, [pc, #164]	; (8001280 <SystemClock_Config+0xdc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	2300      	movs	r3, #0
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4b26      	ldr	r3, [pc, #152]	; (8001284 <SystemClock_Config+0xe0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a25      	ldr	r2, [pc, #148]	; (8001284 <SystemClock_Config+0xe0>)
 80011ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b23      	ldr	r3, [pc, #140]	; (8001284 <SystemClock_Config+0xe0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001214:	2308      	movs	r3, #8
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001218:	23b4      	movs	r3, #180	; 0xb4
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fbfd 	bl	8002a2c <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001238:	f000 f9a6 	bl	8001588 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800123c:	f001 f916 	bl	800246c <HAL_PWREx_EnableOverDrive>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001246:	f000 f99f 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2302      	movs	r3, #2
 8001250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001256:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001260:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001262:	f107 0308 	add.w	r3, r7, #8
 8001266:	2105      	movs	r1, #5
 8001268:	4618      	mov	r0, r3
 800126a:	f001 f94f 	bl	800250c <HAL_RCC_ClockConfig>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001274:	f000 f988 	bl	8001588 <Error_Handler>
  }
}
 8001278:	bf00      	nop
 800127a:	3750      	adds	r7, #80	; 0x50
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40007000 	.word	0x40007000

08001288 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800128e:	f107 030c 	add.w	r3, r7, #12
 8001292:	2224      	movs	r2, #36	; 0x24
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f003 f820 	bl	80042dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012a4:	4b20      	ldr	r3, [pc, #128]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012a6:	4a21      	ldr	r2, [pc, #132]	; (800132c <MX_TIM3_Init+0xa4>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012aa:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b18      	ldr	r3, [pc, #96]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ca:	2303      	movs	r3, #3
 80012cc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d2:	2301      	movs	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e2:	2301      	movs	r3, #1
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <MX_TIM3_Init+0xa0>)
 80012f6:	f002 f819 	bl	800332c <HAL_TIM_Encoder_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001300:	f000 f942 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4619      	mov	r1, r3
 8001310:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_TIM3_Init+0xa0>)
 8001312:	f002 ff29 	bl	8004168 <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800131c:	f000 f934 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001320:	bf00      	nop
 8001322:	3730      	adds	r7, #48	; 0x30
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200001fc 	.word	0x200001fc
 800132c:	40000400 	.word	0x40000400

08001330 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08e      	sub	sp, #56	; 0x38
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	f107 0320 	add.w	r3, r7, #32
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800134e:	1d3b      	adds	r3, r7, #4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
 800135c:	615a      	str	r2, [r3, #20]
 800135e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <MX_TIM4_Init+0xe4>)
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <MX_TIM4_Init+0xe8>)
 8001364:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8001366:	4b2b      	ldr	r3, [pc, #172]	; (8001414 <MX_TIM4_Init+0xe4>)
 8001368:	2208      	movs	r2, #8
 800136a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b29      	ldr	r3, [pc, #164]	; (8001414 <MX_TIM4_Init+0xe4>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001372:	4b28      	ldr	r3, [pc, #160]	; (8001414 <MX_TIM4_Init+0xe4>)
 8001374:	f242 720f 	movw	r2, #9999	; 0x270f
 8001378:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_TIM4_Init+0xe4>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_TIM4_Init+0xe4>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001386:	4823      	ldr	r0, [pc, #140]	; (8001414 <MX_TIM4_Init+0xe4>)
 8001388:	f001 fdee 	bl	8002f68 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001392:	f000 f8f9 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013a0:	4619      	mov	r1, r3
 80013a2:	481c      	ldr	r0, [pc, #112]	; (8001414 <MX_TIM4_Init+0xe4>)
 80013a4:	f002 fae0 	bl	8003968 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013ae:	f000 f8eb 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013b2:	4818      	ldr	r0, [pc, #96]	; (8001414 <MX_TIM4_Init+0xe4>)
 80013b4:	f001 fe98 	bl	80030e8 <HAL_TIM_PWM_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013be:	f000 f8e3 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	4619      	mov	r1, r3
 80013d0:	4810      	ldr	r0, [pc, #64]	; (8001414 <MX_TIM4_Init+0xe4>)
 80013d2:	f002 fec9 	bl	8004168 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013dc:	f000 f8d4 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <MX_TIM4_Init+0xe4>)
 80013f8:	f002 f9f4 	bl	80037e4 <HAL_TIM_PWM_ConfigChannel>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001402:	f000 f8c1 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001406:	4803      	ldr	r0, [pc, #12]	; (8001414 <MX_TIM4_Init+0xe4>)
 8001408:	f000 fb96 	bl	8001b38 <HAL_TIM_MspPostInit>

}
 800140c:	bf00      	nop
 800140e:	3738      	adds	r7, #56	; 0x38
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000244 	.word	0x20000244
 8001418:	40000800 	.word	0x40000800

0800141c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	463b      	mov	r3, r7
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001438:	4b1d      	ldr	r3, [pc, #116]	; (80014b0 <MX_TIM5_Init+0x94>)
 800143a:	4a1e      	ldr	r2, [pc, #120]	; (80014b4 <MX_TIM5_Init+0x98>)
 800143c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9-1;
 800143e:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM5_Init+0x94>)
 8001440:	2208      	movs	r2, #8
 8001442:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM5_Init+0x94>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM5_Init+0x94>)
 800144c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001450:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <MX_TIM5_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <MX_TIM5_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800145e:	4814      	ldr	r0, [pc, #80]	; (80014b0 <MX_TIM5_Init+0x94>)
 8001460:	f001 fd82 	bl	8002f68 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 f88d 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM5_Init+0x94>)
 800147c:	f002 fa74 	bl	8003968 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 f87f 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM5_Init+0x94>)
 8001498:	f002 fe66 	bl	8004168 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80014a2:	f000 f871 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	2000028c 	.word	0x2000028c
 80014b4:	40000c00 	.word	0x40000c00

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_GPIO_Init+0xc4>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a29      	ldr	r2, [pc, #164]	; (800157c <MX_GPIO_Init+0xc4>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b27      	ldr	r3, [pc, #156]	; (800157c <MX_GPIO_Init+0xc4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
 80014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <MX_GPIO_Init+0xc4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a22      	ldr	r2, [pc, #136]	; (800157c <MX_GPIO_Init+0xc4>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <MX_GPIO_Init+0xc4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0304 	and.w	r3, r3, #4
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_GPIO_Init+0xc4>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a1b      	ldr	r2, [pc, #108]	; (800157c <MX_GPIO_Init+0xc4>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b19      	ldr	r3, [pc, #100]	; (800157c <MX_GPIO_Init+0xc4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4816      	ldr	r0, [pc, #88]	; (8001580 <MX_GPIO_Init+0xc8>)
 8001528:	f000 ff86 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001532:	4814      	ldr	r0, [pc, #80]	; (8001584 <MX_GPIO_Init+0xcc>)
 8001534:	f000 ff80 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001538:	2380      	movs	r3, #128	; 0x80
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4619      	mov	r1, r3
 800154e:	480c      	ldr	r0, [pc, #48]	; (8001580 <MX_GPIO_Init+0xc8>)
 8001550:	f000 fdde 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_GPIO_Init+0xcc>)
 800156e:	f000 fdcf 	bl	8002110 <HAL_GPIO_Init>

}
 8001572:	bf00      	nop
 8001574:	3720      	adds	r7, #32
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40020800 	.word	0x40020800
 8001584:	40020000 	.word	0x40020000

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
 8001592:	0000      	movs	r0, r0
 8001594:	0000      	movs	r0, r0
	...

08001598 <motor_hardware_setup>:
# include <motor.h>

void motor_hardware_setup(motor *motor){
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	// L298N motor driver setup
    // EN IN1 IN2 = PA8(PWM) PA9 PA10
	motor->driver.IN1_port = GPIOA;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a37      	ldr	r2, [pc, #220]	; (8001680 <motor_hardware_setup+0xe8>)
 80015a4:	601a      	str	r2, [r3, #0]
    motor->driver.IN1_pin = GPIO_PIN_9;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015ac:	809a      	strh	r2, [r3, #4]
	motor->driver.IN2_port = GPIOC;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a34      	ldr	r2, [pc, #208]	; (8001684 <motor_hardware_setup+0xec>)
 80015b2:	609a      	str	r2, [r3, #8]
    motor->driver.IN2_pin = GPIO_PIN_7;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2280      	movs	r2, #128	; 0x80
 80015b8:	819a      	strh	r2, [r3, #12]

	motor->driver.pwm_timer = &htim4;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a32      	ldr	r2, [pc, #200]	; (8001688 <motor_hardware_setup+0xf0>)
 80015be:	619a      	str	r2, [r3, #24]
	motor->driver.pwm_channel = TIM_CHANNEL_1;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
	motor->driver.pwm_counter = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	625a      	str	r2, [r3, #36]	; 0x24
	motor->driver.pwm_duty = 0;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
	motor->driver.max_voltage = 12.0;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <motor_hardware_setup+0xf4>)
 80015da:	629a      	str	r2, [r3, #40]	; 0x28

    // encoder parameter setup
    motor->encoder.enc_timer = &htim3;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <motor_hardware_setup+0xf8>)
 80015e0:	641a      	str	r2, [r3, #64]	; 0x40
    motor->encoder.current_counter = 0;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
    motor->encoder.previous_counter = 0;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	635a      	str	r2, [r3, #52]	; 0x34
    motor->encoder.count_per_rev = 500;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80015f4:	62da      	str	r2, [r3, #44]	; 0x2c
    motor->encoder.reduction_ratio = 16;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2210      	movs	r2, #16
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30

	// controller parameter setup
    motor->controller.control_frequency = 1000;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001602:	649a      	str	r2, [r3, #72]	; 0x48
	motor->controller.command_vel = 0;
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	motor->controller.tracking_error = 0;
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	motor->controller.tracking_tolerance = 0.08;
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	a311      	add	r3, pc, #68	; (adr r3, 8001668 <motor_hardware_setup+0xd0>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
//	motor->controller.p_gain = 1.52;
//	motor->controller.i_gain = 75.46;
	motor->controller.p_gain = 0.68;
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	a310      	add	r3, pc, #64	; (adr r3, 8001670 <motor_hardware_setup+0xd8>)
 8001630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001634:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	motor->controller.i_gain = 21.65;
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	a30f      	add	r3, pc, #60	; (adr r3, 8001678 <motor_hardware_setup+0xe0>)
 800163c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001640:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	motor->controller.d_gain = 0;
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	f04f 0300 	mov.w	r3, #0
 800164e:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

    HAL_TIM_Encoder_Start_IT(motor->encoder.enc_timer, TIM_CHANNEL_ALL);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	213c      	movs	r1, #60	; 0x3c
 8001658:	4618      	mov	r0, r3
 800165a:	f001 ff0d 	bl	8003478 <HAL_TIM_Encoder_Start_IT>
}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	47ae147b 	.word	0x47ae147b
 800166c:	3fb47ae1 	.word	0x3fb47ae1
 8001670:	5c28f5c3 	.word	0x5c28f5c3
 8001674:	3fe5c28f 	.word	0x3fe5c28f
 8001678:	66666666 	.word	0x66666666
 800167c:	4035a666 	.word	0x4035a666
 8001680:	40020000 	.word	0x40020000
 8001684:	40020800 	.word	0x40020800
 8001688:	20000244 	.word	0x20000244
 800168c:	41400000 	.word	0x41400000
 8001690:	200001fc 	.word	0x200001fc

08001694 <motor_driver_initialize>:

void motor_driver_initialize(motor *motor){
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(motor->driver.pwm_timer, motor->driver.pwm_channel);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	4619      	mov	r1, r3
 80016a6:	4610      	mov	r0, r2
 80016a8:	f001 fd78 	bl	800319c <HAL_TIM_PWM_Start>
	// initialize as slow decay mode
	HAL_GPIO_WritePin(motor->driver.IN1_port, motor->driver.IN1_pin, GPIO_PIN_RESET);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	889b      	ldrh	r3, [r3, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	4619      	mov	r1, r3
 80016b8:	f000 febe 	bl	8002438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->driver.IN2_port, motor->driver.IN2_pin, GPIO_PIN_RESET);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6898      	ldr	r0, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	899b      	ldrh	r3, [r3, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	f000 feb6 	bl	8002438 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <motor_driver_initialize+0x4c>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
}
 80016de:	e018      	b.n	8001712 <motor_driver_initialize+0x7e>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d105      	bne.n	80016f4 <motor_driver_initialize+0x60>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2300      	movs	r3, #0
 80016f0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80016f2:	e00e      	b.n	8001712 <motor_driver_initialize+0x7e>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
 80016f8:	2b08      	cmp	r3, #8
 80016fa:	d105      	bne.n	8001708 <motor_driver_initialize+0x74>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001706:	e004      	b.n	8001712 <motor_driver_initialize+0x7e>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel,0);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2300      	movs	r3, #0
 8001710:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <motor_duty_output>:

void motor_duty_output(motor *motor, float duty_cycle, int dir){
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	60f8      	str	r0, [r7, #12]
 8001722:	ed87 0a02 	vstr	s0, [r7, #8]
 8001726:	6079      	str	r1, [r7, #4]
	if (dir >= 0){
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db10      	blt.n	8001750 <motor_duty_output+0x36>
		HAL_GPIO_WritePin(motor->driver.IN1_port, motor->driver.IN1_pin, GPIO_PIN_RESET);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6818      	ldr	r0, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	889b      	ldrh	r3, [r3, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	f000 fe7d 	bl	8002438 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->driver.IN2_port, motor->driver.IN2_pin, GPIO_PIN_SET);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6898      	ldr	r0, [r3, #8]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	899b      	ldrh	r3, [r3, #12]
 8001746:	2201      	movs	r2, #1
 8001748:	4619      	mov	r1, r3
 800174a:	f000 fe75 	bl	8002438 <HAL_GPIO_WritePin>
 800174e:	e00f      	b.n	8001770 <motor_duty_output+0x56>
	}
	else {
		HAL_GPIO_WritePin(motor->driver.IN1_port, motor->driver.IN1_pin, GPIO_PIN_SET);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	889b      	ldrh	r3, [r3, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	4619      	mov	r1, r3
 800175c:	f000 fe6c 	bl	8002438 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->driver.IN2_port, motor->driver.IN2_pin, GPIO_PIN_RESET);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6898      	ldr	r0, [r3, #8]
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	899b      	ldrh	r3, [r3, #12]
 8001768:	2200      	movs	r2, #0
 800176a:	4619      	mov	r1, r3
 800176c:	f000 fe64 	bl	8002438 <HAL_GPIO_WritePin>
	}
	int timer_counter_period = motor->driver.pwm_timer->Instance->ARR + 1;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
	motor->driver.pwm_counter = (float)timer_counter_period * duty_cycle;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	ee07 3a90 	vmov	s15, r3
 8001782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001786:	edd7 7a02 	vldr	s15, [r7, #8]
 800178a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    motor->driver.pwm_duty = duty_cycle;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	621a      	str	r2, [r3, #32]
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10b      	bne.n	80017ba <motor_duty_output+0xa0>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017b2:	ee17 2a90 	vmov	r2, s15
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017b8:	e02a      	b.n	8001810 <motor_duty_output+0xf6>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d10b      	bne.n	80017da <motor_duty_output+0xc0>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d2:	ee17 3a90 	vmov	r3, s15
 80017d6:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017d8:	e01a      	b.n	8001810 <motor_duty_output+0xf6>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d10b      	bne.n	80017fa <motor_duty_output+0xe0>
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f2:	ee17 3a90 	vmov	r3, s15
 80017f6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80017f8:	e00a      	b.n	8001810 <motor_duty_output+0xf6>
	__HAL_TIM_SET_COMPARE(motor->driver.pwm_timer, motor->driver.pwm_channel, motor->driver.pwm_counter);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180a:	ee17 3a90 	vmov	r3, s15
 800180e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <motor_encoder_update>:

void motor_encoder_update(motor *motor){
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    double rad_per_cnt = ((2*M_PI) / (motor->encoder.count_per_rev * motor->encoder.reduction_ratio * 4));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f7fe fe98 	bl	8000564 <__aeabi_i2d>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	a11d      	add	r1, pc, #116	; (adr r1, 80018b0 <motor_encoder_update+0x98>)
 800183a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800183e:	f7ff f825 	bl	800088c <__aeabi_ddiv>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 2302 	strd	r2, r3, [r7, #8]

    motor->encoder.current_counter = motor->encoder.enc_timer->Instance->CNT;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001852:	461a      	mov	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	639a      	str	r2, [r3, #56]	; 0x38
    motor->encoder.delta_counter = motor->encoder.current_counter - motor->encoder.previous_counter;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001860:	1ad2      	subs	r2, r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	63da      	str	r2, [r3, #60]	; 0x3c

    motor->angular_vel = motor->encoder.delta_counter * rad_per_cnt * motor->controller.control_frequency;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fe7a 	bl	8000564 <__aeabi_i2d>
 8001870:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001874:	f7fe fee0 	bl	8000638 <__aeabi_dmul>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4614      	mov	r4, r2
 800187e:	461d      	mov	r5, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe fe6d 	bl	8000564 <__aeabi_i2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe fed1 	bl	8000638 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
    motor->encoder.previous_counter = motor->encoder.current_counter;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bdb0      	pop	{r4, r5, r7, pc}
 80018b0:	54442d18 	.word	0x54442d18
 80018b4:	401921fb 	.word	0x401921fb

080018b8 <motor_command_tracking>:

void motor_command_tracking(motor *motor){
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	float output_duty;
	motor->controller.tracking_error =motor->controller.command_vel - motor->angular_vel;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80018cc:	f7fe fcfc 	bl	80002c8 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	if (fabs(motor->controller.tracking_error) > motor->controller.tracking_tolerance){
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80018e0:	4614      	mov	r4, r2
 80018e2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80018ec:	4620      	mov	r0, r4
 80018ee:	4629      	mov	r1, r5
 80018f0:	f7ff f932 	bl	8000b58 <__aeabi_dcmpgt>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d04c      	beq.n	8001994 <motor_command_tracking+0xdc>
		motor->controller.tracking_error_sum += motor->controller.tracking_error;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001906:	f7fe fce1 	bl	80002cc <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
		if (motor->controller.tracking_error_sum > 1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b26      	ldr	r3, [pc, #152]	; (80019b8 <motor_command_tracking+0x100>)
 8001920:	f7ff f91a 	bl	8000b58 <__aeabi_dcmpgt>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d005      	beq.n	8001936 <motor_command_tracking+0x7e>
			motor->controller.tracking_error_sum = 1;
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <motor_command_tracking+0x100>)
 8001932:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60

		output_duty = motor->controller.p_gain * motor->controller.tracking_error + motor->controller.i_gain * motor->controller.tracking_error_sum;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8001942:	f7fe fe79 	bl	8000638 <__aeabi_dmul>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4614      	mov	r4, r2
 800194c:	461d      	mov	r5, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800195a:	f7fe fe6d 	bl	8000638 <__aeabi_dmul>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	4620      	mov	r0, r4
 8001964:	4629      	mov	r1, r5
 8001966:	f7fe fcb1 	bl	80002cc <__adddf3>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4610      	mov	r0, r2
 8001970:	4619      	mov	r1, r3
 8001972:	f7ff f939 	bl	8000be8 <__aeabi_d2f>
 8001976:	4603      	mov	r3, r0
 8001978:	60fb      	str	r3, [r7, #12]
		if (output_duty >= 1)
 800197a:	edd7 7a03 	vldr	s15, [r7, #12]
 800197e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	db06      	blt.n	800199a <motor_command_tracking+0xe2>
			output_duty = 1;
 800198c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e002      	b.n	800199a <motor_command_tracking+0xe2>
	//	float output_duty = voltage_to_dutycycle(motor, output_voltage);
	}
	else{
		output_duty = motor->driver.pwm_duty;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	60fb      	str	r3, [r7, #12]
	}
	motor_duty_output(motor, output_duty, output_duty);
 800199a:	edd7 7a03 	vldr	s15, [r7, #12]
 800199e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a2:	ee17 1a90 	vmov	r1, s15
 80019a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff feb5 	bl	800171a <motor_duty_output>
}
 80019b0:	bf00      	nop
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	3ff00000 	.word	0x3ff00000

080019bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a0f      	ldr	r2, [pc, #60]	; (8001a08 <HAL_MspInit+0x4c>)
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	603b      	str	r3, [r7, #0]
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_MspInit+0x4c>)
 80019e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ec:	6413      	str	r3, [r2, #64]	; 0x40
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	603b      	str	r3, [r7, #0]
 80019f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800

08001a0c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b08a      	sub	sp, #40	; 0x28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d133      	bne.n	8001a96 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	613b      	str	r3, [r7, #16]
 8001a32:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a1b      	ldr	r2, [pc, #108]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a14      	ldr	r2, [pc, #80]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a72:	2300      	movs	r3, #0
 8001a74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a76:	2302      	movs	r3, #2
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001a82:	f000 fb45 	bl	8002110 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	201d      	movs	r0, #29
 8001a8c:	f000 fb09 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a90:	201d      	movs	r0, #29
 8001a92:	f000 fb22 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a96:	bf00      	nop
 8001a98:	3728      	adds	r7, #40	; 0x28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40000400 	.word	0x40000400
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000

08001aac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <HAL_TIM_Base_MspInit+0x80>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d116      	bne.n	8001aec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a1a      	ldr	r2, [pc, #104]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001ac8:	f043 0304 	orr.w	r3, r3, #4
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	201e      	movs	r0, #30
 8001ae0:	f000 fadf 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ae4:	201e      	movs	r0, #30
 8001ae6:	f000 faf8 	bl	80020da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001aea:	e01a      	b.n	8001b22 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM5)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a10      	ldr	r2, [pc, #64]	; (8001b34 <HAL_TIM_Base_MspInit+0x88>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d115      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a0c      	ldr	r2, [pc, #48]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <HAL_TIM_Base_MspInit+0x84>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	2032      	movs	r0, #50	; 0x32
 8001b18:	f000 fac3 	bl	80020a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001b1c:	2032      	movs	r0, #50	; 0x32
 8001b1e:	f000 fadc 	bl	80020da <HAL_NVIC_EnableIRQ>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40000800 	.word	0x40000800
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40000c00 	.word	0x40000c00

08001b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a12      	ldr	r2, [pc, #72]	; (8001ba0 <HAL_TIM_MspPostInit+0x68>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d11d      	bne.n	8001b96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_TIM_MspPostInit+0x6c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b86:	2302      	movs	r3, #2
 8001b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 030c 	add.w	r3, r7, #12
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <HAL_TIM_MspPostInit+0x70>)
 8001b92:	f000 fabd 	bl	8002110 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001b96:	bf00      	nop
 8001b98:	3720      	adds	r7, #32
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40000800 	.word	0x40000800
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400

08001bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb0:	e7fe      	b.n	8001bb0 <NMI_Handler+0x4>

08001bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb6:	e7fe      	b.n	8001bb6 <HardFault_Handler+0x4>

08001bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <MemManage_Handler+0x4>

08001bbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc2:	e7fe      	b.n	8001bc2 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	e7fe      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bf8:	f000 f958 	bl	8001eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c04:	4802      	ldr	r0, [pc, #8]	; (8001c10 <TIM3_IRQHandler+0x10>)
 8001c06:	f001 fce5 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200001fc 	.word	0x200001fc

08001c14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <TIM4_IRQHandler+0x10>)
 8001c1a:	f001 fcdb 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000244 	.word	0x20000244

08001c28 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c2c:	4802      	ldr	r0, [pc, #8]	; (8001c38 <TIM5_IRQHandler+0x10>)
 8001c2e:	f001 fcd1 	bl	80035d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000028c 	.word	0x2000028c

08001c3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
	return 1;
 8001c40:	2301      	movs	r3, #1
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <_kill>:

int _kill(int pid, int sig)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c56:	f002 fb17 	bl	8004288 <__errno>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001c60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_exit>:

void _exit (int status)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c74:	f04f 31ff 	mov.w	r1, #4294967295
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ffe7 	bl	8001c4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c7e:	e7fe      	b.n	8001c7e <_exit+0x12>

08001c80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	e00a      	b.n	8001ca8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c92:	f3af 8000 	nop.w
 8001c96:	4601      	mov	r1, r0
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	1c5a      	adds	r2, r3, #1
 8001c9c:	60ba      	str	r2, [r7, #8]
 8001c9e:	b2ca      	uxtb	r2, r1
 8001ca0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dbf0      	blt.n	8001c92 <_read+0x12>
	}

return len;
 8001cb0:	687b      	ldr	r3, [r7, #4]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <_close>:
	}
	return len;
}

int _close(int file)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
	return -1;
 8001cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	605a      	str	r2, [r3, #4]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_isatty>:

int _isatty(int file)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	return 1;
 8001cfa:	2301      	movs	r3, #1
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
	return 0;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <_sbrk+0x5c>)
 8001d2e:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <_sbrk+0x60>)
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d38:	4b13      	ldr	r3, [pc, #76]	; (8001d88 <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d102      	bne.n	8001d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <_sbrk+0x64>)
 8001d42:	4a12      	ldr	r2, [pc, #72]	; (8001d8c <_sbrk+0x68>)
 8001d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d207      	bcs.n	8001d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d54:	f002 fa98 	bl	8004288 <__errno>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d62:	e009      	b.n	8001d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <_sbrk+0x64>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d6a:	4b07      	ldr	r3, [pc, #28]	; (8001d88 <_sbrk+0x64>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <_sbrk+0x64>)
 8001d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20020000 	.word	0x20020000
 8001d84:	00000400 	.word	0x00000400
 8001d88:	20000380 	.word	0x20000380
 8001d8c:	20000398 	.word	0x20000398

08001d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <SystemInit+0x20>)
 8001d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d9a:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <SystemInit+0x20>)
 8001d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001db8:	480d      	ldr	r0, [pc, #52]	; (8001df0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dba:	490e      	ldr	r1, [pc, #56]	; (8001df4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dbc:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001dd0:	4c0b      	ldr	r4, [pc, #44]	; (8001e00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dde:	f7ff ffd7 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de2:	f002 fa57 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001de6:	f7ff f9bb 	bl	8001160 <main>
  bx  lr    
 8001dea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001df8:	08007284 	.word	0x08007284
  ldr r2, =_sbss
 8001dfc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e00:	20000398 	.word	0x20000398

08001e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e04:	e7fe      	b.n	8001e04 <ADC_IRQHandler>
	...

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e0c:	4b0e      	ldr	r3, [pc, #56]	; (8001e48 <HAL_Init+0x40>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_Init+0x40>)
 8001e12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <HAL_Init+0x40>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <HAL_Init+0x40>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_Init+0x40>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e30:	2003      	movs	r0, #3
 8001e32:	f000 f92b 	bl	800208c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e36:	200f      	movs	r0, #15
 8001e38:	f000 f808 	bl	8001e4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e3c:	f7ff fdbe 	bl	80019bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40023c00 	.word	0x40023c00

08001e4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_InitTick+0x54>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_InitTick+0x58>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 f943 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e00e      	b.n	8001e98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2b0f      	cmp	r3, #15
 8001e7e:	d80a      	bhi.n	8001e96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e80:	2200      	movs	r2, #0
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	f04f 30ff 	mov.w	r0, #4294967295
 8001e88:	f000 f90b 	bl	80020a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <HAL_InitTick+0x5c>)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e000      	b.n	8001e98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000008 	.word	0x20000008
 8001ea8:	20000004 	.word	0x20000004

08001eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_IncTick+0x20>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_IncTick+0x24>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4413      	add	r3, r2
 8001ebc:	4a04      	ldr	r2, [pc, #16]	; (8001ed0 <HAL_IncTick+0x24>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008
 8001ed0:	20000384 	.word	0x20000384

08001ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	; (8001ee8 <HAL_GetTick+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000384 	.word	0x20000384

08001eec <__NVIC_SetPriorityGrouping>:
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f08:	4013      	ands	r3, r2
 8001f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f1e:	4a04      	ldr	r2, [pc, #16]	; (8001f30 <__NVIC_SetPriorityGrouping+0x44>)
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	60d3      	str	r3, [r2, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_GetPriorityGrouping>:
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <__NVIC_GetPriorityGrouping+0x18>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	f003 0307 	and.w	r3, r3, #7
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000ed00 	.word	0xe000ed00

08001f50 <__NVIC_EnableIRQ>:
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	db0b      	blt.n	8001f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	f003 021f 	and.w	r2, r3, #31
 8001f68:	4907      	ldr	r1, [pc, #28]	; (8001f88 <__NVIC_EnableIRQ+0x38>)
 8001f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6e:	095b      	lsrs	r3, r3, #5
 8001f70:	2001      	movs	r0, #1
 8001f72:	fa00 f202 	lsl.w	r2, r0, r2
 8001f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	e000e100 	.word	0xe000e100

08001f8c <__NVIC_SetPriority>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	6039      	str	r1, [r7, #0]
 8001f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	db0a      	blt.n	8001fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	490c      	ldr	r1, [pc, #48]	; (8001fd8 <__NVIC_SetPriority+0x4c>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	0112      	lsls	r2, r2, #4
 8001fac:	b2d2      	uxtb	r2, r2
 8001fae:	440b      	add	r3, r1
 8001fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001fb4:	e00a      	b.n	8001fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4908      	ldr	r1, [pc, #32]	; (8001fdc <__NVIC_SetPriority+0x50>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	3b04      	subs	r3, #4
 8001fc4:	0112      	lsls	r2, r2, #4
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	440b      	add	r3, r1
 8001fca:	761a      	strb	r2, [r3, #24]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000e100 	.word	0xe000e100
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <NVIC_EncodePriority>:
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f1c3 0307 	rsb	r3, r3, #7
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf28      	it	cs
 8001ffe:	2304      	movcs	r3, #4
 8002000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3304      	adds	r3, #4
 8002006:	2b06      	cmp	r3, #6
 8002008:	d902      	bls.n	8002010 <NVIC_EncodePriority+0x30>
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3b03      	subs	r3, #3
 800200e:	e000      	b.n	8002012 <NVIC_EncodePriority+0x32>
 8002010:	2300      	movs	r3, #0
 8002012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	f04f 32ff 	mov.w	r2, #4294967295
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43da      	mvns	r2, r3
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	401a      	ands	r2, r3
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	fa01 f303 	lsl.w	r3, r1, r3
 8002032:	43d9      	mvns	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	4313      	orrs	r3, r2
}
 800203a:	4618      	mov	r0, r3
 800203c:	3724      	adds	r7, #36	; 0x24
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <SysTick_Config>:
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3b01      	subs	r3, #1
 8002054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002058:	d301      	bcc.n	800205e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800205a:	2301      	movs	r3, #1
 800205c:	e00f      	b.n	800207e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800205e:	4a0a      	ldr	r2, [pc, #40]	; (8002088 <SysTick_Config+0x40>)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3b01      	subs	r3, #1
 8002064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002066:	210f      	movs	r1, #15
 8002068:	f04f 30ff 	mov.w	r0, #4294967295
 800206c:	f7ff ff8e 	bl	8001f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <SysTick_Config+0x40>)
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <SysTick_Config+0x40>)
 8002078:	2207      	movs	r2, #7
 800207a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	e000e010 	.word	0xe000e010

0800208c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff29 	bl	8001eec <__NVIC_SetPriorityGrouping>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020b4:	f7ff ff3e 	bl	8001f34 <__NVIC_GetPriorityGrouping>
 80020b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	68b9      	ldr	r1, [r7, #8]
 80020be:	6978      	ldr	r0, [r7, #20]
 80020c0:	f7ff ff8e 	bl	8001fe0 <NVIC_EncodePriority>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff5d 	bl	8001f8c <__NVIC_SetPriority>
}
 80020d2:	bf00      	nop
 80020d4:	3718      	adds	r7, #24
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	4603      	mov	r3, r0
 80020e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff31 	bl	8001f50 <__NVIC_EnableIRQ>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffa2 	bl	8002048 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	; 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e165      	b.n	80023f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8154 	bne.w	80023f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d017      	beq.n	8002200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80ae 	beq.w	80023f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_GPIO_Init+0x300>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	4a5c      	ldr	r2, [pc, #368]	; (8002410 <HAL_GPIO_Init+0x300>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	; 0x44
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <HAL_GPIO_Init+0x300>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a58      	ldr	r2, [pc, #352]	; (8002414 <HAL_GPIO_Init+0x304>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4f      	ldr	r2, [pc, #316]	; (8002418 <HAL_GPIO_Init+0x308>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x21a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4e      	ldr	r2, [pc, #312]	; (800241c <HAL_GPIO_Init+0x30c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x216>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4d      	ldr	r2, [pc, #308]	; (8002420 <HAL_GPIO_Init+0x310>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x212>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	; (8002424 <HAL_GPIO_Init+0x314>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x20e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4b      	ldr	r2, [pc, #300]	; (8002428 <HAL_GPIO_Init+0x318>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x20a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4a      	ldr	r2, [pc, #296]	; (800242c <HAL_GPIO_Init+0x31c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x206>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	; (8002430 <HAL_GPIO_Init+0x320>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x202>
 800230e:	2306      	movs	r3, #6
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002312:	2307      	movs	r3, #7
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233c:	4935      	ldr	r1, [pc, #212]	; (8002414 <HAL_GPIO_Init+0x304>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b3a      	ldr	r3, [pc, #232]	; (8002434 <HAL_GPIO_Init+0x324>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a31      	ldr	r2, [pc, #196]	; (8002434 <HAL_GPIO_Init+0x324>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <HAL_GPIO_Init+0x324>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a26      	ldr	r2, [pc, #152]	; (8002434 <HAL_GPIO_Init+0x324>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239e:	4b25      	ldr	r3, [pc, #148]	; (8002434 <HAL_GPIO_Init+0x324>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c2:	4a1c      	ldr	r2, [pc, #112]	; (8002434 <HAL_GPIO_Init+0x324>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_GPIO_Init+0x324>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ec:	4a11      	ldr	r2, [pc, #68]	; (8002434 <HAL_GPIO_Init+0x324>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae96 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3724      	adds	r7, #36	; 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40013800 	.word	0x40013800
 8002418:	40020000 	.word	0x40020000
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40021000 	.word	0x40021000
 800242c:	40021400 	.word	0x40021400
 8002430:	40021800 	.word	0x40021800
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	619a      	str	r2, [r3, #24]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	4b20      	ldr	r3, [pc, #128]	; (80024fc <HAL_PWREx_EnableOverDrive+0x90>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	4a1f      	ldr	r2, [pc, #124]	; (80024fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002484:	6413      	str	r3, [r2, #64]	; 0x40
 8002486:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HAL_PWREx_EnableOverDrive+0x90>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002492:	4b1b      	ldr	r3, [pc, #108]	; (8002500 <HAL_PWREx_EnableOverDrive+0x94>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002498:	f7ff fd1c 	bl	8001ed4 <HAL_GetTick>
 800249c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800249e:	e009      	b.n	80024b4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024a0:	f7ff fd18 	bl	8001ed4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024ae:	d901      	bls.n	80024b4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e01f      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <HAL_PWREx_EnableOverDrive+0x98>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c0:	d1ee      	bne.n	80024a0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c8:	f7ff fd04 	bl	8001ed4 <HAL_GetTick>
 80024cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024ce:	e009      	b.n	80024e4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024d0:	f7ff fd00 	bl	8001ed4 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024de:	d901      	bls.n	80024e4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e007      	b.n	80024f4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_PWREx_EnableOverDrive+0x98>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024f0:	d1ee      	bne.n	80024d0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40023800 	.word	0x40023800
 8002500:	420e0040 	.word	0x420e0040
 8002504:	40007000 	.word	0x40007000
 8002508:	420e0044 	.word	0x420e0044

0800250c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0cc      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d90c      	bls.n	8002548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b65      	ldr	r3, [pc, #404]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	429a      	cmp	r2, r3
 8002542:	d001      	beq.n	8002548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e0b8      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d005      	beq.n	800256c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002560:	4b59      	ldr	r3, [pc, #356]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800256a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002578:	4b53      	ldr	r3, [pc, #332]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a52      	ldr	r2, [pc, #328]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	494d      	ldr	r1, [pc, #308]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	4313      	orrs	r3, r2
 8002594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d044      	beq.n	800262c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025aa:	4b47      	ldr	r3, [pc, #284]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d119      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e07f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d003      	beq.n	80025ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b3f      	ldr	r3, [pc, #252]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e06f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e067      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4934      	ldr	r1, [pc, #208]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025fc:	f7ff fc6a 	bl	8001ed4 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7ff fc66 	bl	8001ed4 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e04f      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2b      	ldr	r3, [pc, #172]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d20c      	bcs.n	8002654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002642:	4b20      	ldr	r3, [pc, #128]	; (80026c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 030f 	and.w	r3, r3, #15
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d001      	beq.n	8002654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e032      	b.n	80026ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4916      	ldr	r1, [pc, #88]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800266e:	4313      	orrs	r3, r2
 8002670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d009      	beq.n	8002692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	490e      	ldr	r1, [pc, #56]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002692:	f000 f821 	bl	80026d8 <HAL_RCC_GetSysClockFreq>
 8002696:	4602      	mov	r2, r0
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_RCC_ClockConfig+0x1bc>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 030f 	and.w	r3, r3, #15
 80026a2:	490a      	ldr	r1, [pc, #40]	; (80026cc <HAL_RCC_ClockConfig+0x1c0>)
 80026a4:	5ccb      	ldrb	r3, [r1, r3]
 80026a6:	fa22 f303 	lsr.w	r3, r2, r3
 80026aa:	4a09      	ldr	r2, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_ClockConfig+0x1c8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fbca 	bl	8001e4c <HAL_InitTick>

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023c00 	.word	0x40023c00
 80026c8:	40023800 	.word	0x40023800
 80026cc:	08006e8c 	.word	0x08006e8c
 80026d0:	20000000 	.word	0x20000000
 80026d4:	20000004 	.word	0x20000004

080026d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026dc:	b0a6      	sub	sp, #152	; 0x98
 80026de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026fe:	4bc8      	ldr	r3, [pc, #800]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b0c      	cmp	r3, #12
 8002708:	f200 817e 	bhi.w	8002a08 <HAL_RCC_GetSysClockFreq+0x330>
 800270c:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <HAL_RCC_GetSysClockFreq+0x3c>)
 800270e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002712:	bf00      	nop
 8002714:	08002749 	.word	0x08002749
 8002718:	08002a09 	.word	0x08002a09
 800271c:	08002a09 	.word	0x08002a09
 8002720:	08002a09 	.word	0x08002a09
 8002724:	08002751 	.word	0x08002751
 8002728:	08002a09 	.word	0x08002a09
 800272c:	08002a09 	.word	0x08002a09
 8002730:	08002a09 	.word	0x08002a09
 8002734:	08002759 	.word	0x08002759
 8002738:	08002a09 	.word	0x08002a09
 800273c:	08002a09 	.word	0x08002a09
 8002740:	08002a09 	.word	0x08002a09
 8002744:	080028c3 	.word	0x080028c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002748:	4bb6      	ldr	r3, [pc, #728]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x34c>)
 800274a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800274e:	e15f      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002750:	4bb5      	ldr	r3, [pc, #724]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x350>)
 8002752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002756:	e15b      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002758:	4bb1      	ldr	r3, [pc, #708]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002764:	4bae      	ldr	r3, [pc, #696]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d031      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002770:	4bab      	ldr	r3, [pc, #684]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	2200      	movs	r2, #0
 8002778:	66bb      	str	r3, [r7, #104]	; 0x68
 800277a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800277c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800277e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002782:	663b      	str	r3, [r7, #96]	; 0x60
 8002784:	2300      	movs	r3, #0
 8002786:	667b      	str	r3, [r7, #100]	; 0x64
 8002788:	4ba7      	ldr	r3, [pc, #668]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x350>)
 800278a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800278e:	462a      	mov	r2, r5
 8002790:	fb03 f202 	mul.w	r2, r3, r2
 8002794:	2300      	movs	r3, #0
 8002796:	4621      	mov	r1, r4
 8002798:	fb01 f303 	mul.w	r3, r1, r3
 800279c:	4413      	add	r3, r2
 800279e:	4aa2      	ldr	r2, [pc, #648]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x350>)
 80027a0:	4621      	mov	r1, r4
 80027a2:	fba1 1202 	umull	r1, r2, r1, r2
 80027a6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80027a8:	460a      	mov	r2, r1
 80027aa:	67ba      	str	r2, [r7, #120]	; 0x78
 80027ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80027ae:	4413      	add	r3, r2
 80027b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80027b6:	2200      	movs	r2, #0
 80027b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80027ba:	65fa      	str	r2, [r7, #92]	; 0x5c
 80027bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80027c4:	f7fe fa60 	bl	8000c88 <__aeabi_uldivmod>
 80027c8:	4602      	mov	r2, r0
 80027ca:	460b      	mov	r3, r1
 80027cc:	4613      	mov	r3, r2
 80027ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80027d2:	e064      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027d4:	4b92      	ldr	r3, [pc, #584]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	099b      	lsrs	r3, r3, #6
 80027da:	2200      	movs	r2, #0
 80027dc:	653b      	str	r3, [r7, #80]	; 0x50
 80027de:	657a      	str	r2, [r7, #84]	; 0x54
 80027e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80027e8:	2300      	movs	r3, #0
 80027ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027ec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80027f0:	4622      	mov	r2, r4
 80027f2:	462b      	mov	r3, r5
 80027f4:	f04f 0000 	mov.w	r0, #0
 80027f8:	f04f 0100 	mov.w	r1, #0
 80027fc:	0159      	lsls	r1, r3, #5
 80027fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002802:	0150      	lsls	r0, r2, #5
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4621      	mov	r1, r4
 800280a:	1a51      	subs	r1, r2, r1
 800280c:	6139      	str	r1, [r7, #16]
 800280e:	4629      	mov	r1, r5
 8002810:	eb63 0301 	sbc.w	r3, r3, r1
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	f04f 0300 	mov.w	r3, #0
 800281e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002822:	4659      	mov	r1, fp
 8002824:	018b      	lsls	r3, r1, #6
 8002826:	4651      	mov	r1, sl
 8002828:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800282c:	4651      	mov	r1, sl
 800282e:	018a      	lsls	r2, r1, #6
 8002830:	4651      	mov	r1, sl
 8002832:	ebb2 0801 	subs.w	r8, r2, r1
 8002836:	4659      	mov	r1, fp
 8002838:	eb63 0901 	sbc.w	r9, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002848:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800284c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002850:	4690      	mov	r8, r2
 8002852:	4699      	mov	r9, r3
 8002854:	4623      	mov	r3, r4
 8002856:	eb18 0303 	adds.w	r3, r8, r3
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	462b      	mov	r3, r5
 800285e:	eb49 0303 	adc.w	r3, r9, r3
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002870:	4629      	mov	r1, r5
 8002872:	028b      	lsls	r3, r1, #10
 8002874:	4621      	mov	r1, r4
 8002876:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800287a:	4621      	mov	r1, r4
 800287c:	028a      	lsls	r2, r1, #10
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002886:	2200      	movs	r2, #0
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
 800288a:	647a      	str	r2, [r7, #68]	; 0x44
 800288c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002890:	f7fe f9fa 	bl	8000c88 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800289e:	4b60      	ldr	r3, [pc, #384]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0c1b      	lsrs	r3, r3, #16
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	3301      	adds	r3, #1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80028b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80028b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80028c0:	e0a6      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028c2:	4b57      	ldr	r3, [pc, #348]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028ce:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d02a      	beq.n	8002930 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028da:	4b51      	ldr	r3, [pc, #324]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	2200      	movs	r2, #0
 80028e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80028e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028ec:	2100      	movs	r1, #0
 80028ee:	4b4e      	ldr	r3, [pc, #312]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x350>)
 80028f0:	fb03 f201 	mul.w	r2, r3, r1
 80028f4:	2300      	movs	r3, #0
 80028f6:	fb00 f303 	mul.w	r3, r0, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	4a4a      	ldr	r2, [pc, #296]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x350>)
 80028fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002902:	677a      	str	r2, [r7, #116]	; 0x74
 8002904:	460a      	mov	r2, r1
 8002906:	673a      	str	r2, [r7, #112]	; 0x70
 8002908:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800290a:	4413      	add	r3, r2
 800290c:	677b      	str	r3, [r7, #116]	; 0x74
 800290e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002912:	2200      	movs	r2, #0
 8002914:	633b      	str	r3, [r7, #48]	; 0x30
 8002916:	637a      	str	r2, [r7, #52]	; 0x34
 8002918:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800291c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002920:	f7fe f9b2 	bl	8000c88 <__aeabi_uldivmod>
 8002924:	4602      	mov	r2, r0
 8002926:	460b      	mov	r3, r1
 8002928:	4613      	mov	r3, r2
 800292a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800292e:	e05b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002930:	4b3b      	ldr	r3, [pc, #236]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	2200      	movs	r2, #0
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
 800293a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	2300      	movs	r3, #0
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
 8002948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800294c:	4642      	mov	r2, r8
 800294e:	464b      	mov	r3, r9
 8002950:	f04f 0000 	mov.w	r0, #0
 8002954:	f04f 0100 	mov.w	r1, #0
 8002958:	0159      	lsls	r1, r3, #5
 800295a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800295e:	0150      	lsls	r0, r2, #5
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4641      	mov	r1, r8
 8002966:	ebb2 0a01 	subs.w	sl, r2, r1
 800296a:	4649      	mov	r1, r9
 800296c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	f04f 0300 	mov.w	r3, #0
 8002978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800297c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002984:	ebb2 040a 	subs.w	r4, r2, sl
 8002988:	eb63 050b 	sbc.w	r5, r3, fp
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	00eb      	lsls	r3, r5, #3
 8002996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800299a:	00e2      	lsls	r2, r4, #3
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	4643      	mov	r3, r8
 80029a2:	18e3      	adds	r3, r4, r3
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	464b      	mov	r3, r9
 80029a8:	eb45 0303 	adc.w	r3, r5, r3
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ba:	4629      	mov	r1, r5
 80029bc:	028b      	lsls	r3, r1, #10
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029c4:	4621      	mov	r1, r4
 80029c6:	028a      	lsls	r2, r1, #10
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80029d0:	2200      	movs	r2, #0
 80029d2:	61bb      	str	r3, [r7, #24]
 80029d4:	61fa      	str	r2, [r7, #28]
 80029d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029da:	f7fe f955 	bl	8000c88 <__aeabi_uldivmod>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4613      	mov	r3, r2
 80029e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <HAL_RCC_GetSysClockFreq+0x348>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	0f1b      	lsrs	r3, r3, #28
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80029f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a06:	e003      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002a0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3798      	adds	r7, #152	; 0x98
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800
 8002a24:	00f42400 	.word	0x00f42400
 8002a28:	017d7840 	.word	0x017d7840

08002a2c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e28d      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8083 	beq.w	8002b52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a4c:	4b94      	ldr	r3, [pc, #592]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d019      	beq.n	8002a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a58:	4b91      	ldr	r3, [pc, #580]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a64:	4b8e      	ldr	r3, [pc, #568]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a70:	d00c      	beq.n	8002a8c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a72:	4b8b      	ldr	r3, [pc, #556]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a7a:	2b0c      	cmp	r3, #12
 8002a7c:	d112      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a7e:	4b88      	ldr	r3, [pc, #544]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a8a:	d10b      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a8c:	4b84      	ldr	r3, [pc, #528]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d05b      	beq.n	8002b50 <HAL_RCC_OscConfig+0x124>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d157      	bne.n	8002b50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e25a      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x90>
 8002aae:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7b      	ldr	r2, [pc, #492]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xcc>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xb4>
 8002ac6:	4b76      	ldr	r3, [pc, #472]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a75      	ldr	r2, [pc, #468]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b73      	ldr	r3, [pc, #460]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a72      	ldr	r2, [pc, #456]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xcc>
 8002ae0:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b6c      	ldr	r3, [pc, #432]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6b      	ldr	r2, [pc, #428]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b00:	f7ff f9e8 	bl	8001ed4 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b08:	f7ff f9e4 	bl	8001ed4 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	; 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e21f      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b61      	ldr	r3, [pc, #388]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xdc>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b28:	f7ff f9d4 	bl	8001ed4 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b30:	f7ff f9d0 	bl	8001ed4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	; 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e20b      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b57      	ldr	r3, [pc, #348]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x104>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d06f      	beq.n	8002c3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b5e:	4b50      	ldr	r3, [pc, #320]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d017      	beq.n	8002b9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b6a:	4b4d      	ldr	r3, [pc, #308]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b76:	4b4a      	ldr	r3, [pc, #296]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00b      	beq.n	8002b9a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b82:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b8e:	4b44      	ldr	r3, [pc, #272]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d116      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	4b41      	ldr	r3, [pc, #260]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x186>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d001      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e1d3      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb2:	4b3b      	ldr	r3, [pc, #236]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4937      	ldr	r1, [pc, #220]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	e03a      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d020      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCC_OscConfig+0x278>)
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7ff f97d 	bl	8001ed4 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bde:	f7ff f979 	bl	8001ed4 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e1b4      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf0:	4b2b      	ldr	r3, [pc, #172]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b28      	ldr	r3, [pc, #160]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	00db      	lsls	r3, r3, #3
 8002c0a:	4925      	ldr	r1, [pc, #148]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]
 8002c10:	e015      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b24      	ldr	r3, [pc, #144]	; (8002ca4 <HAL_RCC_OscConfig+0x278>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f95c 	bl	8001ed4 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c20:	f7ff f958 	bl	8001ed4 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e193      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d036      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d016      	beq.n	8002c80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_RCC_OscConfig+0x27c>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7ff f93c 	bl	8001ed4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c60:	f7ff f938 	bl	8001ed4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e173      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c72:	4b0b      	ldr	r3, [pc, #44]	; (8002ca0 <HAL_RCC_OscConfig+0x274>)
 8002c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0f0      	beq.n	8002c60 <HAL_RCC_OscConfig+0x234>
 8002c7e:	e01b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c80:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c86:	f7ff f925 	bl	8001ed4 <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c8c:	e00e      	b.n	8002cac <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8e:	f7ff f921 	bl	8001ed4 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d907      	bls.n	8002cac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e15c      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	42470000 	.word	0x42470000
 8002ca8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cac:	4b8a      	ldr	r3, [pc, #552]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1ea      	bne.n	8002c8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8097 	beq.w	8002df4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b83      	ldr	r3, [pc, #524]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10f      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	4b7f      	ldr	r3, [pc, #508]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a7e      	ldr	r2, [pc, #504]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b7c      	ldr	r3, [pc, #496]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	60bb      	str	r3, [r7, #8]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf6:	4b79      	ldr	r3, [pc, #484]	; (8002edc <HAL_RCC_OscConfig+0x4b0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d118      	bne.n	8002d34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x4b0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x4b0>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff f8e1 	bl	8001ed4 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7ff f8dd 	bl	8001ed4 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e118      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d28:	4b6c      	ldr	r3, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x4b0>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d106      	bne.n	8002d4a <HAL_RCC_OscConfig+0x31e>
 8002d3c:	4b66      	ldr	r3, [pc, #408]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4a65      	ldr	r2, [pc, #404]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	6713      	str	r3, [r2, #112]	; 0x70
 8002d48:	e01c      	b.n	8002d84 <HAL_RCC_OscConfig+0x358>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0x340>
 8002d52:	4b61      	ldr	r3, [pc, #388]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a60      	ldr	r2, [pc, #384]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	f043 0304 	orr.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5e:	4b5e      	ldr	r3, [pc, #376]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d62:	4a5d      	ldr	r2, [pc, #372]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0x358>
 8002d6c:	4b5a      	ldr	r3, [pc, #360]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a59      	ldr	r2, [pc, #356]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d72:	f023 0301 	bic.w	r3, r3, #1
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	4b57      	ldr	r3, [pc, #348]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7c:	4a56      	ldr	r2, [pc, #344]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002d7e:	f023 0304 	bic.w	r3, r3, #4
 8002d82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d015      	beq.n	8002db8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f7ff f8a2 	bl	8001ed4 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7ff f89e 	bl	8001ed4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0d7      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d0ee      	beq.n	8002d94 <HAL_RCC_OscConfig+0x368>
 8002db6:	e014      	b.n	8002de2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7ff f88c 	bl	8001ed4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7ff f888 	bl	8001ed4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0c1      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd6:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d105      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de8:	4b3b      	ldr	r3, [pc, #236]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	4a3a      	ldr	r2, [pc, #232]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80ad 	beq.w	8002f58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dfe:	4b36      	ldr	r3, [pc, #216]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	2b08      	cmp	r3, #8
 8002e08:	d060      	beq.n	8002ecc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d145      	bne.n	8002e9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e12:	4b33      	ldr	r3, [pc, #204]	; (8002ee0 <HAL_RCC_OscConfig+0x4b4>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7ff f85c 	bl	8001ed4 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e20:	f7ff f858 	bl	8001ed4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e093      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f0      	bne.n	8002e20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69da      	ldr	r2, [r3, #28]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	019b      	lsls	r3, r3, #6
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e54:	085b      	lsrs	r3, r3, #1
 8002e56:	3b01      	subs	r3, #1
 8002e58:	041b      	lsls	r3, r3, #16
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	071b      	lsls	r3, r3, #28
 8002e6a:	491b      	ldr	r1, [pc, #108]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <HAL_RCC_OscConfig+0x4b4>)
 8002e72:	2201      	movs	r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e76:	f7ff f82d 	bl	8001ed4 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff f829 	bl	8001ed4 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e064      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x452>
 8002e9c:	e05c      	b.n	8002f58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9e:	4b10      	ldr	r3, [pc, #64]	; (8002ee0 <HAL_RCC_OscConfig+0x4b4>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea4:	f7ff f816 	bl	8001ed4 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7ff f812 	bl	8001ed4 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e04d      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <HAL_RCC_OscConfig+0x4ac>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x480>
 8002eca:	e045      	b.n	8002f58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e040      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40007000 	.word	0x40007000
 8002ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_RCC_OscConfig+0x538>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d030      	beq.n	8002f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d129      	bne.n	8002f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d122      	bne.n	8002f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f14:	4013      	ands	r3, r2
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d119      	bne.n	8002f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d10f      	bne.n	8002f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fe fd8c 	bl	8001aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fdce 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e04e      	b.n	80030be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_TIM_Base_Start_IT+0xc4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d022      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d01d      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d010      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e007      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	40010400 	.word	0x40010400
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40001800 	.word	0x40001800

080030e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e041      	b.n	800317e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f839 	bl	8003186 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fd0e 	bl	8003b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003186:	b480      	push	{r7}
 8003188:	b083      	sub	sp, #12
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_TIM_PWM_Start+0x24>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	bf14      	ite	ne
 80031b8:	2301      	movne	r3, #1
 80031ba:	2300      	moveq	r3, #0
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	e022      	b.n	8003206 <HAL_TIM_PWM_Start+0x6a>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d109      	bne.n	80031da <HAL_TIM_PWM_Start+0x3e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	bf14      	ite	ne
 80031d2:	2301      	movne	r3, #1
 80031d4:	2300      	moveq	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	e015      	b.n	8003206 <HAL_TIM_PWM_Start+0x6a>
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d109      	bne.n	80031f4 <HAL_TIM_PWM_Start+0x58>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e008      	b.n	8003206 <HAL_TIM_PWM_Start+0x6a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	bf14      	ite	ne
 8003200:	2301      	movne	r3, #1
 8003202:	2300      	moveq	r3, #0
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e07c      	b.n	8003308 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d104      	bne.n	800321e <HAL_TIM_PWM_Start+0x82>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800321c:	e013      	b.n	8003246 <HAL_TIM_PWM_Start+0xaa>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Start+0x92>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322c:	e00b      	b.n	8003246 <HAL_TIM_PWM_Start+0xaa>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Start+0xa2>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323c:	e003      	b.n	8003246 <HAL_TIM_PWM_Start+0xaa>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2201      	movs	r2, #1
 800324c:	6839      	ldr	r1, [r7, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 ff64 	bl	800411c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <HAL_TIM_PWM_Start+0x174>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d004      	beq.n	8003268 <HAL_TIM_PWM_Start+0xcc>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <HAL_TIM_PWM_Start+0x178>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_TIM_PWM_Start+0xd0>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_TIM_PWM_Start+0xd2>
 800326c:	2300      	movs	r3, #0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d007      	beq.n	8003282 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a22      	ldr	r2, [pc, #136]	; (8003310 <HAL_TIM_PWM_Start+0x174>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003294:	d01d      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_TIM_PWM_Start+0x17c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1d      	ldr	r2, [pc, #116]	; (800331c <HAL_TIM_PWM_Start+0x180>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_TIM_PWM_Start+0x184>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a16      	ldr	r2, [pc, #88]	; (8003314 <HAL_TIM_PWM_Start+0x178>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a18      	ldr	r2, [pc, #96]	; (8003324 <HAL_TIM_PWM_Start+0x188>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_TIM_PWM_Start+0x136>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a16      	ldr	r2, [pc, #88]	; (8003328 <HAL_TIM_PWM_Start+0x18c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d111      	bne.n	80032f6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b06      	cmp	r3, #6
 80032e2:	d010      	beq.n	8003306 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f4:	e007      	b.n	8003306 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 0201 	orr.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40010000 	.word	0x40010000
 8003314:	40010400 	.word	0x40010400
 8003318:	40000400 	.word	0x40000400
 800331c:	40000800 	.word	0x40000800
 8003320:	40000c00 	.word	0x40000c00
 8003324:	40014000 	.word	0x40014000
 8003328:	40001800 	.word	0x40001800

0800332c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e097      	b.n	8003470 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d106      	bne.n	800335a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7fe fb59 	bl	8001a0c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	6812      	ldr	r2, [r2, #0]
 800336c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003370:	f023 0307 	bic.w	r3, r3, #7
 8003374:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 fbe1 	bl	8003b48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033ae:	f023 0303 	bic.w	r3, r3, #3
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	021b      	lsls	r3, r3, #8
 80033be:	4313      	orrs	r3, r2
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80033cc:	f023 030c 	bic.w	r3, r3, #12
 80033d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	4313      	orrs	r3, r2
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	011a      	lsls	r2, r3, #4
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6a1b      	ldr	r3, [r3, #32]
 80033fa:	031b      	lsls	r3, r3, #12
 80033fc:	4313      	orrs	r3, r2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800340a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003412:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	4313      	orrs	r3, r2
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003488:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003490:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003498:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80034a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d110      	bne.n	80034ca <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034a8:	7bfb      	ldrb	r3, [r7, #15]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d102      	bne.n	80034b4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80034ae:	7b7b      	ldrb	r3, [r7, #13]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d001      	beq.n	80034b8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e089      	b.n	80035cc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034c8:	e031      	b.n	800352e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d110      	bne.n	80034f2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d102      	bne.n	80034dc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80034d6:	7b3b      	ldrb	r3, [r7, #12]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d001      	beq.n	80034e0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e075      	b.n	80035cc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f0:	e01d      	b.n	800352e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d105      	bne.n	800350a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80034fe:	7b7b      	ldrb	r3, [r7, #13]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d102      	bne.n	800350a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003504:	7b3b      	ldrb	r3, [r7, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d001      	beq.n	800350e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e05e      	b.n	80035cc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2202      	movs	r2, #2
 800351a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2202      	movs	r2, #2
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_TIM_Encoder_Start_IT+0xc4>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	2b04      	cmp	r3, #4
 8003538:	d010      	beq.n	800355c <HAL_TIM_Encoder_Start_IT+0xe4>
 800353a:	e01f      	b.n	800357c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2201      	movs	r2, #1
 8003542:	2100      	movs	r1, #0
 8003544:	4618      	mov	r0, r3
 8003546:	f000 fde9 	bl	800411c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0202 	orr.w	r2, r2, #2
 8003558:	60da      	str	r2, [r3, #12]
      break;
 800355a:	e02e      	b.n	80035ba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2201      	movs	r2, #1
 8003562:	2104      	movs	r1, #4
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fdd9 	bl	800411c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f042 0204 	orr.w	r2, r2, #4
 8003578:	60da      	str	r2, [r3, #12]
      break;
 800357a:	e01e      	b.n	80035ba <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2201      	movs	r2, #1
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fdc9 	bl	800411c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	2104      	movs	r1, #4
 8003592:	4618      	mov	r0, r3
 8003594:	f000 fdc2 	bl	800411c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0202 	orr.w	r2, r2, #2
 80035a6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0204 	orr.w	r2, r2, #4
 80035b6:	60da      	str	r2, [r3, #12]
      break;
 80035b8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0201 	orr.w	r2, r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d122      	bne.n	8003630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d11b      	bne.n	8003630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0202 	mvn.w	r2, #2
 8003600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fa77 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 800361c:	e005      	b.n	800362a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fa69 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fa7a 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f003 0304 	and.w	r3, r3, #4
 800363a:	2b04      	cmp	r3, #4
 800363c:	d122      	bne.n	8003684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b04      	cmp	r3, #4
 800364a:	d11b      	bne.n	8003684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0204 	mvn.w	r2, #4
 8003654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2202      	movs	r2, #2
 800365a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fa4d 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 8003670:	e005      	b.n	800367e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa3f 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fa50 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0308 	and.w	r3, r3, #8
 800368e:	2b08      	cmp	r3, #8
 8003690:	d122      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b08      	cmp	r3, #8
 800369e:	d11b      	bne.n	80036d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0208 	mvn.w	r2, #8
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fa23 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fa15 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa26 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d122      	bne.n	800372c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f003 0310 	and.w	r3, r3, #16
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d11b      	bne.n	800372c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f06f 0210 	mvn.w	r2, #16
 80036fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2208      	movs	r2, #8
 8003702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f9f9 	bl	8003b0a <HAL_TIM_IC_CaptureCallback>
 8003718:	e005      	b.n	8003726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f9eb 	bl	8003af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f9fc 	bl	8003b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10e      	bne.n	8003758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f06f 0201 	mvn.w	r2, #1
 8003750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fd fc98 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d10e      	bne.n	8003784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d107      	bne.n	8003784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800377c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fd78 	bl	8004274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378e:	2b40      	cmp	r3, #64	; 0x40
 8003790:	d10e      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d107      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f9c1 	bl	8003b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b20      	cmp	r3, #32
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0220 	mvn.w	r2, #32
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fd42 	bl	8004260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037dc:	bf00      	nop
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037fe:	2302      	movs	r3, #2
 8003800:	e0ae      	b.n	8003960 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2b0c      	cmp	r3, #12
 800380e:	f200 809f 	bhi.w	8003950 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003812:	a201      	add	r2, pc, #4	; (adr r2, 8003818 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003818:	0800384d 	.word	0x0800384d
 800381c:	08003951 	.word	0x08003951
 8003820:	08003951 	.word	0x08003951
 8003824:	08003951 	.word	0x08003951
 8003828:	0800388d 	.word	0x0800388d
 800382c:	08003951 	.word	0x08003951
 8003830:	08003951 	.word	0x08003951
 8003834:	08003951 	.word	0x08003951
 8003838:	080038cf 	.word	0x080038cf
 800383c:	08003951 	.word	0x08003951
 8003840:	08003951 	.word	0x08003951
 8003844:	08003951 	.word	0x08003951
 8003848:	0800390f 	.word	0x0800390f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	68b9      	ldr	r1, [r7, #8]
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fa18 	bl	8003c88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699a      	ldr	r2, [r3, #24]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0208 	orr.w	r2, r2, #8
 8003866:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6999      	ldr	r1, [r3, #24]
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	691a      	ldr	r2, [r3, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	619a      	str	r2, [r3, #24]
      break;
 800388a:	e064      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fa68 	bl	8003d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699a      	ldr	r2, [r3, #24]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699a      	ldr	r2, [r3, #24]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6999      	ldr	r1, [r3, #24]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	021a      	lsls	r2, r3, #8
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	619a      	str	r2, [r3, #24]
      break;
 80038cc:	e043      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68b9      	ldr	r1, [r7, #8]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fabd 	bl	8003e54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	69da      	ldr	r2, [r3, #28]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f042 0208 	orr.w	r2, r2, #8
 80038e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0204 	bic.w	r2, r2, #4
 80038f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69d9      	ldr	r1, [r3, #28]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	61da      	str	r2, [r3, #28]
      break;
 800390c:	e023      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68b9      	ldr	r1, [r7, #8]
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fb11 	bl	8003f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	69da      	ldr	r2, [r3, #28]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003928:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69da      	ldr	r2, [r3, #28]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003938:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69d9      	ldr	r1, [r3, #28]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	021a      	lsls	r2, r3, #8
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	61da      	str	r2, [r3, #28]
      break;
 800394e:	e002      	b.n	8003956 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	75fb      	strb	r3, [r7, #23]
      break;
 8003954:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397c:	2b01      	cmp	r3, #1
 800397e:	d101      	bne.n	8003984 <HAL_TIM_ConfigClockSource+0x1c>
 8003980:	2302      	movs	r3, #2
 8003982:	e0b4      	b.n	8003aee <HAL_TIM_ConfigClockSource+0x186>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68ba      	ldr	r2, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039bc:	d03e      	beq.n	8003a3c <HAL_TIM_ConfigClockSource+0xd4>
 80039be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c2:	f200 8087 	bhi.w	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	f000 8086 	beq.w	8003ada <HAL_TIM_ConfigClockSource+0x172>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	d87f      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b70      	cmp	r3, #112	; 0x70
 80039d6:	d01a      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0xa6>
 80039d8:	2b70      	cmp	r3, #112	; 0x70
 80039da:	d87b      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039dc:	2b60      	cmp	r3, #96	; 0x60
 80039de:	d050      	beq.n	8003a82 <HAL_TIM_ConfigClockSource+0x11a>
 80039e0:	2b60      	cmp	r3, #96	; 0x60
 80039e2:	d877      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039e4:	2b50      	cmp	r3, #80	; 0x50
 80039e6:	d03c      	beq.n	8003a62 <HAL_TIM_ConfigClockSource+0xfa>
 80039e8:	2b50      	cmp	r3, #80	; 0x50
 80039ea:	d873      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b40      	cmp	r3, #64	; 0x40
 80039ee:	d058      	beq.n	8003aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80039f0:	2b40      	cmp	r3, #64	; 0x40
 80039f2:	d86f      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b30      	cmp	r3, #48	; 0x30
 80039f6:	d064      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80039f8:	2b30      	cmp	r3, #48	; 0x30
 80039fa:	d86b      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b20      	cmp	r3, #32
 80039fe:	d060      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a00:	2b20      	cmp	r3, #32
 8003a02:	d867      	bhi.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d05c      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a08:	2b10      	cmp	r3, #16
 8003a0a:	d05a      	beq.n	8003ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8003a0c:	e062      	b.n	8003ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6818      	ldr	r0, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6899      	ldr	r1, [r3, #8]
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f000 fb5d 	bl	80040dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	609a      	str	r2, [r3, #8]
      break;
 8003a3a:	e04f      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6818      	ldr	r0, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	6899      	ldr	r1, [r3, #8]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f000 fb46 	bl	80040dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a5e:	609a      	str	r2, [r3, #8]
      break;
 8003a60:	e03c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f000 faba 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2150      	movs	r1, #80	; 0x50
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fb13 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003a80:	e02c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	f000 fad9 	bl	8004046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2160      	movs	r1, #96	; 0x60
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 fb03 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003aa0:	e01c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6818      	ldr	r0, [r3, #0]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	6859      	ldr	r1, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f000 fa9a 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2140      	movs	r1, #64	; 0x40
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 faf3 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003ac0:	e00c      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4619      	mov	r1, r3
 8003acc:	4610      	mov	r0, r2
 8003ace:	f000 faea 	bl	80040a6 <TIM_ITRx_SetConfig>
      break;
 8003ad2:	e003      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad8:	e000      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003afe:	bf00      	nop
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b12:	bf00      	nop
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a40      	ldr	r2, [pc, #256]	; (8003c5c <TIM_Base_SetConfig+0x114>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b66:	d00f      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a3d      	ldr	r2, [pc, #244]	; (8003c60 <TIM_Base_SetConfig+0x118>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a3c      	ldr	r2, [pc, #240]	; (8003c64 <TIM_Base_SetConfig+0x11c>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a3b      	ldr	r2, [pc, #236]	; (8003c68 <TIM_Base_SetConfig+0x120>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0x40>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a3a      	ldr	r2, [pc, #232]	; (8003c6c <TIM_Base_SetConfig+0x124>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <TIM_Base_SetConfig+0x114>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d02b      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d027      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a2c      	ldr	r2, [pc, #176]	; (8003c60 <TIM_Base_SetConfig+0x118>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d023      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <TIM_Base_SetConfig+0x11c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01f      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <TIM_Base_SetConfig+0x120>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d01b      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <TIM_Base_SetConfig+0x124>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d017      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a28      	ldr	r2, [pc, #160]	; (8003c70 <TIM_Base_SetConfig+0x128>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d013      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <TIM_Base_SetConfig+0x12c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00f      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a26      	ldr	r2, [pc, #152]	; (8003c78 <TIM_Base_SetConfig+0x130>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a25      	ldr	r2, [pc, #148]	; (8003c7c <TIM_Base_SetConfig+0x134>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a24      	ldr	r2, [pc, #144]	; (8003c80 <TIM_Base_SetConfig+0x138>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_Base_SetConfig+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a23      	ldr	r2, [pc, #140]	; (8003c84 <TIM_Base_SetConfig+0x13c>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d108      	bne.n	8003c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	689a      	ldr	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <TIM_Base_SetConfig+0x114>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d003      	beq.n	8003c40 <TIM_Base_SetConfig+0xf8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a0c      	ldr	r2, [pc, #48]	; (8003c6c <TIM_Base_SetConfig+0x124>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d103      	bne.n	8003c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	691a      	ldr	r2, [r3, #16]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	615a      	str	r2, [r3, #20]
}
 8003c4e:	bf00      	nop
 8003c50:	3714      	adds	r7, #20
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40000400 	.word	0x40000400
 8003c64:	40000800 	.word	0x40000800
 8003c68:	40000c00 	.word	0x40000c00
 8003c6c:	40010400 	.word	0x40010400
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800
 8003c7c:	40001800 	.word	0x40001800
 8003c80:	40001c00 	.word	0x40001c00
 8003c84:	40002000 	.word	0x40002000

08003c88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f023 0201 	bic.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f023 0303 	bic.w	r3, r3, #3
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f023 0302 	bic.w	r3, r3, #2
 8003cd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <TIM_OC1_SetConfig+0xd8>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC1_SetConfig+0x64>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a1f      	ldr	r2, [pc, #124]	; (8003d64 <TIM_OC1_SetConfig+0xdc>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10c      	bne.n	8003d06 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0308 	bic.w	r3, r3, #8
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	f023 0304 	bic.w	r3, r3, #4
 8003d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <TIM_OC1_SetConfig+0xd8>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d003      	beq.n	8003d16 <TIM_OC1_SetConfig+0x8e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <TIM_OC1_SetConfig+0xdc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d111      	bne.n	8003d3a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	621a      	str	r2, [r3, #32]
}
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40010000 	.word	0x40010000
 8003d64:	40010400 	.word	0x40010400

08003d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	f023 0210 	bic.w	r2, r3, #16
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a1b      	ldr	r3, [r3, #32]
 8003d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	021b      	lsls	r3, r3, #8
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	f023 0320 	bic.w	r3, r3, #32
 8003db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a22      	ldr	r2, [pc, #136]	; (8003e4c <TIM_OC2_SetConfig+0xe4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <TIM_OC2_SetConfig+0x68>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a21      	ldr	r2, [pc, #132]	; (8003e50 <TIM_OC2_SetConfig+0xe8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10d      	bne.n	8003dec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <TIM_OC2_SetConfig+0xe4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC2_SetConfig+0x94>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <TIM_OC2_SetConfig+0xe8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d113      	bne.n	8003e24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	621a      	str	r2, [r3, #32]
}
 8003e3e:	bf00      	nop
 8003e40:	371c      	adds	r7, #28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40010000 	.word	0x40010000
 8003e50:	40010400 	.word	0x40010400

08003e54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	021b      	lsls	r3, r3, #8
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a21      	ldr	r2, [pc, #132]	; (8003f34 <TIM_OC3_SetConfig+0xe0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC3_SetConfig+0x66>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <TIM_OC3_SetConfig+0xe4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10d      	bne.n	8003ed6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ed4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	; (8003f34 <TIM_OC3_SetConfig+0xe0>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_OC3_SetConfig+0x92>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <TIM_OC3_SetConfig+0xe4>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d113      	bne.n	8003f0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	011b      	lsls	r3, r3, #4
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	011b      	lsls	r3, r3, #4
 8003f08:	693a      	ldr	r2, [r7, #16]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	621a      	str	r2, [r3, #32]
}
 8003f28:	bf00      	nop
 8003f2a:	371c      	adds	r7, #28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	40010000 	.word	0x40010000
 8003f38:	40010400 	.word	0x40010400

08003f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	021b      	lsls	r3, r3, #8
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	031b      	lsls	r3, r3, #12
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a12      	ldr	r2, [pc, #72]	; (8003fe0 <TIM_OC4_SetConfig+0xa4>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d003      	beq.n	8003fa4 <TIM_OC4_SetConfig+0x68>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a11      	ldr	r2, [pc, #68]	; (8003fe4 <TIM_OC4_SetConfig+0xa8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d109      	bne.n	8003fb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	621a      	str	r2, [r3, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40010000 	.word	0x40010000
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 030a 	bic.w	r3, r3, #10
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f023 0210 	bic.w	r2, r3, #16
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	621a      	str	r2, [r3, #32]
}
 800409a:	bf00      	nop
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr

080040a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f043 0307 	orr.w	r3, r3, #7
 80040c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b087      	sub	sp, #28
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	021a      	lsls	r2, r3, #8
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	431a      	orrs	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	4313      	orrs	r3, r2
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	4313      	orrs	r3, r2
 8004108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	609a      	str	r2, [r3, #8]
}
 8004110:	bf00      	nop
 8004112:	371c      	adds	r7, #28
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2201      	movs	r2, #1
 8004130:	fa02 f303 	lsl.w	r3, r2, r3
 8004134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a1a      	ldr	r2, [r3, #32]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	43db      	mvns	r3, r3
 800413e:	401a      	ands	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6a1a      	ldr	r2, [r3, #32]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
	...

08004168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800417c:	2302      	movs	r3, #2
 800417e:	e05a      	b.n	8004236 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68fa      	ldr	r2, [r7, #12]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a21      	ldr	r2, [pc, #132]	; (8004244 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d022      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041cc:	d01d      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a1d      	ldr	r2, [pc, #116]	; (8004248 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d018      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a1b      	ldr	r2, [pc, #108]	; (800424c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a1a      	ldr	r2, [pc, #104]	; (8004250 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00e      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a18      	ldr	r2, [pc, #96]	; (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d10c      	bne.n	8004224 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004210:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4313      	orrs	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40010000 	.word	0x40010000
 8004248:	40000400 	.word	0x40000400
 800424c:	40000800 	.word	0x40000800
 8004250:	40000c00 	.word	0x40000c00
 8004254:	40010400 	.word	0x40010400
 8004258:	40014000 	.word	0x40014000
 800425c:	40001800 	.word	0x40001800

08004260 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	2000000c 	.word	0x2000000c

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	4d0d      	ldr	r5, [pc, #52]	; (80042cc <__libc_init_array+0x38>)
 8004298:	4c0d      	ldr	r4, [pc, #52]	; (80042d0 <__libc_init_array+0x3c>)
 800429a:	1b64      	subs	r4, r4, r5
 800429c:	10a4      	asrs	r4, r4, #2
 800429e:	2600      	movs	r6, #0
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	4d0b      	ldr	r5, [pc, #44]	; (80042d4 <__libc_init_array+0x40>)
 80042a6:	4c0c      	ldr	r4, [pc, #48]	; (80042d8 <__libc_init_array+0x44>)
 80042a8:	f002 fdc4 	bl	8006e34 <_init>
 80042ac:	1b64      	subs	r4, r4, r5
 80042ae:	10a4      	asrs	r4, r4, #2
 80042b0:	2600      	movs	r6, #0
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	0800727c 	.word	0x0800727c
 80042d0:	0800727c 	.word	0x0800727c
 80042d4:	0800727c 	.word	0x0800727c
 80042d8:	08007280 	.word	0x08007280

080042dc <memset>:
 80042dc:	4402      	add	r2, r0
 80042de:	4603      	mov	r3, r0
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d100      	bne.n	80042e6 <memset+0xa>
 80042e4:	4770      	bx	lr
 80042e6:	f803 1b01 	strb.w	r1, [r3], #1
 80042ea:	e7f9      	b.n	80042e0 <memset+0x4>

080042ec <__cvt>:
 80042ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042f0:	ec55 4b10 	vmov	r4, r5, d0
 80042f4:	2d00      	cmp	r5, #0
 80042f6:	460e      	mov	r6, r1
 80042f8:	4619      	mov	r1, r3
 80042fa:	462b      	mov	r3, r5
 80042fc:	bfbb      	ittet	lt
 80042fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004302:	461d      	movlt	r5, r3
 8004304:	2300      	movge	r3, #0
 8004306:	232d      	movlt	r3, #45	; 0x2d
 8004308:	700b      	strb	r3, [r1, #0]
 800430a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800430c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004310:	4691      	mov	r9, r2
 8004312:	f023 0820 	bic.w	r8, r3, #32
 8004316:	bfbc      	itt	lt
 8004318:	4622      	movlt	r2, r4
 800431a:	4614      	movlt	r4, r2
 800431c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004320:	d005      	beq.n	800432e <__cvt+0x42>
 8004322:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004326:	d100      	bne.n	800432a <__cvt+0x3e>
 8004328:	3601      	adds	r6, #1
 800432a:	2102      	movs	r1, #2
 800432c:	e000      	b.n	8004330 <__cvt+0x44>
 800432e:	2103      	movs	r1, #3
 8004330:	ab03      	add	r3, sp, #12
 8004332:	9301      	str	r3, [sp, #4]
 8004334:	ab02      	add	r3, sp, #8
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	ec45 4b10 	vmov	d0, r4, r5
 800433c:	4653      	mov	r3, sl
 800433e:	4632      	mov	r2, r6
 8004340:	f000 fe1a 	bl	8004f78 <_dtoa_r>
 8004344:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004348:	4607      	mov	r7, r0
 800434a:	d102      	bne.n	8004352 <__cvt+0x66>
 800434c:	f019 0f01 	tst.w	r9, #1
 8004350:	d022      	beq.n	8004398 <__cvt+0xac>
 8004352:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004356:	eb07 0906 	add.w	r9, r7, r6
 800435a:	d110      	bne.n	800437e <__cvt+0x92>
 800435c:	783b      	ldrb	r3, [r7, #0]
 800435e:	2b30      	cmp	r3, #48	; 0x30
 8004360:	d10a      	bne.n	8004378 <__cvt+0x8c>
 8004362:	2200      	movs	r2, #0
 8004364:	2300      	movs	r3, #0
 8004366:	4620      	mov	r0, r4
 8004368:	4629      	mov	r1, r5
 800436a:	f7fc fbcd 	bl	8000b08 <__aeabi_dcmpeq>
 800436e:	b918      	cbnz	r0, 8004378 <__cvt+0x8c>
 8004370:	f1c6 0601 	rsb	r6, r6, #1
 8004374:	f8ca 6000 	str.w	r6, [sl]
 8004378:	f8da 3000 	ldr.w	r3, [sl]
 800437c:	4499      	add	r9, r3
 800437e:	2200      	movs	r2, #0
 8004380:	2300      	movs	r3, #0
 8004382:	4620      	mov	r0, r4
 8004384:	4629      	mov	r1, r5
 8004386:	f7fc fbbf 	bl	8000b08 <__aeabi_dcmpeq>
 800438a:	b108      	cbz	r0, 8004390 <__cvt+0xa4>
 800438c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004390:	2230      	movs	r2, #48	; 0x30
 8004392:	9b03      	ldr	r3, [sp, #12]
 8004394:	454b      	cmp	r3, r9
 8004396:	d307      	bcc.n	80043a8 <__cvt+0xbc>
 8004398:	9b03      	ldr	r3, [sp, #12]
 800439a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800439c:	1bdb      	subs	r3, r3, r7
 800439e:	4638      	mov	r0, r7
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	b004      	add	sp, #16
 80043a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	9103      	str	r1, [sp, #12]
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e7f0      	b.n	8004392 <__cvt+0xa6>

080043b0 <__exponent>:
 80043b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043b2:	4603      	mov	r3, r0
 80043b4:	2900      	cmp	r1, #0
 80043b6:	bfb8      	it	lt
 80043b8:	4249      	neglt	r1, r1
 80043ba:	f803 2b02 	strb.w	r2, [r3], #2
 80043be:	bfb4      	ite	lt
 80043c0:	222d      	movlt	r2, #45	; 0x2d
 80043c2:	222b      	movge	r2, #43	; 0x2b
 80043c4:	2909      	cmp	r1, #9
 80043c6:	7042      	strb	r2, [r0, #1]
 80043c8:	dd2a      	ble.n	8004420 <__exponent+0x70>
 80043ca:	f10d 0407 	add.w	r4, sp, #7
 80043ce:	46a4      	mov	ip, r4
 80043d0:	270a      	movs	r7, #10
 80043d2:	46a6      	mov	lr, r4
 80043d4:	460a      	mov	r2, r1
 80043d6:	fb91 f6f7 	sdiv	r6, r1, r7
 80043da:	fb07 1516 	mls	r5, r7, r6, r1
 80043de:	3530      	adds	r5, #48	; 0x30
 80043e0:	2a63      	cmp	r2, #99	; 0x63
 80043e2:	f104 34ff 	add.w	r4, r4, #4294967295
 80043e6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80043ea:	4631      	mov	r1, r6
 80043ec:	dcf1      	bgt.n	80043d2 <__exponent+0x22>
 80043ee:	3130      	adds	r1, #48	; 0x30
 80043f0:	f1ae 0502 	sub.w	r5, lr, #2
 80043f4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80043f8:	1c44      	adds	r4, r0, #1
 80043fa:	4629      	mov	r1, r5
 80043fc:	4561      	cmp	r1, ip
 80043fe:	d30a      	bcc.n	8004416 <__exponent+0x66>
 8004400:	f10d 0209 	add.w	r2, sp, #9
 8004404:	eba2 020e 	sub.w	r2, r2, lr
 8004408:	4565      	cmp	r5, ip
 800440a:	bf88      	it	hi
 800440c:	2200      	movhi	r2, #0
 800440e:	4413      	add	r3, r2
 8004410:	1a18      	subs	r0, r3, r0
 8004412:	b003      	add	sp, #12
 8004414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004416:	f811 2b01 	ldrb.w	r2, [r1], #1
 800441a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800441e:	e7ed      	b.n	80043fc <__exponent+0x4c>
 8004420:	2330      	movs	r3, #48	; 0x30
 8004422:	3130      	adds	r1, #48	; 0x30
 8004424:	7083      	strb	r3, [r0, #2]
 8004426:	70c1      	strb	r1, [r0, #3]
 8004428:	1d03      	adds	r3, r0, #4
 800442a:	e7f1      	b.n	8004410 <__exponent+0x60>

0800442c <_printf_float>:
 800442c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004430:	ed2d 8b02 	vpush	{d8}
 8004434:	b08d      	sub	sp, #52	; 0x34
 8004436:	460c      	mov	r4, r1
 8004438:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800443c:	4616      	mov	r6, r2
 800443e:	461f      	mov	r7, r3
 8004440:	4605      	mov	r5, r0
 8004442:	f001 fd3f 	bl	8005ec4 <_localeconv_r>
 8004446:	f8d0 a000 	ldr.w	sl, [r0]
 800444a:	4650      	mov	r0, sl
 800444c:	f7fb fee0 	bl	8000210 <strlen>
 8004450:	2300      	movs	r3, #0
 8004452:	930a      	str	r3, [sp, #40]	; 0x28
 8004454:	6823      	ldr	r3, [r4, #0]
 8004456:	9305      	str	r3, [sp, #20]
 8004458:	f8d8 3000 	ldr.w	r3, [r8]
 800445c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004460:	3307      	adds	r3, #7
 8004462:	f023 0307 	bic.w	r3, r3, #7
 8004466:	f103 0208 	add.w	r2, r3, #8
 800446a:	f8c8 2000 	str.w	r2, [r8]
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004476:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800447a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800447e:	9307      	str	r3, [sp, #28]
 8004480:	f8cd 8018 	str.w	r8, [sp, #24]
 8004484:	ee08 0a10 	vmov	s16, r0
 8004488:	4b9f      	ldr	r3, [pc, #636]	; (8004708 <_printf_float+0x2dc>)
 800448a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800448e:	f04f 32ff 	mov.w	r2, #4294967295
 8004492:	f7fc fb6b 	bl	8000b6c <__aeabi_dcmpun>
 8004496:	bb88      	cbnz	r0, 80044fc <_printf_float+0xd0>
 8004498:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800449c:	4b9a      	ldr	r3, [pc, #616]	; (8004708 <_printf_float+0x2dc>)
 800449e:	f04f 32ff 	mov.w	r2, #4294967295
 80044a2:	f7fc fb45 	bl	8000b30 <__aeabi_dcmple>
 80044a6:	bb48      	cbnz	r0, 80044fc <_printf_float+0xd0>
 80044a8:	2200      	movs	r2, #0
 80044aa:	2300      	movs	r3, #0
 80044ac:	4640      	mov	r0, r8
 80044ae:	4649      	mov	r1, r9
 80044b0:	f7fc fb34 	bl	8000b1c <__aeabi_dcmplt>
 80044b4:	b110      	cbz	r0, 80044bc <_printf_float+0x90>
 80044b6:	232d      	movs	r3, #45	; 0x2d
 80044b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044bc:	4b93      	ldr	r3, [pc, #588]	; (800470c <_printf_float+0x2e0>)
 80044be:	4894      	ldr	r0, [pc, #592]	; (8004710 <_printf_float+0x2e4>)
 80044c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80044c4:	bf94      	ite	ls
 80044c6:	4698      	movls	r8, r3
 80044c8:	4680      	movhi	r8, r0
 80044ca:	2303      	movs	r3, #3
 80044cc:	6123      	str	r3, [r4, #16]
 80044ce:	9b05      	ldr	r3, [sp, #20]
 80044d0:	f023 0204 	bic.w	r2, r3, #4
 80044d4:	6022      	str	r2, [r4, #0]
 80044d6:	f04f 0900 	mov.w	r9, #0
 80044da:	9700      	str	r7, [sp, #0]
 80044dc:	4633      	mov	r3, r6
 80044de:	aa0b      	add	r2, sp, #44	; 0x2c
 80044e0:	4621      	mov	r1, r4
 80044e2:	4628      	mov	r0, r5
 80044e4:	f000 f9d8 	bl	8004898 <_printf_common>
 80044e8:	3001      	adds	r0, #1
 80044ea:	f040 8090 	bne.w	800460e <_printf_float+0x1e2>
 80044ee:	f04f 30ff 	mov.w	r0, #4294967295
 80044f2:	b00d      	add	sp, #52	; 0x34
 80044f4:	ecbd 8b02 	vpop	{d8}
 80044f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044fc:	4642      	mov	r2, r8
 80044fe:	464b      	mov	r3, r9
 8004500:	4640      	mov	r0, r8
 8004502:	4649      	mov	r1, r9
 8004504:	f7fc fb32 	bl	8000b6c <__aeabi_dcmpun>
 8004508:	b140      	cbz	r0, 800451c <_printf_float+0xf0>
 800450a:	464b      	mov	r3, r9
 800450c:	2b00      	cmp	r3, #0
 800450e:	bfbc      	itt	lt
 8004510:	232d      	movlt	r3, #45	; 0x2d
 8004512:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004516:	487f      	ldr	r0, [pc, #508]	; (8004714 <_printf_float+0x2e8>)
 8004518:	4b7f      	ldr	r3, [pc, #508]	; (8004718 <_printf_float+0x2ec>)
 800451a:	e7d1      	b.n	80044c0 <_printf_float+0x94>
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004522:	9206      	str	r2, [sp, #24]
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	d13f      	bne.n	80045a8 <_printf_float+0x17c>
 8004528:	2306      	movs	r3, #6
 800452a:	6063      	str	r3, [r4, #4]
 800452c:	9b05      	ldr	r3, [sp, #20]
 800452e:	6861      	ldr	r1, [r4, #4]
 8004530:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004534:	2300      	movs	r3, #0
 8004536:	9303      	str	r3, [sp, #12]
 8004538:	ab0a      	add	r3, sp, #40	; 0x28
 800453a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800453e:	ab09      	add	r3, sp, #36	; 0x24
 8004540:	ec49 8b10 	vmov	d0, r8, r9
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	6022      	str	r2, [r4, #0]
 8004548:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800454c:	4628      	mov	r0, r5
 800454e:	f7ff fecd 	bl	80042ec <__cvt>
 8004552:	9b06      	ldr	r3, [sp, #24]
 8004554:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004556:	2b47      	cmp	r3, #71	; 0x47
 8004558:	4680      	mov	r8, r0
 800455a:	d108      	bne.n	800456e <_printf_float+0x142>
 800455c:	1cc8      	adds	r0, r1, #3
 800455e:	db02      	blt.n	8004566 <_printf_float+0x13a>
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	4299      	cmp	r1, r3
 8004564:	dd41      	ble.n	80045ea <_printf_float+0x1be>
 8004566:	f1ab 0b02 	sub.w	fp, fp, #2
 800456a:	fa5f fb8b 	uxtb.w	fp, fp
 800456e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004572:	d820      	bhi.n	80045b6 <_printf_float+0x18a>
 8004574:	3901      	subs	r1, #1
 8004576:	465a      	mov	r2, fp
 8004578:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800457c:	9109      	str	r1, [sp, #36]	; 0x24
 800457e:	f7ff ff17 	bl	80043b0 <__exponent>
 8004582:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004584:	1813      	adds	r3, r2, r0
 8004586:	2a01      	cmp	r2, #1
 8004588:	4681      	mov	r9, r0
 800458a:	6123      	str	r3, [r4, #16]
 800458c:	dc02      	bgt.n	8004594 <_printf_float+0x168>
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	07d2      	lsls	r2, r2, #31
 8004592:	d501      	bpl.n	8004598 <_printf_float+0x16c>
 8004594:	3301      	adds	r3, #1
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800459c:	2b00      	cmp	r3, #0
 800459e:	d09c      	beq.n	80044da <_printf_float+0xae>
 80045a0:	232d      	movs	r3, #45	; 0x2d
 80045a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045a6:	e798      	b.n	80044da <_printf_float+0xae>
 80045a8:	9a06      	ldr	r2, [sp, #24]
 80045aa:	2a47      	cmp	r2, #71	; 0x47
 80045ac:	d1be      	bne.n	800452c <_printf_float+0x100>
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1bc      	bne.n	800452c <_printf_float+0x100>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e7b9      	b.n	800452a <_printf_float+0xfe>
 80045b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80045ba:	d118      	bne.n	80045ee <_printf_float+0x1c2>
 80045bc:	2900      	cmp	r1, #0
 80045be:	6863      	ldr	r3, [r4, #4]
 80045c0:	dd0b      	ble.n	80045da <_printf_float+0x1ae>
 80045c2:	6121      	str	r1, [r4, #16]
 80045c4:	b913      	cbnz	r3, 80045cc <_printf_float+0x1a0>
 80045c6:	6822      	ldr	r2, [r4, #0]
 80045c8:	07d0      	lsls	r0, r2, #31
 80045ca:	d502      	bpl.n	80045d2 <_printf_float+0x1a6>
 80045cc:	3301      	adds	r3, #1
 80045ce:	440b      	add	r3, r1
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	65a1      	str	r1, [r4, #88]	; 0x58
 80045d4:	f04f 0900 	mov.w	r9, #0
 80045d8:	e7de      	b.n	8004598 <_printf_float+0x16c>
 80045da:	b913      	cbnz	r3, 80045e2 <_printf_float+0x1b6>
 80045dc:	6822      	ldr	r2, [r4, #0]
 80045de:	07d2      	lsls	r2, r2, #31
 80045e0:	d501      	bpl.n	80045e6 <_printf_float+0x1ba>
 80045e2:	3302      	adds	r3, #2
 80045e4:	e7f4      	b.n	80045d0 <_printf_float+0x1a4>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e7f2      	b.n	80045d0 <_printf_float+0x1a4>
 80045ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80045ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045f0:	4299      	cmp	r1, r3
 80045f2:	db05      	blt.n	8004600 <_printf_float+0x1d4>
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	6121      	str	r1, [r4, #16]
 80045f8:	07d8      	lsls	r0, r3, #31
 80045fa:	d5ea      	bpl.n	80045d2 <_printf_float+0x1a6>
 80045fc:	1c4b      	adds	r3, r1, #1
 80045fe:	e7e7      	b.n	80045d0 <_printf_float+0x1a4>
 8004600:	2900      	cmp	r1, #0
 8004602:	bfd4      	ite	le
 8004604:	f1c1 0202 	rsble	r2, r1, #2
 8004608:	2201      	movgt	r2, #1
 800460a:	4413      	add	r3, r2
 800460c:	e7e0      	b.n	80045d0 <_printf_float+0x1a4>
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	055a      	lsls	r2, r3, #21
 8004612:	d407      	bmi.n	8004624 <_printf_float+0x1f8>
 8004614:	6923      	ldr	r3, [r4, #16]
 8004616:	4642      	mov	r2, r8
 8004618:	4631      	mov	r1, r6
 800461a:	4628      	mov	r0, r5
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	d12c      	bne.n	800467c <_printf_float+0x250>
 8004622:	e764      	b.n	80044ee <_printf_float+0xc2>
 8004624:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004628:	f240 80e0 	bls.w	80047ec <_printf_float+0x3c0>
 800462c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004630:	2200      	movs	r2, #0
 8004632:	2300      	movs	r3, #0
 8004634:	f7fc fa68 	bl	8000b08 <__aeabi_dcmpeq>
 8004638:	2800      	cmp	r0, #0
 800463a:	d034      	beq.n	80046a6 <_printf_float+0x27a>
 800463c:	4a37      	ldr	r2, [pc, #220]	; (800471c <_printf_float+0x2f0>)
 800463e:	2301      	movs	r3, #1
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af51 	beq.w	80044ee <_printf_float+0xc2>
 800464c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004650:	429a      	cmp	r2, r3
 8004652:	db02      	blt.n	800465a <_printf_float+0x22e>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	07d8      	lsls	r0, r3, #31
 8004658:	d510      	bpl.n	800467c <_printf_float+0x250>
 800465a:	ee18 3a10 	vmov	r3, s16
 800465e:	4652      	mov	r2, sl
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	f43f af41 	beq.w	80044ee <_printf_float+0xc2>
 800466c:	f04f 0800 	mov.w	r8, #0
 8004670:	f104 091a 	add.w	r9, r4, #26
 8004674:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004676:	3b01      	subs	r3, #1
 8004678:	4543      	cmp	r3, r8
 800467a:	dc09      	bgt.n	8004690 <_printf_float+0x264>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	079b      	lsls	r3, r3, #30
 8004680:	f100 8105 	bmi.w	800488e <_printf_float+0x462>
 8004684:	68e0      	ldr	r0, [r4, #12]
 8004686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004688:	4298      	cmp	r0, r3
 800468a:	bfb8      	it	lt
 800468c:	4618      	movlt	r0, r3
 800468e:	e730      	b.n	80044f2 <_printf_float+0xc6>
 8004690:	2301      	movs	r3, #1
 8004692:	464a      	mov	r2, r9
 8004694:	4631      	mov	r1, r6
 8004696:	4628      	mov	r0, r5
 8004698:	47b8      	blx	r7
 800469a:	3001      	adds	r0, #1
 800469c:	f43f af27 	beq.w	80044ee <_printf_float+0xc2>
 80046a0:	f108 0801 	add.w	r8, r8, #1
 80046a4:	e7e6      	b.n	8004674 <_printf_float+0x248>
 80046a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	dc39      	bgt.n	8004720 <_printf_float+0x2f4>
 80046ac:	4a1b      	ldr	r2, [pc, #108]	; (800471c <_printf_float+0x2f0>)
 80046ae:	2301      	movs	r3, #1
 80046b0:	4631      	mov	r1, r6
 80046b2:	4628      	mov	r0, r5
 80046b4:	47b8      	blx	r7
 80046b6:	3001      	adds	r0, #1
 80046b8:	f43f af19 	beq.w	80044ee <_printf_float+0xc2>
 80046bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046c0:	4313      	orrs	r3, r2
 80046c2:	d102      	bne.n	80046ca <_printf_float+0x29e>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	07d9      	lsls	r1, r3, #31
 80046c8:	d5d8      	bpl.n	800467c <_printf_float+0x250>
 80046ca:	ee18 3a10 	vmov	r3, s16
 80046ce:	4652      	mov	r2, sl
 80046d0:	4631      	mov	r1, r6
 80046d2:	4628      	mov	r0, r5
 80046d4:	47b8      	blx	r7
 80046d6:	3001      	adds	r0, #1
 80046d8:	f43f af09 	beq.w	80044ee <_printf_float+0xc2>
 80046dc:	f04f 0900 	mov.w	r9, #0
 80046e0:	f104 0a1a 	add.w	sl, r4, #26
 80046e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046e6:	425b      	negs	r3, r3
 80046e8:	454b      	cmp	r3, r9
 80046ea:	dc01      	bgt.n	80046f0 <_printf_float+0x2c4>
 80046ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ee:	e792      	b.n	8004616 <_printf_float+0x1ea>
 80046f0:	2301      	movs	r3, #1
 80046f2:	4652      	mov	r2, sl
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	f43f aef7 	beq.w	80044ee <_printf_float+0xc2>
 8004700:	f109 0901 	add.w	r9, r9, #1
 8004704:	e7ee      	b.n	80046e4 <_printf_float+0x2b8>
 8004706:	bf00      	nop
 8004708:	7fefffff 	.word	0x7fefffff
 800470c:	08006ea0 	.word	0x08006ea0
 8004710:	08006ea4 	.word	0x08006ea4
 8004714:	08006eac 	.word	0x08006eac
 8004718:	08006ea8 	.word	0x08006ea8
 800471c:	08006eb0 	.word	0x08006eb0
 8004720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004722:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004724:	429a      	cmp	r2, r3
 8004726:	bfa8      	it	ge
 8004728:	461a      	movge	r2, r3
 800472a:	2a00      	cmp	r2, #0
 800472c:	4691      	mov	r9, r2
 800472e:	dc37      	bgt.n	80047a0 <_printf_float+0x374>
 8004730:	f04f 0b00 	mov.w	fp, #0
 8004734:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004738:	f104 021a 	add.w	r2, r4, #26
 800473c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800473e:	9305      	str	r3, [sp, #20]
 8004740:	eba3 0309 	sub.w	r3, r3, r9
 8004744:	455b      	cmp	r3, fp
 8004746:	dc33      	bgt.n	80047b0 <_printf_float+0x384>
 8004748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800474c:	429a      	cmp	r2, r3
 800474e:	db3b      	blt.n	80047c8 <_printf_float+0x39c>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	07da      	lsls	r2, r3, #31
 8004754:	d438      	bmi.n	80047c8 <_printf_float+0x39c>
 8004756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004758:	9a05      	ldr	r2, [sp, #20]
 800475a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800475c:	1a9a      	subs	r2, r3, r2
 800475e:	eba3 0901 	sub.w	r9, r3, r1
 8004762:	4591      	cmp	r9, r2
 8004764:	bfa8      	it	ge
 8004766:	4691      	movge	r9, r2
 8004768:	f1b9 0f00 	cmp.w	r9, #0
 800476c:	dc35      	bgt.n	80047da <_printf_float+0x3ae>
 800476e:	f04f 0800 	mov.w	r8, #0
 8004772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004776:	f104 0a1a 	add.w	sl, r4, #26
 800477a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800477e:	1a9b      	subs	r3, r3, r2
 8004780:	eba3 0309 	sub.w	r3, r3, r9
 8004784:	4543      	cmp	r3, r8
 8004786:	f77f af79 	ble.w	800467c <_printf_float+0x250>
 800478a:	2301      	movs	r3, #1
 800478c:	4652      	mov	r2, sl
 800478e:	4631      	mov	r1, r6
 8004790:	4628      	mov	r0, r5
 8004792:	47b8      	blx	r7
 8004794:	3001      	adds	r0, #1
 8004796:	f43f aeaa 	beq.w	80044ee <_printf_float+0xc2>
 800479a:	f108 0801 	add.w	r8, r8, #1
 800479e:	e7ec      	b.n	800477a <_printf_float+0x34e>
 80047a0:	4613      	mov	r3, r2
 80047a2:	4631      	mov	r1, r6
 80047a4:	4642      	mov	r2, r8
 80047a6:	4628      	mov	r0, r5
 80047a8:	47b8      	blx	r7
 80047aa:	3001      	adds	r0, #1
 80047ac:	d1c0      	bne.n	8004730 <_printf_float+0x304>
 80047ae:	e69e      	b.n	80044ee <_printf_float+0xc2>
 80047b0:	2301      	movs	r3, #1
 80047b2:	4631      	mov	r1, r6
 80047b4:	4628      	mov	r0, r5
 80047b6:	9205      	str	r2, [sp, #20]
 80047b8:	47b8      	blx	r7
 80047ba:	3001      	adds	r0, #1
 80047bc:	f43f ae97 	beq.w	80044ee <_printf_float+0xc2>
 80047c0:	9a05      	ldr	r2, [sp, #20]
 80047c2:	f10b 0b01 	add.w	fp, fp, #1
 80047c6:	e7b9      	b.n	800473c <_printf_float+0x310>
 80047c8:	ee18 3a10 	vmov	r3, s16
 80047cc:	4652      	mov	r2, sl
 80047ce:	4631      	mov	r1, r6
 80047d0:	4628      	mov	r0, r5
 80047d2:	47b8      	blx	r7
 80047d4:	3001      	adds	r0, #1
 80047d6:	d1be      	bne.n	8004756 <_printf_float+0x32a>
 80047d8:	e689      	b.n	80044ee <_printf_float+0xc2>
 80047da:	9a05      	ldr	r2, [sp, #20]
 80047dc:	464b      	mov	r3, r9
 80047de:	4442      	add	r2, r8
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	d1c1      	bne.n	800476e <_printf_float+0x342>
 80047ea:	e680      	b.n	80044ee <_printf_float+0xc2>
 80047ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80047ee:	2a01      	cmp	r2, #1
 80047f0:	dc01      	bgt.n	80047f6 <_printf_float+0x3ca>
 80047f2:	07db      	lsls	r3, r3, #31
 80047f4:	d538      	bpl.n	8004868 <_printf_float+0x43c>
 80047f6:	2301      	movs	r3, #1
 80047f8:	4642      	mov	r2, r8
 80047fa:	4631      	mov	r1, r6
 80047fc:	4628      	mov	r0, r5
 80047fe:	47b8      	blx	r7
 8004800:	3001      	adds	r0, #1
 8004802:	f43f ae74 	beq.w	80044ee <_printf_float+0xc2>
 8004806:	ee18 3a10 	vmov	r3, s16
 800480a:	4652      	mov	r2, sl
 800480c:	4631      	mov	r1, r6
 800480e:	4628      	mov	r0, r5
 8004810:	47b8      	blx	r7
 8004812:	3001      	adds	r0, #1
 8004814:	f43f ae6b 	beq.w	80044ee <_printf_float+0xc2>
 8004818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800481c:	2200      	movs	r2, #0
 800481e:	2300      	movs	r3, #0
 8004820:	f7fc f972 	bl	8000b08 <__aeabi_dcmpeq>
 8004824:	b9d8      	cbnz	r0, 800485e <_printf_float+0x432>
 8004826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004828:	f108 0201 	add.w	r2, r8, #1
 800482c:	3b01      	subs	r3, #1
 800482e:	4631      	mov	r1, r6
 8004830:	4628      	mov	r0, r5
 8004832:	47b8      	blx	r7
 8004834:	3001      	adds	r0, #1
 8004836:	d10e      	bne.n	8004856 <_printf_float+0x42a>
 8004838:	e659      	b.n	80044ee <_printf_float+0xc2>
 800483a:	2301      	movs	r3, #1
 800483c:	4652      	mov	r2, sl
 800483e:	4631      	mov	r1, r6
 8004840:	4628      	mov	r0, r5
 8004842:	47b8      	blx	r7
 8004844:	3001      	adds	r0, #1
 8004846:	f43f ae52 	beq.w	80044ee <_printf_float+0xc2>
 800484a:	f108 0801 	add.w	r8, r8, #1
 800484e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004850:	3b01      	subs	r3, #1
 8004852:	4543      	cmp	r3, r8
 8004854:	dcf1      	bgt.n	800483a <_printf_float+0x40e>
 8004856:	464b      	mov	r3, r9
 8004858:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800485c:	e6dc      	b.n	8004618 <_printf_float+0x1ec>
 800485e:	f04f 0800 	mov.w	r8, #0
 8004862:	f104 0a1a 	add.w	sl, r4, #26
 8004866:	e7f2      	b.n	800484e <_printf_float+0x422>
 8004868:	2301      	movs	r3, #1
 800486a:	4642      	mov	r2, r8
 800486c:	e7df      	b.n	800482e <_printf_float+0x402>
 800486e:	2301      	movs	r3, #1
 8004870:	464a      	mov	r2, r9
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	f43f ae38 	beq.w	80044ee <_printf_float+0xc2>
 800487e:	f108 0801 	add.w	r8, r8, #1
 8004882:	68e3      	ldr	r3, [r4, #12]
 8004884:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004886:	1a5b      	subs	r3, r3, r1
 8004888:	4543      	cmp	r3, r8
 800488a:	dcf0      	bgt.n	800486e <_printf_float+0x442>
 800488c:	e6fa      	b.n	8004684 <_printf_float+0x258>
 800488e:	f04f 0800 	mov.w	r8, #0
 8004892:	f104 0919 	add.w	r9, r4, #25
 8004896:	e7f4      	b.n	8004882 <_printf_float+0x456>

08004898 <_printf_common>:
 8004898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800489c:	4616      	mov	r6, r2
 800489e:	4699      	mov	r9, r3
 80048a0:	688a      	ldr	r2, [r1, #8]
 80048a2:	690b      	ldr	r3, [r1, #16]
 80048a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bfb8      	it	lt
 80048ac:	4613      	movlt	r3, r2
 80048ae:	6033      	str	r3, [r6, #0]
 80048b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b4:	4607      	mov	r7, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	b10a      	cbz	r2, 80048be <_printf_common+0x26>
 80048ba:	3301      	adds	r3, #1
 80048bc:	6033      	str	r3, [r6, #0]
 80048be:	6823      	ldr	r3, [r4, #0]
 80048c0:	0699      	lsls	r1, r3, #26
 80048c2:	bf42      	ittt	mi
 80048c4:	6833      	ldrmi	r3, [r6, #0]
 80048c6:	3302      	addmi	r3, #2
 80048c8:	6033      	strmi	r3, [r6, #0]
 80048ca:	6825      	ldr	r5, [r4, #0]
 80048cc:	f015 0506 	ands.w	r5, r5, #6
 80048d0:	d106      	bne.n	80048e0 <_printf_common+0x48>
 80048d2:	f104 0a19 	add.w	sl, r4, #25
 80048d6:	68e3      	ldr	r3, [r4, #12]
 80048d8:	6832      	ldr	r2, [r6, #0]
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	42ab      	cmp	r3, r5
 80048de:	dc26      	bgt.n	800492e <_printf_common+0x96>
 80048e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048e4:	1e13      	subs	r3, r2, #0
 80048e6:	6822      	ldr	r2, [r4, #0]
 80048e8:	bf18      	it	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	0692      	lsls	r2, r2, #26
 80048ee:	d42b      	bmi.n	8004948 <_printf_common+0xb0>
 80048f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	47c0      	blx	r8
 80048fa:	3001      	adds	r0, #1
 80048fc:	d01e      	beq.n	800493c <_printf_common+0xa4>
 80048fe:	6823      	ldr	r3, [r4, #0]
 8004900:	68e5      	ldr	r5, [r4, #12]
 8004902:	6832      	ldr	r2, [r6, #0]
 8004904:	f003 0306 	and.w	r3, r3, #6
 8004908:	2b04      	cmp	r3, #4
 800490a:	bf08      	it	eq
 800490c:	1aad      	subeq	r5, r5, r2
 800490e:	68a3      	ldr	r3, [r4, #8]
 8004910:	6922      	ldr	r2, [r4, #16]
 8004912:	bf0c      	ite	eq
 8004914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004918:	2500      	movne	r5, #0
 800491a:	4293      	cmp	r3, r2
 800491c:	bfc4      	itt	gt
 800491e:	1a9b      	subgt	r3, r3, r2
 8004920:	18ed      	addgt	r5, r5, r3
 8004922:	2600      	movs	r6, #0
 8004924:	341a      	adds	r4, #26
 8004926:	42b5      	cmp	r5, r6
 8004928:	d11a      	bne.n	8004960 <_printf_common+0xc8>
 800492a:	2000      	movs	r0, #0
 800492c:	e008      	b.n	8004940 <_printf_common+0xa8>
 800492e:	2301      	movs	r3, #1
 8004930:	4652      	mov	r2, sl
 8004932:	4649      	mov	r1, r9
 8004934:	4638      	mov	r0, r7
 8004936:	47c0      	blx	r8
 8004938:	3001      	adds	r0, #1
 800493a:	d103      	bne.n	8004944 <_printf_common+0xac>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004944:	3501      	adds	r5, #1
 8004946:	e7c6      	b.n	80048d6 <_printf_common+0x3e>
 8004948:	18e1      	adds	r1, r4, r3
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	2030      	movs	r0, #48	; 0x30
 800494e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004952:	4422      	add	r2, r4
 8004954:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004958:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800495c:	3302      	adds	r3, #2
 800495e:	e7c7      	b.n	80048f0 <_printf_common+0x58>
 8004960:	2301      	movs	r3, #1
 8004962:	4622      	mov	r2, r4
 8004964:	4649      	mov	r1, r9
 8004966:	4638      	mov	r0, r7
 8004968:	47c0      	blx	r8
 800496a:	3001      	adds	r0, #1
 800496c:	d0e6      	beq.n	800493c <_printf_common+0xa4>
 800496e:	3601      	adds	r6, #1
 8004970:	e7d9      	b.n	8004926 <_printf_common+0x8e>
	...

08004974 <_printf_i>:
 8004974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	7e0f      	ldrb	r7, [r1, #24]
 800497a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800497c:	2f78      	cmp	r7, #120	; 0x78
 800497e:	4691      	mov	r9, r2
 8004980:	4680      	mov	r8, r0
 8004982:	460c      	mov	r4, r1
 8004984:	469a      	mov	sl, r3
 8004986:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800498a:	d807      	bhi.n	800499c <_printf_i+0x28>
 800498c:	2f62      	cmp	r7, #98	; 0x62
 800498e:	d80a      	bhi.n	80049a6 <_printf_i+0x32>
 8004990:	2f00      	cmp	r7, #0
 8004992:	f000 80d8 	beq.w	8004b46 <_printf_i+0x1d2>
 8004996:	2f58      	cmp	r7, #88	; 0x58
 8004998:	f000 80a3 	beq.w	8004ae2 <_printf_i+0x16e>
 800499c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049a4:	e03a      	b.n	8004a1c <_printf_i+0xa8>
 80049a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049aa:	2b15      	cmp	r3, #21
 80049ac:	d8f6      	bhi.n	800499c <_printf_i+0x28>
 80049ae:	a101      	add	r1, pc, #4	; (adr r1, 80049b4 <_printf_i+0x40>)
 80049b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	08004a21 	.word	0x08004a21
 80049bc:	0800499d 	.word	0x0800499d
 80049c0:	0800499d 	.word	0x0800499d
 80049c4:	0800499d 	.word	0x0800499d
 80049c8:	0800499d 	.word	0x0800499d
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	0800499d 	.word	0x0800499d
 80049d4:	0800499d 	.word	0x0800499d
 80049d8:	0800499d 	.word	0x0800499d
 80049dc:	0800499d 	.word	0x0800499d
 80049e0:	08004b2d 	.word	0x08004b2d
 80049e4:	08004a51 	.word	0x08004a51
 80049e8:	08004b0f 	.word	0x08004b0f
 80049ec:	0800499d 	.word	0x0800499d
 80049f0:	0800499d 	.word	0x0800499d
 80049f4:	08004b4f 	.word	0x08004b4f
 80049f8:	0800499d 	.word	0x0800499d
 80049fc:	08004a51 	.word	0x08004a51
 8004a00:	0800499d 	.word	0x0800499d
 8004a04:	0800499d 	.word	0x0800499d
 8004a08:	08004b17 	.word	0x08004b17
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	602a      	str	r2, [r5, #0]
 8004a14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e0a3      	b.n	8004b68 <_printf_i+0x1f4>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	6829      	ldr	r1, [r5, #0]
 8004a24:	0606      	lsls	r6, r0, #24
 8004a26:	f101 0304 	add.w	r3, r1, #4
 8004a2a:	d50a      	bpl.n	8004a42 <_printf_i+0xce>
 8004a2c:	680e      	ldr	r6, [r1, #0]
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	2e00      	cmp	r6, #0
 8004a32:	da03      	bge.n	8004a3c <_printf_i+0xc8>
 8004a34:	232d      	movs	r3, #45	; 0x2d
 8004a36:	4276      	negs	r6, r6
 8004a38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a3c:	485e      	ldr	r0, [pc, #376]	; (8004bb8 <_printf_i+0x244>)
 8004a3e:	230a      	movs	r3, #10
 8004a40:	e019      	b.n	8004a76 <_printf_i+0x102>
 8004a42:	680e      	ldr	r6, [r1, #0]
 8004a44:	602b      	str	r3, [r5, #0]
 8004a46:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a4a:	bf18      	it	ne
 8004a4c:	b236      	sxthne	r6, r6
 8004a4e:	e7ef      	b.n	8004a30 <_printf_i+0xbc>
 8004a50:	682b      	ldr	r3, [r5, #0]
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	1d19      	adds	r1, r3, #4
 8004a56:	6029      	str	r1, [r5, #0]
 8004a58:	0601      	lsls	r1, r0, #24
 8004a5a:	d501      	bpl.n	8004a60 <_printf_i+0xec>
 8004a5c:	681e      	ldr	r6, [r3, #0]
 8004a5e:	e002      	b.n	8004a66 <_printf_i+0xf2>
 8004a60:	0646      	lsls	r6, r0, #25
 8004a62:	d5fb      	bpl.n	8004a5c <_printf_i+0xe8>
 8004a64:	881e      	ldrh	r6, [r3, #0]
 8004a66:	4854      	ldr	r0, [pc, #336]	; (8004bb8 <_printf_i+0x244>)
 8004a68:	2f6f      	cmp	r7, #111	; 0x6f
 8004a6a:	bf0c      	ite	eq
 8004a6c:	2308      	moveq	r3, #8
 8004a6e:	230a      	movne	r3, #10
 8004a70:	2100      	movs	r1, #0
 8004a72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a76:	6865      	ldr	r5, [r4, #4]
 8004a78:	60a5      	str	r5, [r4, #8]
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	bfa2      	ittt	ge
 8004a7e:	6821      	ldrge	r1, [r4, #0]
 8004a80:	f021 0104 	bicge.w	r1, r1, #4
 8004a84:	6021      	strge	r1, [r4, #0]
 8004a86:	b90e      	cbnz	r6, 8004a8c <_printf_i+0x118>
 8004a88:	2d00      	cmp	r5, #0
 8004a8a:	d04d      	beq.n	8004b28 <_printf_i+0x1b4>
 8004a8c:	4615      	mov	r5, r2
 8004a8e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a92:	fb03 6711 	mls	r7, r3, r1, r6
 8004a96:	5dc7      	ldrb	r7, [r0, r7]
 8004a98:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a9c:	4637      	mov	r7, r6
 8004a9e:	42bb      	cmp	r3, r7
 8004aa0:	460e      	mov	r6, r1
 8004aa2:	d9f4      	bls.n	8004a8e <_printf_i+0x11a>
 8004aa4:	2b08      	cmp	r3, #8
 8004aa6:	d10b      	bne.n	8004ac0 <_printf_i+0x14c>
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	07de      	lsls	r6, r3, #31
 8004aac:	d508      	bpl.n	8004ac0 <_printf_i+0x14c>
 8004aae:	6923      	ldr	r3, [r4, #16]
 8004ab0:	6861      	ldr	r1, [r4, #4]
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	bfde      	ittt	le
 8004ab6:	2330      	movle	r3, #48	; 0x30
 8004ab8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004abc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ac0:	1b52      	subs	r2, r2, r5
 8004ac2:	6122      	str	r2, [r4, #16]
 8004ac4:	f8cd a000 	str.w	sl, [sp]
 8004ac8:	464b      	mov	r3, r9
 8004aca:	aa03      	add	r2, sp, #12
 8004acc:	4621      	mov	r1, r4
 8004ace:	4640      	mov	r0, r8
 8004ad0:	f7ff fee2 	bl	8004898 <_printf_common>
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	d14c      	bne.n	8004b72 <_printf_i+0x1fe>
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	b004      	add	sp, #16
 8004ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae2:	4835      	ldr	r0, [pc, #212]	; (8004bb8 <_printf_i+0x244>)
 8004ae4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004ae8:	6829      	ldr	r1, [r5, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	f851 6b04 	ldr.w	r6, [r1], #4
 8004af0:	6029      	str	r1, [r5, #0]
 8004af2:	061d      	lsls	r5, r3, #24
 8004af4:	d514      	bpl.n	8004b20 <_printf_i+0x1ac>
 8004af6:	07df      	lsls	r7, r3, #31
 8004af8:	bf44      	itt	mi
 8004afa:	f043 0320 	orrmi.w	r3, r3, #32
 8004afe:	6023      	strmi	r3, [r4, #0]
 8004b00:	b91e      	cbnz	r6, 8004b0a <_printf_i+0x196>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f023 0320 	bic.w	r3, r3, #32
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	e7b0      	b.n	8004a70 <_printf_i+0xfc>
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	2378      	movs	r3, #120	; 0x78
 8004b18:	4828      	ldr	r0, [pc, #160]	; (8004bbc <_printf_i+0x248>)
 8004b1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b1e:	e7e3      	b.n	8004ae8 <_printf_i+0x174>
 8004b20:	0659      	lsls	r1, r3, #25
 8004b22:	bf48      	it	mi
 8004b24:	b2b6      	uxthmi	r6, r6
 8004b26:	e7e6      	b.n	8004af6 <_printf_i+0x182>
 8004b28:	4615      	mov	r5, r2
 8004b2a:	e7bb      	b.n	8004aa4 <_printf_i+0x130>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	6826      	ldr	r6, [r4, #0]
 8004b30:	6961      	ldr	r1, [r4, #20]
 8004b32:	1d18      	adds	r0, r3, #4
 8004b34:	6028      	str	r0, [r5, #0]
 8004b36:	0635      	lsls	r5, r6, #24
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	d501      	bpl.n	8004b40 <_printf_i+0x1cc>
 8004b3c:	6019      	str	r1, [r3, #0]
 8004b3e:	e002      	b.n	8004b46 <_printf_i+0x1d2>
 8004b40:	0670      	lsls	r0, r6, #25
 8004b42:	d5fb      	bpl.n	8004b3c <_printf_i+0x1c8>
 8004b44:	8019      	strh	r1, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	6123      	str	r3, [r4, #16]
 8004b4a:	4615      	mov	r5, r2
 8004b4c:	e7ba      	b.n	8004ac4 <_printf_i+0x150>
 8004b4e:	682b      	ldr	r3, [r5, #0]
 8004b50:	1d1a      	adds	r2, r3, #4
 8004b52:	602a      	str	r2, [r5, #0]
 8004b54:	681d      	ldr	r5, [r3, #0]
 8004b56:	6862      	ldr	r2, [r4, #4]
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7fb fb60 	bl	8000220 <memchr>
 8004b60:	b108      	cbz	r0, 8004b66 <_printf_i+0x1f2>
 8004b62:	1b40      	subs	r0, r0, r5
 8004b64:	6060      	str	r0, [r4, #4]
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	6123      	str	r3, [r4, #16]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b70:	e7a8      	b.n	8004ac4 <_printf_i+0x150>
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	462a      	mov	r2, r5
 8004b76:	4649      	mov	r1, r9
 8004b78:	4640      	mov	r0, r8
 8004b7a:	47d0      	blx	sl
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	d0ab      	beq.n	8004ad8 <_printf_i+0x164>
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	079b      	lsls	r3, r3, #30
 8004b84:	d413      	bmi.n	8004bae <_printf_i+0x23a>
 8004b86:	68e0      	ldr	r0, [r4, #12]
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	4298      	cmp	r0, r3
 8004b8c:	bfb8      	it	lt
 8004b8e:	4618      	movlt	r0, r3
 8004b90:	e7a4      	b.n	8004adc <_printf_i+0x168>
 8004b92:	2301      	movs	r3, #1
 8004b94:	4632      	mov	r2, r6
 8004b96:	4649      	mov	r1, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	47d0      	blx	sl
 8004b9c:	3001      	adds	r0, #1
 8004b9e:	d09b      	beq.n	8004ad8 <_printf_i+0x164>
 8004ba0:	3501      	adds	r5, #1
 8004ba2:	68e3      	ldr	r3, [r4, #12]
 8004ba4:	9903      	ldr	r1, [sp, #12]
 8004ba6:	1a5b      	subs	r3, r3, r1
 8004ba8:	42ab      	cmp	r3, r5
 8004baa:	dcf2      	bgt.n	8004b92 <_printf_i+0x21e>
 8004bac:	e7eb      	b.n	8004b86 <_printf_i+0x212>
 8004bae:	2500      	movs	r5, #0
 8004bb0:	f104 0619 	add.w	r6, r4, #25
 8004bb4:	e7f5      	b.n	8004ba2 <_printf_i+0x22e>
 8004bb6:	bf00      	nop
 8004bb8:	08006eb2 	.word	0x08006eb2
 8004bbc:	08006ec3 	.word	0x08006ec3

08004bc0 <iprintf>:
 8004bc0:	b40f      	push	{r0, r1, r2, r3}
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <iprintf+0x2c>)
 8004bc4:	b513      	push	{r0, r1, r4, lr}
 8004bc6:	681c      	ldr	r4, [r3, #0]
 8004bc8:	b124      	cbz	r4, 8004bd4 <iprintf+0x14>
 8004bca:	69a3      	ldr	r3, [r4, #24]
 8004bcc:	b913      	cbnz	r3, 8004bd4 <iprintf+0x14>
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f001 f8da 	bl	8005d88 <__sinit>
 8004bd4:	ab05      	add	r3, sp, #20
 8004bd6:	9a04      	ldr	r2, [sp, #16]
 8004bd8:	68a1      	ldr	r1, [r4, #8]
 8004bda:	9301      	str	r3, [sp, #4]
 8004bdc:	4620      	mov	r0, r4
 8004bde:	f001 fe97 	bl	8006910 <_vfiprintf_r>
 8004be2:	b002      	add	sp, #8
 8004be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be8:	b004      	add	sp, #16
 8004bea:	4770      	bx	lr
 8004bec:	2000000c 	.word	0x2000000c

08004bf0 <_puts_r>:
 8004bf0:	b570      	push	{r4, r5, r6, lr}
 8004bf2:	460e      	mov	r6, r1
 8004bf4:	4605      	mov	r5, r0
 8004bf6:	b118      	cbz	r0, 8004c00 <_puts_r+0x10>
 8004bf8:	6983      	ldr	r3, [r0, #24]
 8004bfa:	b90b      	cbnz	r3, 8004c00 <_puts_r+0x10>
 8004bfc:	f001 f8c4 	bl	8005d88 <__sinit>
 8004c00:	69ab      	ldr	r3, [r5, #24]
 8004c02:	68ac      	ldr	r4, [r5, #8]
 8004c04:	b913      	cbnz	r3, 8004c0c <_puts_r+0x1c>
 8004c06:	4628      	mov	r0, r5
 8004c08:	f001 f8be 	bl	8005d88 <__sinit>
 8004c0c:	4b2c      	ldr	r3, [pc, #176]	; (8004cc0 <_puts_r+0xd0>)
 8004c0e:	429c      	cmp	r4, r3
 8004c10:	d120      	bne.n	8004c54 <_puts_r+0x64>
 8004c12:	686c      	ldr	r4, [r5, #4]
 8004c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c16:	07db      	lsls	r3, r3, #31
 8004c18:	d405      	bmi.n	8004c26 <_puts_r+0x36>
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	0598      	lsls	r0, r3, #22
 8004c1e:	d402      	bmi.n	8004c26 <_puts_r+0x36>
 8004c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c22:	f001 f954 	bl	8005ece <__retarget_lock_acquire_recursive>
 8004c26:	89a3      	ldrh	r3, [r4, #12]
 8004c28:	0719      	lsls	r1, r3, #28
 8004c2a:	d51d      	bpl.n	8004c68 <_puts_r+0x78>
 8004c2c:	6923      	ldr	r3, [r4, #16]
 8004c2e:	b1db      	cbz	r3, 8004c68 <_puts_r+0x78>
 8004c30:	3e01      	subs	r6, #1
 8004c32:	68a3      	ldr	r3, [r4, #8]
 8004c34:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60a3      	str	r3, [r4, #8]
 8004c3c:	bb39      	cbnz	r1, 8004c8e <_puts_r+0x9e>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	da38      	bge.n	8004cb4 <_puts_r+0xc4>
 8004c42:	4622      	mov	r2, r4
 8004c44:	210a      	movs	r1, #10
 8004c46:	4628      	mov	r0, r5
 8004c48:	f000 f848 	bl	8004cdc <__swbuf_r>
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d011      	beq.n	8004c74 <_puts_r+0x84>
 8004c50:	250a      	movs	r5, #10
 8004c52:	e011      	b.n	8004c78 <_puts_r+0x88>
 8004c54:	4b1b      	ldr	r3, [pc, #108]	; (8004cc4 <_puts_r+0xd4>)
 8004c56:	429c      	cmp	r4, r3
 8004c58:	d101      	bne.n	8004c5e <_puts_r+0x6e>
 8004c5a:	68ac      	ldr	r4, [r5, #8]
 8004c5c:	e7da      	b.n	8004c14 <_puts_r+0x24>
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <_puts_r+0xd8>)
 8004c60:	429c      	cmp	r4, r3
 8004c62:	bf08      	it	eq
 8004c64:	68ec      	ldreq	r4, [r5, #12]
 8004c66:	e7d5      	b.n	8004c14 <_puts_r+0x24>
 8004c68:	4621      	mov	r1, r4
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f888 	bl	8004d80 <__swsetup_r>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d0dd      	beq.n	8004c30 <_puts_r+0x40>
 8004c74:	f04f 35ff 	mov.w	r5, #4294967295
 8004c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c7a:	07da      	lsls	r2, r3, #31
 8004c7c:	d405      	bmi.n	8004c8a <_puts_r+0x9a>
 8004c7e:	89a3      	ldrh	r3, [r4, #12]
 8004c80:	059b      	lsls	r3, r3, #22
 8004c82:	d402      	bmi.n	8004c8a <_puts_r+0x9a>
 8004c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c86:	f001 f923 	bl	8005ed0 <__retarget_lock_release_recursive>
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	bd70      	pop	{r4, r5, r6, pc}
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	da04      	bge.n	8004c9c <_puts_r+0xac>
 8004c92:	69a2      	ldr	r2, [r4, #24]
 8004c94:	429a      	cmp	r2, r3
 8004c96:	dc06      	bgt.n	8004ca6 <_puts_r+0xb6>
 8004c98:	290a      	cmp	r1, #10
 8004c9a:	d004      	beq.n	8004ca6 <_puts_r+0xb6>
 8004c9c:	6823      	ldr	r3, [r4, #0]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	7019      	strb	r1, [r3, #0]
 8004ca4:	e7c5      	b.n	8004c32 <_puts_r+0x42>
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 f817 	bl	8004cdc <__swbuf_r>
 8004cae:	3001      	adds	r0, #1
 8004cb0:	d1bf      	bne.n	8004c32 <_puts_r+0x42>
 8004cb2:	e7df      	b.n	8004c74 <_puts_r+0x84>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	250a      	movs	r5, #10
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	701d      	strb	r5, [r3, #0]
 8004cbe:	e7db      	b.n	8004c78 <_puts_r+0x88>
 8004cc0:	08006f84 	.word	0x08006f84
 8004cc4:	08006fa4 	.word	0x08006fa4
 8004cc8:	08006f64 	.word	0x08006f64

08004ccc <puts>:
 8004ccc:	4b02      	ldr	r3, [pc, #8]	; (8004cd8 <puts+0xc>)
 8004cce:	4601      	mov	r1, r0
 8004cd0:	6818      	ldr	r0, [r3, #0]
 8004cd2:	f7ff bf8d 	b.w	8004bf0 <_puts_r>
 8004cd6:	bf00      	nop
 8004cd8:	2000000c 	.word	0x2000000c

08004cdc <__swbuf_r>:
 8004cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cde:	460e      	mov	r6, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	b118      	cbz	r0, 8004cee <__swbuf_r+0x12>
 8004ce6:	6983      	ldr	r3, [r0, #24]
 8004ce8:	b90b      	cbnz	r3, 8004cee <__swbuf_r+0x12>
 8004cea:	f001 f84d 	bl	8005d88 <__sinit>
 8004cee:	4b21      	ldr	r3, [pc, #132]	; (8004d74 <__swbuf_r+0x98>)
 8004cf0:	429c      	cmp	r4, r3
 8004cf2:	d12b      	bne.n	8004d4c <__swbuf_r+0x70>
 8004cf4:	686c      	ldr	r4, [r5, #4]
 8004cf6:	69a3      	ldr	r3, [r4, #24]
 8004cf8:	60a3      	str	r3, [r4, #8]
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	071a      	lsls	r2, r3, #28
 8004cfe:	d52f      	bpl.n	8004d60 <__swbuf_r+0x84>
 8004d00:	6923      	ldr	r3, [r4, #16]
 8004d02:	b36b      	cbz	r3, 8004d60 <__swbuf_r+0x84>
 8004d04:	6923      	ldr	r3, [r4, #16]
 8004d06:	6820      	ldr	r0, [r4, #0]
 8004d08:	1ac0      	subs	r0, r0, r3
 8004d0a:	6963      	ldr	r3, [r4, #20]
 8004d0c:	b2f6      	uxtb	r6, r6
 8004d0e:	4283      	cmp	r3, r0
 8004d10:	4637      	mov	r7, r6
 8004d12:	dc04      	bgt.n	8004d1e <__swbuf_r+0x42>
 8004d14:	4621      	mov	r1, r4
 8004d16:	4628      	mov	r0, r5
 8004d18:	f000 ffa2 	bl	8005c60 <_fflush_r>
 8004d1c:	bb30      	cbnz	r0, 8004d6c <__swbuf_r+0x90>
 8004d1e:	68a3      	ldr	r3, [r4, #8]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60a3      	str	r3, [r4, #8]
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	1c5a      	adds	r2, r3, #1
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	701e      	strb	r6, [r3, #0]
 8004d2c:	6963      	ldr	r3, [r4, #20]
 8004d2e:	3001      	adds	r0, #1
 8004d30:	4283      	cmp	r3, r0
 8004d32:	d004      	beq.n	8004d3e <__swbuf_r+0x62>
 8004d34:	89a3      	ldrh	r3, [r4, #12]
 8004d36:	07db      	lsls	r3, r3, #31
 8004d38:	d506      	bpl.n	8004d48 <__swbuf_r+0x6c>
 8004d3a:	2e0a      	cmp	r6, #10
 8004d3c:	d104      	bne.n	8004d48 <__swbuf_r+0x6c>
 8004d3e:	4621      	mov	r1, r4
 8004d40:	4628      	mov	r0, r5
 8004d42:	f000 ff8d 	bl	8005c60 <_fflush_r>
 8004d46:	b988      	cbnz	r0, 8004d6c <__swbuf_r+0x90>
 8004d48:	4638      	mov	r0, r7
 8004d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <__swbuf_r+0x9c>)
 8004d4e:	429c      	cmp	r4, r3
 8004d50:	d101      	bne.n	8004d56 <__swbuf_r+0x7a>
 8004d52:	68ac      	ldr	r4, [r5, #8]
 8004d54:	e7cf      	b.n	8004cf6 <__swbuf_r+0x1a>
 8004d56:	4b09      	ldr	r3, [pc, #36]	; (8004d7c <__swbuf_r+0xa0>)
 8004d58:	429c      	cmp	r4, r3
 8004d5a:	bf08      	it	eq
 8004d5c:	68ec      	ldreq	r4, [r5, #12]
 8004d5e:	e7ca      	b.n	8004cf6 <__swbuf_r+0x1a>
 8004d60:	4621      	mov	r1, r4
 8004d62:	4628      	mov	r0, r5
 8004d64:	f000 f80c 	bl	8004d80 <__swsetup_r>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	d0cb      	beq.n	8004d04 <__swbuf_r+0x28>
 8004d6c:	f04f 37ff 	mov.w	r7, #4294967295
 8004d70:	e7ea      	b.n	8004d48 <__swbuf_r+0x6c>
 8004d72:	bf00      	nop
 8004d74:	08006f84 	.word	0x08006f84
 8004d78:	08006fa4 	.word	0x08006fa4
 8004d7c:	08006f64 	.word	0x08006f64

08004d80 <__swsetup_r>:
 8004d80:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <__swsetup_r+0xcc>)
 8004d82:	b570      	push	{r4, r5, r6, lr}
 8004d84:	681d      	ldr	r5, [r3, #0]
 8004d86:	4606      	mov	r6, r0
 8004d88:	460c      	mov	r4, r1
 8004d8a:	b125      	cbz	r5, 8004d96 <__swsetup_r+0x16>
 8004d8c:	69ab      	ldr	r3, [r5, #24]
 8004d8e:	b913      	cbnz	r3, 8004d96 <__swsetup_r+0x16>
 8004d90:	4628      	mov	r0, r5
 8004d92:	f000 fff9 	bl	8005d88 <__sinit>
 8004d96:	4b2e      	ldr	r3, [pc, #184]	; (8004e50 <__swsetup_r+0xd0>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d10f      	bne.n	8004dbc <__swsetup_r+0x3c>
 8004d9c:	686c      	ldr	r4, [r5, #4]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004da4:	0719      	lsls	r1, r3, #28
 8004da6:	d42c      	bmi.n	8004e02 <__swsetup_r+0x82>
 8004da8:	06dd      	lsls	r5, r3, #27
 8004daa:	d411      	bmi.n	8004dd0 <__swsetup_r+0x50>
 8004dac:	2309      	movs	r3, #9
 8004dae:	6033      	str	r3, [r6, #0]
 8004db0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dba:	e03e      	b.n	8004e3a <__swsetup_r+0xba>
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <__swsetup_r+0xd4>)
 8004dbe:	429c      	cmp	r4, r3
 8004dc0:	d101      	bne.n	8004dc6 <__swsetup_r+0x46>
 8004dc2:	68ac      	ldr	r4, [r5, #8]
 8004dc4:	e7eb      	b.n	8004d9e <__swsetup_r+0x1e>
 8004dc6:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <__swsetup_r+0xd8>)
 8004dc8:	429c      	cmp	r4, r3
 8004dca:	bf08      	it	eq
 8004dcc:	68ec      	ldreq	r4, [r5, #12]
 8004dce:	e7e6      	b.n	8004d9e <__swsetup_r+0x1e>
 8004dd0:	0758      	lsls	r0, r3, #29
 8004dd2:	d512      	bpl.n	8004dfa <__swsetup_r+0x7a>
 8004dd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dd6:	b141      	cbz	r1, 8004dea <__swsetup_r+0x6a>
 8004dd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ddc:	4299      	cmp	r1, r3
 8004dde:	d002      	beq.n	8004de6 <__swsetup_r+0x66>
 8004de0:	4630      	mov	r0, r6
 8004de2:	f001 fc8b 	bl	80066fc <_free_r>
 8004de6:	2300      	movs	r3, #0
 8004de8:	6363      	str	r3, [r4, #52]	; 0x34
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	2300      	movs	r3, #0
 8004df4:	6063      	str	r3, [r4, #4]
 8004df6:	6923      	ldr	r3, [r4, #16]
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	f043 0308 	orr.w	r3, r3, #8
 8004e00:	81a3      	strh	r3, [r4, #12]
 8004e02:	6923      	ldr	r3, [r4, #16]
 8004e04:	b94b      	cbnz	r3, 8004e1a <__swsetup_r+0x9a>
 8004e06:	89a3      	ldrh	r3, [r4, #12]
 8004e08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e10:	d003      	beq.n	8004e1a <__swsetup_r+0x9a>
 8004e12:	4621      	mov	r1, r4
 8004e14:	4630      	mov	r0, r6
 8004e16:	f001 f881 	bl	8005f1c <__smakebuf_r>
 8004e1a:	89a0      	ldrh	r0, [r4, #12]
 8004e1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e20:	f010 0301 	ands.w	r3, r0, #1
 8004e24:	d00a      	beq.n	8004e3c <__swsetup_r+0xbc>
 8004e26:	2300      	movs	r3, #0
 8004e28:	60a3      	str	r3, [r4, #8]
 8004e2a:	6963      	ldr	r3, [r4, #20]
 8004e2c:	425b      	negs	r3, r3
 8004e2e:	61a3      	str	r3, [r4, #24]
 8004e30:	6923      	ldr	r3, [r4, #16]
 8004e32:	b943      	cbnz	r3, 8004e46 <__swsetup_r+0xc6>
 8004e34:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e38:	d1ba      	bne.n	8004db0 <__swsetup_r+0x30>
 8004e3a:	bd70      	pop	{r4, r5, r6, pc}
 8004e3c:	0781      	lsls	r1, r0, #30
 8004e3e:	bf58      	it	pl
 8004e40:	6963      	ldrpl	r3, [r4, #20]
 8004e42:	60a3      	str	r3, [r4, #8]
 8004e44:	e7f4      	b.n	8004e30 <__swsetup_r+0xb0>
 8004e46:	2000      	movs	r0, #0
 8004e48:	e7f7      	b.n	8004e3a <__swsetup_r+0xba>
 8004e4a:	bf00      	nop
 8004e4c:	2000000c 	.word	0x2000000c
 8004e50:	08006f84 	.word	0x08006f84
 8004e54:	08006fa4 	.word	0x08006fa4
 8004e58:	08006f64 	.word	0x08006f64

08004e5c <quorem>:
 8004e5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e60:	6903      	ldr	r3, [r0, #16]
 8004e62:	690c      	ldr	r4, [r1, #16]
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	4607      	mov	r7, r0
 8004e68:	f2c0 8081 	blt.w	8004f6e <quorem+0x112>
 8004e6c:	3c01      	subs	r4, #1
 8004e6e:	f101 0814 	add.w	r8, r1, #20
 8004e72:	f100 0514 	add.w	r5, r0, #20
 8004e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e7a:	9301      	str	r3, [sp, #4]
 8004e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e84:	3301      	adds	r3, #1
 8004e86:	429a      	cmp	r2, r3
 8004e88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e90:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e94:	d331      	bcc.n	8004efa <quorem+0x9e>
 8004e96:	f04f 0e00 	mov.w	lr, #0
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	46ac      	mov	ip, r5
 8004e9e:	46f2      	mov	sl, lr
 8004ea0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ea4:	b293      	uxth	r3, r2
 8004ea6:	fb06 e303 	mla	r3, r6, r3, lr
 8004eaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	ebaa 0303 	sub.w	r3, sl, r3
 8004eb4:	f8dc a000 	ldr.w	sl, [ip]
 8004eb8:	0c12      	lsrs	r2, r2, #16
 8004eba:	fa13 f38a 	uxtah	r3, r3, sl
 8004ebe:	fb06 e202 	mla	r2, r6, r2, lr
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	9b00      	ldr	r3, [sp, #0]
 8004ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eca:	b292      	uxth	r2, r2
 8004ecc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ed0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ed4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ed8:	4581      	cmp	r9, r0
 8004eda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ede:	f84c 3b04 	str.w	r3, [ip], #4
 8004ee2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ee6:	d2db      	bcs.n	8004ea0 <quorem+0x44>
 8004ee8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004eec:	b92b      	cbnz	r3, 8004efa <quorem+0x9e>
 8004eee:	9b01      	ldr	r3, [sp, #4]
 8004ef0:	3b04      	subs	r3, #4
 8004ef2:	429d      	cmp	r5, r3
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	d32e      	bcc.n	8004f56 <quorem+0xfa>
 8004ef8:	613c      	str	r4, [r7, #16]
 8004efa:	4638      	mov	r0, r7
 8004efc:	f001 fae6 	bl	80064cc <__mcmp>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	db24      	blt.n	8004f4e <quorem+0xf2>
 8004f04:	3601      	adds	r6, #1
 8004f06:	4628      	mov	r0, r5
 8004f08:	f04f 0c00 	mov.w	ip, #0
 8004f0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f10:	f8d0 e000 	ldr.w	lr, [r0]
 8004f14:	b293      	uxth	r3, r2
 8004f16:	ebac 0303 	sub.w	r3, ip, r3
 8004f1a:	0c12      	lsrs	r2, r2, #16
 8004f1c:	fa13 f38e 	uxtah	r3, r3, lr
 8004f20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f2e:	45c1      	cmp	r9, r8
 8004f30:	f840 3b04 	str.w	r3, [r0], #4
 8004f34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f38:	d2e8      	bcs.n	8004f0c <quorem+0xb0>
 8004f3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f42:	b922      	cbnz	r2, 8004f4e <quorem+0xf2>
 8004f44:	3b04      	subs	r3, #4
 8004f46:	429d      	cmp	r5, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	d30a      	bcc.n	8004f62 <quorem+0x106>
 8004f4c:	613c      	str	r4, [r7, #16]
 8004f4e:	4630      	mov	r0, r6
 8004f50:	b003      	add	sp, #12
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	3b04      	subs	r3, #4
 8004f5a:	2a00      	cmp	r2, #0
 8004f5c:	d1cc      	bne.n	8004ef8 <quorem+0x9c>
 8004f5e:	3c01      	subs	r4, #1
 8004f60:	e7c7      	b.n	8004ef2 <quorem+0x96>
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	d1f0      	bne.n	8004f4c <quorem+0xf0>
 8004f6a:	3c01      	subs	r4, #1
 8004f6c:	e7eb      	b.n	8004f46 <quorem+0xea>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e7ee      	b.n	8004f50 <quorem+0xf4>
 8004f72:	0000      	movs	r0, r0
 8004f74:	0000      	movs	r0, r0
	...

08004f78 <_dtoa_r>:
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	ed2d 8b04 	vpush	{d8-d9}
 8004f80:	ec57 6b10 	vmov	r6, r7, d0
 8004f84:	b093      	sub	sp, #76	; 0x4c
 8004f86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004f88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f8c:	9106      	str	r1, [sp, #24]
 8004f8e:	ee10 aa10 	vmov	sl, s0
 8004f92:	4604      	mov	r4, r0
 8004f94:	9209      	str	r2, [sp, #36]	; 0x24
 8004f96:	930c      	str	r3, [sp, #48]	; 0x30
 8004f98:	46bb      	mov	fp, r7
 8004f9a:	b975      	cbnz	r5, 8004fba <_dtoa_r+0x42>
 8004f9c:	2010      	movs	r0, #16
 8004f9e:	f000 fffd 	bl	8005f9c <malloc>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6260      	str	r0, [r4, #36]	; 0x24
 8004fa6:	b920      	cbnz	r0, 8004fb2 <_dtoa_r+0x3a>
 8004fa8:	4ba7      	ldr	r3, [pc, #668]	; (8005248 <_dtoa_r+0x2d0>)
 8004faa:	21ea      	movs	r1, #234	; 0xea
 8004fac:	48a7      	ldr	r0, [pc, #668]	; (800524c <_dtoa_r+0x2d4>)
 8004fae:	f001 fe45 	bl	8006c3c <__assert_func>
 8004fb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fb6:	6005      	str	r5, [r0, #0]
 8004fb8:	60c5      	str	r5, [r0, #12]
 8004fba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	b151      	cbz	r1, 8004fd6 <_dtoa_r+0x5e>
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	604a      	str	r2, [r1, #4]
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	4093      	lsls	r3, r2
 8004fc8:	608b      	str	r3, [r1, #8]
 8004fca:	4620      	mov	r0, r4
 8004fcc:	f001 f83c 	bl	8006048 <_Bfree>
 8004fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	1e3b      	subs	r3, r7, #0
 8004fd8:	bfaa      	itet	ge
 8004fda:	2300      	movge	r3, #0
 8004fdc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004fe0:	f8c8 3000 	strge.w	r3, [r8]
 8004fe4:	4b9a      	ldr	r3, [pc, #616]	; (8005250 <_dtoa_r+0x2d8>)
 8004fe6:	bfbc      	itt	lt
 8004fe8:	2201      	movlt	r2, #1
 8004fea:	f8c8 2000 	strlt.w	r2, [r8]
 8004fee:	ea33 030b 	bics.w	r3, r3, fp
 8004ff2:	d11b      	bne.n	800502c <_dtoa_r+0xb4>
 8004ff4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ff6:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ffa:	6013      	str	r3, [r2, #0]
 8004ffc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005000:	4333      	orrs	r3, r6
 8005002:	f000 8592 	beq.w	8005b2a <_dtoa_r+0xbb2>
 8005006:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005008:	b963      	cbnz	r3, 8005024 <_dtoa_r+0xac>
 800500a:	4b92      	ldr	r3, [pc, #584]	; (8005254 <_dtoa_r+0x2dc>)
 800500c:	e022      	b.n	8005054 <_dtoa_r+0xdc>
 800500e:	4b92      	ldr	r3, [pc, #584]	; (8005258 <_dtoa_r+0x2e0>)
 8005010:	9301      	str	r3, [sp, #4]
 8005012:	3308      	adds	r3, #8
 8005014:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	9801      	ldr	r0, [sp, #4]
 800501a:	b013      	add	sp, #76	; 0x4c
 800501c:	ecbd 8b04 	vpop	{d8-d9}
 8005020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005024:	4b8b      	ldr	r3, [pc, #556]	; (8005254 <_dtoa_r+0x2dc>)
 8005026:	9301      	str	r3, [sp, #4]
 8005028:	3303      	adds	r3, #3
 800502a:	e7f3      	b.n	8005014 <_dtoa_r+0x9c>
 800502c:	2200      	movs	r2, #0
 800502e:	2300      	movs	r3, #0
 8005030:	4650      	mov	r0, sl
 8005032:	4659      	mov	r1, fp
 8005034:	f7fb fd68 	bl	8000b08 <__aeabi_dcmpeq>
 8005038:	ec4b ab19 	vmov	d9, sl, fp
 800503c:	4680      	mov	r8, r0
 800503e:	b158      	cbz	r0, 8005058 <_dtoa_r+0xe0>
 8005040:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005042:	2301      	movs	r3, #1
 8005044:	6013      	str	r3, [r2, #0]
 8005046:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 856b 	beq.w	8005b24 <_dtoa_r+0xbac>
 800504e:	4883      	ldr	r0, [pc, #524]	; (800525c <_dtoa_r+0x2e4>)
 8005050:	6018      	str	r0, [r3, #0]
 8005052:	1e43      	subs	r3, r0, #1
 8005054:	9301      	str	r3, [sp, #4]
 8005056:	e7df      	b.n	8005018 <_dtoa_r+0xa0>
 8005058:	ec4b ab10 	vmov	d0, sl, fp
 800505c:	aa10      	add	r2, sp, #64	; 0x40
 800505e:	a911      	add	r1, sp, #68	; 0x44
 8005060:	4620      	mov	r0, r4
 8005062:	f001 fad9 	bl	8006618 <__d2b>
 8005066:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800506a:	ee08 0a10 	vmov	s16, r0
 800506e:	2d00      	cmp	r5, #0
 8005070:	f000 8084 	beq.w	800517c <_dtoa_r+0x204>
 8005074:	ee19 3a90 	vmov	r3, s19
 8005078:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800507c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005080:	4656      	mov	r6, sl
 8005082:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005086:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800508a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800508e:	4b74      	ldr	r3, [pc, #464]	; (8005260 <_dtoa_r+0x2e8>)
 8005090:	2200      	movs	r2, #0
 8005092:	4630      	mov	r0, r6
 8005094:	4639      	mov	r1, r7
 8005096:	f7fb f917 	bl	80002c8 <__aeabi_dsub>
 800509a:	a365      	add	r3, pc, #404	; (adr r3, 8005230 <_dtoa_r+0x2b8>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb faca 	bl	8000638 <__aeabi_dmul>
 80050a4:	a364      	add	r3, pc, #400	; (adr r3, 8005238 <_dtoa_r+0x2c0>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb f90f 	bl	80002cc <__adddf3>
 80050ae:	4606      	mov	r6, r0
 80050b0:	4628      	mov	r0, r5
 80050b2:	460f      	mov	r7, r1
 80050b4:	f7fb fa56 	bl	8000564 <__aeabi_i2d>
 80050b8:	a361      	add	r3, pc, #388	; (adr r3, 8005240 <_dtoa_r+0x2c8>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb fabb 	bl	8000638 <__aeabi_dmul>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb f8ff 	bl	80002cc <__adddf3>
 80050ce:	4606      	mov	r6, r0
 80050d0:	460f      	mov	r7, r1
 80050d2:	f7fb fd61 	bl	8000b98 <__aeabi_d2iz>
 80050d6:	2200      	movs	r2, #0
 80050d8:	9000      	str	r0, [sp, #0]
 80050da:	2300      	movs	r3, #0
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f7fb fd1c 	bl	8000b1c <__aeabi_dcmplt>
 80050e4:	b150      	cbz	r0, 80050fc <_dtoa_r+0x184>
 80050e6:	9800      	ldr	r0, [sp, #0]
 80050e8:	f7fb fa3c 	bl	8000564 <__aeabi_i2d>
 80050ec:	4632      	mov	r2, r6
 80050ee:	463b      	mov	r3, r7
 80050f0:	f7fb fd0a 	bl	8000b08 <__aeabi_dcmpeq>
 80050f4:	b910      	cbnz	r0, 80050fc <_dtoa_r+0x184>
 80050f6:	9b00      	ldr	r3, [sp, #0]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	9b00      	ldr	r3, [sp, #0]
 80050fe:	2b16      	cmp	r3, #22
 8005100:	d85a      	bhi.n	80051b8 <_dtoa_r+0x240>
 8005102:	9a00      	ldr	r2, [sp, #0]
 8005104:	4b57      	ldr	r3, [pc, #348]	; (8005264 <_dtoa_r+0x2ec>)
 8005106:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800510a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510e:	ec51 0b19 	vmov	r0, r1, d9
 8005112:	f7fb fd03 	bl	8000b1c <__aeabi_dcmplt>
 8005116:	2800      	cmp	r0, #0
 8005118:	d050      	beq.n	80051bc <_dtoa_r+0x244>
 800511a:	9b00      	ldr	r3, [sp, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	930b      	str	r3, [sp, #44]	; 0x2c
 8005124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005126:	1b5d      	subs	r5, r3, r5
 8005128:	1e6b      	subs	r3, r5, #1
 800512a:	9305      	str	r3, [sp, #20]
 800512c:	bf45      	ittet	mi
 800512e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005132:	9304      	strmi	r3, [sp, #16]
 8005134:	2300      	movpl	r3, #0
 8005136:	2300      	movmi	r3, #0
 8005138:	bf4c      	ite	mi
 800513a:	9305      	strmi	r3, [sp, #20]
 800513c:	9304      	strpl	r3, [sp, #16]
 800513e:	9b00      	ldr	r3, [sp, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	db3d      	blt.n	80051c0 <_dtoa_r+0x248>
 8005144:	9b05      	ldr	r3, [sp, #20]
 8005146:	9a00      	ldr	r2, [sp, #0]
 8005148:	920a      	str	r2, [sp, #40]	; 0x28
 800514a:	4413      	add	r3, r2
 800514c:	9305      	str	r3, [sp, #20]
 800514e:	2300      	movs	r3, #0
 8005150:	9307      	str	r3, [sp, #28]
 8005152:	9b06      	ldr	r3, [sp, #24]
 8005154:	2b09      	cmp	r3, #9
 8005156:	f200 8089 	bhi.w	800526c <_dtoa_r+0x2f4>
 800515a:	2b05      	cmp	r3, #5
 800515c:	bfc4      	itt	gt
 800515e:	3b04      	subgt	r3, #4
 8005160:	9306      	strgt	r3, [sp, #24]
 8005162:	9b06      	ldr	r3, [sp, #24]
 8005164:	f1a3 0302 	sub.w	r3, r3, #2
 8005168:	bfcc      	ite	gt
 800516a:	2500      	movgt	r5, #0
 800516c:	2501      	movle	r5, #1
 800516e:	2b03      	cmp	r3, #3
 8005170:	f200 8087 	bhi.w	8005282 <_dtoa_r+0x30a>
 8005174:	e8df f003 	tbb	[pc, r3]
 8005178:	59383a2d 	.word	0x59383a2d
 800517c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005180:	441d      	add	r5, r3
 8005182:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005186:	2b20      	cmp	r3, #32
 8005188:	bfc1      	itttt	gt
 800518a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800518e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005192:	fa0b f303 	lslgt.w	r3, fp, r3
 8005196:	fa26 f000 	lsrgt.w	r0, r6, r0
 800519a:	bfda      	itte	le
 800519c:	f1c3 0320 	rsble	r3, r3, #32
 80051a0:	fa06 f003 	lslle.w	r0, r6, r3
 80051a4:	4318      	orrgt	r0, r3
 80051a6:	f7fb f9cd 	bl	8000544 <__aeabi_ui2d>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4606      	mov	r6, r0
 80051ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80051b2:	3d01      	subs	r5, #1
 80051b4:	930e      	str	r3, [sp, #56]	; 0x38
 80051b6:	e76a      	b.n	800508e <_dtoa_r+0x116>
 80051b8:	2301      	movs	r3, #1
 80051ba:	e7b2      	b.n	8005122 <_dtoa_r+0x1aa>
 80051bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80051be:	e7b1      	b.n	8005124 <_dtoa_r+0x1ac>
 80051c0:	9b04      	ldr	r3, [sp, #16]
 80051c2:	9a00      	ldr	r2, [sp, #0]
 80051c4:	1a9b      	subs	r3, r3, r2
 80051c6:	9304      	str	r3, [sp, #16]
 80051c8:	4253      	negs	r3, r2
 80051ca:	9307      	str	r3, [sp, #28]
 80051cc:	2300      	movs	r3, #0
 80051ce:	930a      	str	r3, [sp, #40]	; 0x28
 80051d0:	e7bf      	b.n	8005152 <_dtoa_r+0x1da>
 80051d2:	2300      	movs	r3, #0
 80051d4:	9308      	str	r3, [sp, #32]
 80051d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051d8:	2b00      	cmp	r3, #0
 80051da:	dc55      	bgt.n	8005288 <_dtoa_r+0x310>
 80051dc:	2301      	movs	r3, #1
 80051de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80051e2:	461a      	mov	r2, r3
 80051e4:	9209      	str	r2, [sp, #36]	; 0x24
 80051e6:	e00c      	b.n	8005202 <_dtoa_r+0x28a>
 80051e8:	2301      	movs	r3, #1
 80051ea:	e7f3      	b.n	80051d4 <_dtoa_r+0x25c>
 80051ec:	2300      	movs	r3, #0
 80051ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f0:	9308      	str	r3, [sp, #32]
 80051f2:	9b00      	ldr	r3, [sp, #0]
 80051f4:	4413      	add	r3, r2
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	3301      	adds	r3, #1
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	9303      	str	r3, [sp, #12]
 80051fe:	bfb8      	it	lt
 8005200:	2301      	movlt	r3, #1
 8005202:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005204:	2200      	movs	r2, #0
 8005206:	6042      	str	r2, [r0, #4]
 8005208:	2204      	movs	r2, #4
 800520a:	f102 0614 	add.w	r6, r2, #20
 800520e:	429e      	cmp	r6, r3
 8005210:	6841      	ldr	r1, [r0, #4]
 8005212:	d93d      	bls.n	8005290 <_dtoa_r+0x318>
 8005214:	4620      	mov	r0, r4
 8005216:	f000 fed7 	bl	8005fc8 <_Balloc>
 800521a:	9001      	str	r0, [sp, #4]
 800521c:	2800      	cmp	r0, #0
 800521e:	d13b      	bne.n	8005298 <_dtoa_r+0x320>
 8005220:	4b11      	ldr	r3, [pc, #68]	; (8005268 <_dtoa_r+0x2f0>)
 8005222:	4602      	mov	r2, r0
 8005224:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005228:	e6c0      	b.n	8004fac <_dtoa_r+0x34>
 800522a:	2301      	movs	r3, #1
 800522c:	e7df      	b.n	80051ee <_dtoa_r+0x276>
 800522e:	bf00      	nop
 8005230:	636f4361 	.word	0x636f4361
 8005234:	3fd287a7 	.word	0x3fd287a7
 8005238:	8b60c8b3 	.word	0x8b60c8b3
 800523c:	3fc68a28 	.word	0x3fc68a28
 8005240:	509f79fb 	.word	0x509f79fb
 8005244:	3fd34413 	.word	0x3fd34413
 8005248:	08006ee1 	.word	0x08006ee1
 800524c:	08006ef8 	.word	0x08006ef8
 8005250:	7ff00000 	.word	0x7ff00000
 8005254:	08006edd 	.word	0x08006edd
 8005258:	08006ed4 	.word	0x08006ed4
 800525c:	08006eb1 	.word	0x08006eb1
 8005260:	3ff80000 	.word	0x3ff80000
 8005264:	08007048 	.word	0x08007048
 8005268:	08006f53 	.word	0x08006f53
 800526c:	2501      	movs	r5, #1
 800526e:	2300      	movs	r3, #0
 8005270:	9306      	str	r3, [sp, #24]
 8005272:	9508      	str	r5, [sp, #32]
 8005274:	f04f 33ff 	mov.w	r3, #4294967295
 8005278:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800527c:	2200      	movs	r2, #0
 800527e:	2312      	movs	r3, #18
 8005280:	e7b0      	b.n	80051e4 <_dtoa_r+0x26c>
 8005282:	2301      	movs	r3, #1
 8005284:	9308      	str	r3, [sp, #32]
 8005286:	e7f5      	b.n	8005274 <_dtoa_r+0x2fc>
 8005288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800528e:	e7b8      	b.n	8005202 <_dtoa_r+0x28a>
 8005290:	3101      	adds	r1, #1
 8005292:	6041      	str	r1, [r0, #4]
 8005294:	0052      	lsls	r2, r2, #1
 8005296:	e7b8      	b.n	800520a <_dtoa_r+0x292>
 8005298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800529a:	9a01      	ldr	r2, [sp, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	9b03      	ldr	r3, [sp, #12]
 80052a0:	2b0e      	cmp	r3, #14
 80052a2:	f200 809d 	bhi.w	80053e0 <_dtoa_r+0x468>
 80052a6:	2d00      	cmp	r5, #0
 80052a8:	f000 809a 	beq.w	80053e0 <_dtoa_r+0x468>
 80052ac:	9b00      	ldr	r3, [sp, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd32      	ble.n	8005318 <_dtoa_r+0x3a0>
 80052b2:	4ab7      	ldr	r2, [pc, #732]	; (8005590 <_dtoa_r+0x618>)
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052c0:	9b00      	ldr	r3, [sp, #0]
 80052c2:	05d8      	lsls	r0, r3, #23
 80052c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80052c8:	d516      	bpl.n	80052f8 <_dtoa_r+0x380>
 80052ca:	4bb2      	ldr	r3, [pc, #712]	; (8005594 <_dtoa_r+0x61c>)
 80052cc:	ec51 0b19 	vmov	r0, r1, d9
 80052d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052d4:	f7fb fada 	bl	800088c <__aeabi_ddiv>
 80052d8:	f007 070f 	and.w	r7, r7, #15
 80052dc:	4682      	mov	sl, r0
 80052de:	468b      	mov	fp, r1
 80052e0:	2503      	movs	r5, #3
 80052e2:	4eac      	ldr	r6, [pc, #688]	; (8005594 <_dtoa_r+0x61c>)
 80052e4:	b957      	cbnz	r7, 80052fc <_dtoa_r+0x384>
 80052e6:	4642      	mov	r2, r8
 80052e8:	464b      	mov	r3, r9
 80052ea:	4650      	mov	r0, sl
 80052ec:	4659      	mov	r1, fp
 80052ee:	f7fb facd 	bl	800088c <__aeabi_ddiv>
 80052f2:	4682      	mov	sl, r0
 80052f4:	468b      	mov	fp, r1
 80052f6:	e028      	b.n	800534a <_dtoa_r+0x3d2>
 80052f8:	2502      	movs	r5, #2
 80052fa:	e7f2      	b.n	80052e2 <_dtoa_r+0x36a>
 80052fc:	07f9      	lsls	r1, r7, #31
 80052fe:	d508      	bpl.n	8005312 <_dtoa_r+0x39a>
 8005300:	4640      	mov	r0, r8
 8005302:	4649      	mov	r1, r9
 8005304:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005308:	f7fb f996 	bl	8000638 <__aeabi_dmul>
 800530c:	3501      	adds	r5, #1
 800530e:	4680      	mov	r8, r0
 8005310:	4689      	mov	r9, r1
 8005312:	107f      	asrs	r7, r7, #1
 8005314:	3608      	adds	r6, #8
 8005316:	e7e5      	b.n	80052e4 <_dtoa_r+0x36c>
 8005318:	f000 809b 	beq.w	8005452 <_dtoa_r+0x4da>
 800531c:	9b00      	ldr	r3, [sp, #0]
 800531e:	4f9d      	ldr	r7, [pc, #628]	; (8005594 <_dtoa_r+0x61c>)
 8005320:	425e      	negs	r6, r3
 8005322:	4b9b      	ldr	r3, [pc, #620]	; (8005590 <_dtoa_r+0x618>)
 8005324:	f006 020f 	and.w	r2, r6, #15
 8005328:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	ec51 0b19 	vmov	r0, r1, d9
 8005334:	f7fb f980 	bl	8000638 <__aeabi_dmul>
 8005338:	1136      	asrs	r6, r6, #4
 800533a:	4682      	mov	sl, r0
 800533c:	468b      	mov	fp, r1
 800533e:	2300      	movs	r3, #0
 8005340:	2502      	movs	r5, #2
 8005342:	2e00      	cmp	r6, #0
 8005344:	d17a      	bne.n	800543c <_dtoa_r+0x4c4>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1d3      	bne.n	80052f2 <_dtoa_r+0x37a>
 800534a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 8082 	beq.w	8005456 <_dtoa_r+0x4de>
 8005352:	4b91      	ldr	r3, [pc, #580]	; (8005598 <_dtoa_r+0x620>)
 8005354:	2200      	movs	r2, #0
 8005356:	4650      	mov	r0, sl
 8005358:	4659      	mov	r1, fp
 800535a:	f7fb fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800535e:	2800      	cmp	r0, #0
 8005360:	d079      	beq.n	8005456 <_dtoa_r+0x4de>
 8005362:	9b03      	ldr	r3, [sp, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d076      	beq.n	8005456 <_dtoa_r+0x4de>
 8005368:	9b02      	ldr	r3, [sp, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	dd36      	ble.n	80053dc <_dtoa_r+0x464>
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	4650      	mov	r0, sl
 8005372:	4659      	mov	r1, fp
 8005374:	1e5f      	subs	r7, r3, #1
 8005376:	2200      	movs	r2, #0
 8005378:	4b88      	ldr	r3, [pc, #544]	; (800559c <_dtoa_r+0x624>)
 800537a:	f7fb f95d 	bl	8000638 <__aeabi_dmul>
 800537e:	9e02      	ldr	r6, [sp, #8]
 8005380:	4682      	mov	sl, r0
 8005382:	468b      	mov	fp, r1
 8005384:	3501      	adds	r5, #1
 8005386:	4628      	mov	r0, r5
 8005388:	f7fb f8ec 	bl	8000564 <__aeabi_i2d>
 800538c:	4652      	mov	r2, sl
 800538e:	465b      	mov	r3, fp
 8005390:	f7fb f952 	bl	8000638 <__aeabi_dmul>
 8005394:	4b82      	ldr	r3, [pc, #520]	; (80055a0 <_dtoa_r+0x628>)
 8005396:	2200      	movs	r2, #0
 8005398:	f7fa ff98 	bl	80002cc <__adddf3>
 800539c:	46d0      	mov	r8, sl
 800539e:	46d9      	mov	r9, fp
 80053a0:	4682      	mov	sl, r0
 80053a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80053a6:	2e00      	cmp	r6, #0
 80053a8:	d158      	bne.n	800545c <_dtoa_r+0x4e4>
 80053aa:	4b7e      	ldr	r3, [pc, #504]	; (80055a4 <_dtoa_r+0x62c>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fa ff89 	bl	80002c8 <__aeabi_dsub>
 80053b6:	4652      	mov	r2, sl
 80053b8:	465b      	mov	r3, fp
 80053ba:	4680      	mov	r8, r0
 80053bc:	4689      	mov	r9, r1
 80053be:	f7fb fbcb 	bl	8000b58 <__aeabi_dcmpgt>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	f040 8295 	bne.w	80058f2 <_dtoa_r+0x97a>
 80053c8:	4652      	mov	r2, sl
 80053ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80053ce:	4640      	mov	r0, r8
 80053d0:	4649      	mov	r1, r9
 80053d2:	f7fb fba3 	bl	8000b1c <__aeabi_dcmplt>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	f040 8289 	bne.w	80058ee <_dtoa_r+0x976>
 80053dc:	ec5b ab19 	vmov	sl, fp, d9
 80053e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f2c0 8148 	blt.w	8005678 <_dtoa_r+0x700>
 80053e8:	9a00      	ldr	r2, [sp, #0]
 80053ea:	2a0e      	cmp	r2, #14
 80053ec:	f300 8144 	bgt.w	8005678 <_dtoa_r+0x700>
 80053f0:	4b67      	ldr	r3, [pc, #412]	; (8005590 <_dtoa_r+0x618>)
 80053f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f280 80d5 	bge.w	80055ac <_dtoa_r+0x634>
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	f300 80d1 	bgt.w	80055ac <_dtoa_r+0x634>
 800540a:	f040 826f 	bne.w	80058ec <_dtoa_r+0x974>
 800540e:	4b65      	ldr	r3, [pc, #404]	; (80055a4 <_dtoa_r+0x62c>)
 8005410:	2200      	movs	r2, #0
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fb f90f 	bl	8000638 <__aeabi_dmul>
 800541a:	4652      	mov	r2, sl
 800541c:	465b      	mov	r3, fp
 800541e:	f7fb fb91 	bl	8000b44 <__aeabi_dcmpge>
 8005422:	9e03      	ldr	r6, [sp, #12]
 8005424:	4637      	mov	r7, r6
 8005426:	2800      	cmp	r0, #0
 8005428:	f040 8245 	bne.w	80058b6 <_dtoa_r+0x93e>
 800542c:	9d01      	ldr	r5, [sp, #4]
 800542e:	2331      	movs	r3, #49	; 0x31
 8005430:	f805 3b01 	strb.w	r3, [r5], #1
 8005434:	9b00      	ldr	r3, [sp, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	e240      	b.n	80058be <_dtoa_r+0x946>
 800543c:	07f2      	lsls	r2, r6, #31
 800543e:	d505      	bpl.n	800544c <_dtoa_r+0x4d4>
 8005440:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005444:	f7fb f8f8 	bl	8000638 <__aeabi_dmul>
 8005448:	3501      	adds	r5, #1
 800544a:	2301      	movs	r3, #1
 800544c:	1076      	asrs	r6, r6, #1
 800544e:	3708      	adds	r7, #8
 8005450:	e777      	b.n	8005342 <_dtoa_r+0x3ca>
 8005452:	2502      	movs	r5, #2
 8005454:	e779      	b.n	800534a <_dtoa_r+0x3d2>
 8005456:	9f00      	ldr	r7, [sp, #0]
 8005458:	9e03      	ldr	r6, [sp, #12]
 800545a:	e794      	b.n	8005386 <_dtoa_r+0x40e>
 800545c:	9901      	ldr	r1, [sp, #4]
 800545e:	4b4c      	ldr	r3, [pc, #304]	; (8005590 <_dtoa_r+0x618>)
 8005460:	4431      	add	r1, r6
 8005462:	910d      	str	r1, [sp, #52]	; 0x34
 8005464:	9908      	ldr	r1, [sp, #32]
 8005466:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800546a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800546e:	2900      	cmp	r1, #0
 8005470:	d043      	beq.n	80054fa <_dtoa_r+0x582>
 8005472:	494d      	ldr	r1, [pc, #308]	; (80055a8 <_dtoa_r+0x630>)
 8005474:	2000      	movs	r0, #0
 8005476:	f7fb fa09 	bl	800088c <__aeabi_ddiv>
 800547a:	4652      	mov	r2, sl
 800547c:	465b      	mov	r3, fp
 800547e:	f7fa ff23 	bl	80002c8 <__aeabi_dsub>
 8005482:	9d01      	ldr	r5, [sp, #4]
 8005484:	4682      	mov	sl, r0
 8005486:	468b      	mov	fp, r1
 8005488:	4649      	mov	r1, r9
 800548a:	4640      	mov	r0, r8
 800548c:	f7fb fb84 	bl	8000b98 <__aeabi_d2iz>
 8005490:	4606      	mov	r6, r0
 8005492:	f7fb f867 	bl	8000564 <__aeabi_i2d>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	4640      	mov	r0, r8
 800549c:	4649      	mov	r1, r9
 800549e:	f7fa ff13 	bl	80002c8 <__aeabi_dsub>
 80054a2:	3630      	adds	r6, #48	; 0x30
 80054a4:	f805 6b01 	strb.w	r6, [r5], #1
 80054a8:	4652      	mov	r2, sl
 80054aa:	465b      	mov	r3, fp
 80054ac:	4680      	mov	r8, r0
 80054ae:	4689      	mov	r9, r1
 80054b0:	f7fb fb34 	bl	8000b1c <__aeabi_dcmplt>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	d163      	bne.n	8005580 <_dtoa_r+0x608>
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	4936      	ldr	r1, [pc, #216]	; (8005598 <_dtoa_r+0x620>)
 80054be:	2000      	movs	r0, #0
 80054c0:	f7fa ff02 	bl	80002c8 <__aeabi_dsub>
 80054c4:	4652      	mov	r2, sl
 80054c6:	465b      	mov	r3, fp
 80054c8:	f7fb fb28 	bl	8000b1c <__aeabi_dcmplt>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	f040 80b5 	bne.w	800563c <_dtoa_r+0x6c4>
 80054d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d4:	429d      	cmp	r5, r3
 80054d6:	d081      	beq.n	80053dc <_dtoa_r+0x464>
 80054d8:	4b30      	ldr	r3, [pc, #192]	; (800559c <_dtoa_r+0x624>)
 80054da:	2200      	movs	r2, #0
 80054dc:	4650      	mov	r0, sl
 80054de:	4659      	mov	r1, fp
 80054e0:	f7fb f8aa 	bl	8000638 <__aeabi_dmul>
 80054e4:	4b2d      	ldr	r3, [pc, #180]	; (800559c <_dtoa_r+0x624>)
 80054e6:	4682      	mov	sl, r0
 80054e8:	468b      	mov	fp, r1
 80054ea:	4640      	mov	r0, r8
 80054ec:	4649      	mov	r1, r9
 80054ee:	2200      	movs	r2, #0
 80054f0:	f7fb f8a2 	bl	8000638 <__aeabi_dmul>
 80054f4:	4680      	mov	r8, r0
 80054f6:	4689      	mov	r9, r1
 80054f8:	e7c6      	b.n	8005488 <_dtoa_r+0x510>
 80054fa:	4650      	mov	r0, sl
 80054fc:	4659      	mov	r1, fp
 80054fe:	f7fb f89b 	bl	8000638 <__aeabi_dmul>
 8005502:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005504:	9d01      	ldr	r5, [sp, #4]
 8005506:	930f      	str	r3, [sp, #60]	; 0x3c
 8005508:	4682      	mov	sl, r0
 800550a:	468b      	mov	fp, r1
 800550c:	4649      	mov	r1, r9
 800550e:	4640      	mov	r0, r8
 8005510:	f7fb fb42 	bl	8000b98 <__aeabi_d2iz>
 8005514:	4606      	mov	r6, r0
 8005516:	f7fb f825 	bl	8000564 <__aeabi_i2d>
 800551a:	3630      	adds	r6, #48	; 0x30
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4640      	mov	r0, r8
 8005522:	4649      	mov	r1, r9
 8005524:	f7fa fed0 	bl	80002c8 <__aeabi_dsub>
 8005528:	f805 6b01 	strb.w	r6, [r5], #1
 800552c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800552e:	429d      	cmp	r5, r3
 8005530:	4680      	mov	r8, r0
 8005532:	4689      	mov	r9, r1
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	d124      	bne.n	8005584 <_dtoa_r+0x60c>
 800553a:	4b1b      	ldr	r3, [pc, #108]	; (80055a8 <_dtoa_r+0x630>)
 800553c:	4650      	mov	r0, sl
 800553e:	4659      	mov	r1, fp
 8005540:	f7fa fec4 	bl	80002cc <__adddf3>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	4640      	mov	r0, r8
 800554a:	4649      	mov	r1, r9
 800554c:	f7fb fb04 	bl	8000b58 <__aeabi_dcmpgt>
 8005550:	2800      	cmp	r0, #0
 8005552:	d173      	bne.n	800563c <_dtoa_r+0x6c4>
 8005554:	4652      	mov	r2, sl
 8005556:	465b      	mov	r3, fp
 8005558:	4913      	ldr	r1, [pc, #76]	; (80055a8 <_dtoa_r+0x630>)
 800555a:	2000      	movs	r0, #0
 800555c:	f7fa feb4 	bl	80002c8 <__aeabi_dsub>
 8005560:	4602      	mov	r2, r0
 8005562:	460b      	mov	r3, r1
 8005564:	4640      	mov	r0, r8
 8005566:	4649      	mov	r1, r9
 8005568:	f7fb fad8 	bl	8000b1c <__aeabi_dcmplt>
 800556c:	2800      	cmp	r0, #0
 800556e:	f43f af35 	beq.w	80053dc <_dtoa_r+0x464>
 8005572:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005574:	1e6b      	subs	r3, r5, #1
 8005576:	930f      	str	r3, [sp, #60]	; 0x3c
 8005578:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800557c:	2b30      	cmp	r3, #48	; 0x30
 800557e:	d0f8      	beq.n	8005572 <_dtoa_r+0x5fa>
 8005580:	9700      	str	r7, [sp, #0]
 8005582:	e049      	b.n	8005618 <_dtoa_r+0x6a0>
 8005584:	4b05      	ldr	r3, [pc, #20]	; (800559c <_dtoa_r+0x624>)
 8005586:	f7fb f857 	bl	8000638 <__aeabi_dmul>
 800558a:	4680      	mov	r8, r0
 800558c:	4689      	mov	r9, r1
 800558e:	e7bd      	b.n	800550c <_dtoa_r+0x594>
 8005590:	08007048 	.word	0x08007048
 8005594:	08007020 	.word	0x08007020
 8005598:	3ff00000 	.word	0x3ff00000
 800559c:	40240000 	.word	0x40240000
 80055a0:	401c0000 	.word	0x401c0000
 80055a4:	40140000 	.word	0x40140000
 80055a8:	3fe00000 	.word	0x3fe00000
 80055ac:	9d01      	ldr	r5, [sp, #4]
 80055ae:	4656      	mov	r6, sl
 80055b0:	465f      	mov	r7, fp
 80055b2:	4642      	mov	r2, r8
 80055b4:	464b      	mov	r3, r9
 80055b6:	4630      	mov	r0, r6
 80055b8:	4639      	mov	r1, r7
 80055ba:	f7fb f967 	bl	800088c <__aeabi_ddiv>
 80055be:	f7fb faeb 	bl	8000b98 <__aeabi_d2iz>
 80055c2:	4682      	mov	sl, r0
 80055c4:	f7fa ffce 	bl	8000564 <__aeabi_i2d>
 80055c8:	4642      	mov	r2, r8
 80055ca:	464b      	mov	r3, r9
 80055cc:	f7fb f834 	bl	8000638 <__aeabi_dmul>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4630      	mov	r0, r6
 80055d6:	4639      	mov	r1, r7
 80055d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80055dc:	f7fa fe74 	bl	80002c8 <__aeabi_dsub>
 80055e0:	f805 6b01 	strb.w	r6, [r5], #1
 80055e4:	9e01      	ldr	r6, [sp, #4]
 80055e6:	9f03      	ldr	r7, [sp, #12]
 80055e8:	1bae      	subs	r6, r5, r6
 80055ea:	42b7      	cmp	r7, r6
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	d135      	bne.n	800565e <_dtoa_r+0x6e6>
 80055f2:	f7fa fe6b 	bl	80002cc <__adddf3>
 80055f6:	4642      	mov	r2, r8
 80055f8:	464b      	mov	r3, r9
 80055fa:	4606      	mov	r6, r0
 80055fc:	460f      	mov	r7, r1
 80055fe:	f7fb faab 	bl	8000b58 <__aeabi_dcmpgt>
 8005602:	b9d0      	cbnz	r0, 800563a <_dtoa_r+0x6c2>
 8005604:	4642      	mov	r2, r8
 8005606:	464b      	mov	r3, r9
 8005608:	4630      	mov	r0, r6
 800560a:	4639      	mov	r1, r7
 800560c:	f7fb fa7c 	bl	8000b08 <__aeabi_dcmpeq>
 8005610:	b110      	cbz	r0, 8005618 <_dtoa_r+0x6a0>
 8005612:	f01a 0f01 	tst.w	sl, #1
 8005616:	d110      	bne.n	800563a <_dtoa_r+0x6c2>
 8005618:	4620      	mov	r0, r4
 800561a:	ee18 1a10 	vmov	r1, s16
 800561e:	f000 fd13 	bl	8006048 <_Bfree>
 8005622:	2300      	movs	r3, #0
 8005624:	9800      	ldr	r0, [sp, #0]
 8005626:	702b      	strb	r3, [r5, #0]
 8005628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800562a:	3001      	adds	r0, #1
 800562c:	6018      	str	r0, [r3, #0]
 800562e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005630:	2b00      	cmp	r3, #0
 8005632:	f43f acf1 	beq.w	8005018 <_dtoa_r+0xa0>
 8005636:	601d      	str	r5, [r3, #0]
 8005638:	e4ee      	b.n	8005018 <_dtoa_r+0xa0>
 800563a:	9f00      	ldr	r7, [sp, #0]
 800563c:	462b      	mov	r3, r5
 800563e:	461d      	mov	r5, r3
 8005640:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005644:	2a39      	cmp	r2, #57	; 0x39
 8005646:	d106      	bne.n	8005656 <_dtoa_r+0x6de>
 8005648:	9a01      	ldr	r2, [sp, #4]
 800564a:	429a      	cmp	r2, r3
 800564c:	d1f7      	bne.n	800563e <_dtoa_r+0x6c6>
 800564e:	9901      	ldr	r1, [sp, #4]
 8005650:	2230      	movs	r2, #48	; 0x30
 8005652:	3701      	adds	r7, #1
 8005654:	700a      	strb	r2, [r1, #0]
 8005656:	781a      	ldrb	r2, [r3, #0]
 8005658:	3201      	adds	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
 800565c:	e790      	b.n	8005580 <_dtoa_r+0x608>
 800565e:	4ba6      	ldr	r3, [pc, #664]	; (80058f8 <_dtoa_r+0x980>)
 8005660:	2200      	movs	r2, #0
 8005662:	f7fa ffe9 	bl	8000638 <__aeabi_dmul>
 8005666:	2200      	movs	r2, #0
 8005668:	2300      	movs	r3, #0
 800566a:	4606      	mov	r6, r0
 800566c:	460f      	mov	r7, r1
 800566e:	f7fb fa4b 	bl	8000b08 <__aeabi_dcmpeq>
 8005672:	2800      	cmp	r0, #0
 8005674:	d09d      	beq.n	80055b2 <_dtoa_r+0x63a>
 8005676:	e7cf      	b.n	8005618 <_dtoa_r+0x6a0>
 8005678:	9a08      	ldr	r2, [sp, #32]
 800567a:	2a00      	cmp	r2, #0
 800567c:	f000 80d7 	beq.w	800582e <_dtoa_r+0x8b6>
 8005680:	9a06      	ldr	r2, [sp, #24]
 8005682:	2a01      	cmp	r2, #1
 8005684:	f300 80ba 	bgt.w	80057fc <_dtoa_r+0x884>
 8005688:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800568a:	2a00      	cmp	r2, #0
 800568c:	f000 80b2 	beq.w	80057f4 <_dtoa_r+0x87c>
 8005690:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005694:	9e07      	ldr	r6, [sp, #28]
 8005696:	9d04      	ldr	r5, [sp, #16]
 8005698:	9a04      	ldr	r2, [sp, #16]
 800569a:	441a      	add	r2, r3
 800569c:	9204      	str	r2, [sp, #16]
 800569e:	9a05      	ldr	r2, [sp, #20]
 80056a0:	2101      	movs	r1, #1
 80056a2:	441a      	add	r2, r3
 80056a4:	4620      	mov	r0, r4
 80056a6:	9205      	str	r2, [sp, #20]
 80056a8:	f000 fd86 	bl	80061b8 <__i2b>
 80056ac:	4607      	mov	r7, r0
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	dd0c      	ble.n	80056cc <_dtoa_r+0x754>
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dd09      	ble.n	80056cc <_dtoa_r+0x754>
 80056b8:	42ab      	cmp	r3, r5
 80056ba:	9a04      	ldr	r2, [sp, #16]
 80056bc:	bfa8      	it	ge
 80056be:	462b      	movge	r3, r5
 80056c0:	1ad2      	subs	r2, r2, r3
 80056c2:	9204      	str	r2, [sp, #16]
 80056c4:	9a05      	ldr	r2, [sp, #20]
 80056c6:	1aed      	subs	r5, r5, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	9305      	str	r3, [sp, #20]
 80056cc:	9b07      	ldr	r3, [sp, #28]
 80056ce:	b31b      	cbz	r3, 8005718 <_dtoa_r+0x7a0>
 80056d0:	9b08      	ldr	r3, [sp, #32]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 80af 	beq.w	8005836 <_dtoa_r+0x8be>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	dd13      	ble.n	8005704 <_dtoa_r+0x78c>
 80056dc:	4639      	mov	r1, r7
 80056de:	4632      	mov	r2, r6
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 fe29 	bl	8006338 <__pow5mult>
 80056e6:	ee18 2a10 	vmov	r2, s16
 80056ea:	4601      	mov	r1, r0
 80056ec:	4607      	mov	r7, r0
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 fd78 	bl	80061e4 <__multiply>
 80056f4:	ee18 1a10 	vmov	r1, s16
 80056f8:	4680      	mov	r8, r0
 80056fa:	4620      	mov	r0, r4
 80056fc:	f000 fca4 	bl	8006048 <_Bfree>
 8005700:	ee08 8a10 	vmov	s16, r8
 8005704:	9b07      	ldr	r3, [sp, #28]
 8005706:	1b9a      	subs	r2, r3, r6
 8005708:	d006      	beq.n	8005718 <_dtoa_r+0x7a0>
 800570a:	ee18 1a10 	vmov	r1, s16
 800570e:	4620      	mov	r0, r4
 8005710:	f000 fe12 	bl	8006338 <__pow5mult>
 8005714:	ee08 0a10 	vmov	s16, r0
 8005718:	2101      	movs	r1, #1
 800571a:	4620      	mov	r0, r4
 800571c:	f000 fd4c 	bl	80061b8 <__i2b>
 8005720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005722:	2b00      	cmp	r3, #0
 8005724:	4606      	mov	r6, r0
 8005726:	f340 8088 	ble.w	800583a <_dtoa_r+0x8c2>
 800572a:	461a      	mov	r2, r3
 800572c:	4601      	mov	r1, r0
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fe02 	bl	8006338 <__pow5mult>
 8005734:	9b06      	ldr	r3, [sp, #24]
 8005736:	2b01      	cmp	r3, #1
 8005738:	4606      	mov	r6, r0
 800573a:	f340 8081 	ble.w	8005840 <_dtoa_r+0x8c8>
 800573e:	f04f 0800 	mov.w	r8, #0
 8005742:	6933      	ldr	r3, [r6, #16]
 8005744:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005748:	6918      	ldr	r0, [r3, #16]
 800574a:	f000 fce5 	bl	8006118 <__hi0bits>
 800574e:	f1c0 0020 	rsb	r0, r0, #32
 8005752:	9b05      	ldr	r3, [sp, #20]
 8005754:	4418      	add	r0, r3
 8005756:	f010 001f 	ands.w	r0, r0, #31
 800575a:	f000 8092 	beq.w	8005882 <_dtoa_r+0x90a>
 800575e:	f1c0 0320 	rsb	r3, r0, #32
 8005762:	2b04      	cmp	r3, #4
 8005764:	f340 808a 	ble.w	800587c <_dtoa_r+0x904>
 8005768:	f1c0 001c 	rsb	r0, r0, #28
 800576c:	9b04      	ldr	r3, [sp, #16]
 800576e:	4403      	add	r3, r0
 8005770:	9304      	str	r3, [sp, #16]
 8005772:	9b05      	ldr	r3, [sp, #20]
 8005774:	4403      	add	r3, r0
 8005776:	4405      	add	r5, r0
 8005778:	9305      	str	r3, [sp, #20]
 800577a:	9b04      	ldr	r3, [sp, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	dd07      	ble.n	8005790 <_dtoa_r+0x818>
 8005780:	ee18 1a10 	vmov	r1, s16
 8005784:	461a      	mov	r2, r3
 8005786:	4620      	mov	r0, r4
 8005788:	f000 fe30 	bl	80063ec <__lshift>
 800578c:	ee08 0a10 	vmov	s16, r0
 8005790:	9b05      	ldr	r3, [sp, #20]
 8005792:	2b00      	cmp	r3, #0
 8005794:	dd05      	ble.n	80057a2 <_dtoa_r+0x82a>
 8005796:	4631      	mov	r1, r6
 8005798:	461a      	mov	r2, r3
 800579a:	4620      	mov	r0, r4
 800579c:	f000 fe26 	bl	80063ec <__lshift>
 80057a0:	4606      	mov	r6, r0
 80057a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d06e      	beq.n	8005886 <_dtoa_r+0x90e>
 80057a8:	ee18 0a10 	vmov	r0, s16
 80057ac:	4631      	mov	r1, r6
 80057ae:	f000 fe8d 	bl	80064cc <__mcmp>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	da67      	bge.n	8005886 <_dtoa_r+0x90e>
 80057b6:	9b00      	ldr	r3, [sp, #0]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	ee18 1a10 	vmov	r1, s16
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	220a      	movs	r2, #10
 80057c2:	2300      	movs	r3, #0
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fc61 	bl	800608c <__multadd>
 80057ca:	9b08      	ldr	r3, [sp, #32]
 80057cc:	ee08 0a10 	vmov	s16, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 81b1 	beq.w	8005b38 <_dtoa_r+0xbc0>
 80057d6:	2300      	movs	r3, #0
 80057d8:	4639      	mov	r1, r7
 80057da:	220a      	movs	r2, #10
 80057dc:	4620      	mov	r0, r4
 80057de:	f000 fc55 	bl	800608c <__multadd>
 80057e2:	9b02      	ldr	r3, [sp, #8]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	4607      	mov	r7, r0
 80057e8:	f300 808e 	bgt.w	8005908 <_dtoa_r+0x990>
 80057ec:	9b06      	ldr	r3, [sp, #24]
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	dc51      	bgt.n	8005896 <_dtoa_r+0x91e>
 80057f2:	e089      	b.n	8005908 <_dtoa_r+0x990>
 80057f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80057fa:	e74b      	b.n	8005694 <_dtoa_r+0x71c>
 80057fc:	9b03      	ldr	r3, [sp, #12]
 80057fe:	1e5e      	subs	r6, r3, #1
 8005800:	9b07      	ldr	r3, [sp, #28]
 8005802:	42b3      	cmp	r3, r6
 8005804:	bfbf      	itttt	lt
 8005806:	9b07      	ldrlt	r3, [sp, #28]
 8005808:	9607      	strlt	r6, [sp, #28]
 800580a:	1af2      	sublt	r2, r6, r3
 800580c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800580e:	bfb6      	itet	lt
 8005810:	189b      	addlt	r3, r3, r2
 8005812:	1b9e      	subge	r6, r3, r6
 8005814:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	bfb8      	it	lt
 800581a:	2600      	movlt	r6, #0
 800581c:	2b00      	cmp	r3, #0
 800581e:	bfb7      	itett	lt
 8005820:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005824:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005828:	1a9d      	sublt	r5, r3, r2
 800582a:	2300      	movlt	r3, #0
 800582c:	e734      	b.n	8005698 <_dtoa_r+0x720>
 800582e:	9e07      	ldr	r6, [sp, #28]
 8005830:	9d04      	ldr	r5, [sp, #16]
 8005832:	9f08      	ldr	r7, [sp, #32]
 8005834:	e73b      	b.n	80056ae <_dtoa_r+0x736>
 8005836:	9a07      	ldr	r2, [sp, #28]
 8005838:	e767      	b.n	800570a <_dtoa_r+0x792>
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	2b01      	cmp	r3, #1
 800583e:	dc18      	bgt.n	8005872 <_dtoa_r+0x8fa>
 8005840:	f1ba 0f00 	cmp.w	sl, #0
 8005844:	d115      	bne.n	8005872 <_dtoa_r+0x8fa>
 8005846:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800584a:	b993      	cbnz	r3, 8005872 <_dtoa_r+0x8fa>
 800584c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005850:	0d1b      	lsrs	r3, r3, #20
 8005852:	051b      	lsls	r3, r3, #20
 8005854:	b183      	cbz	r3, 8005878 <_dtoa_r+0x900>
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	9b05      	ldr	r3, [sp, #20]
 800585e:	3301      	adds	r3, #1
 8005860:	9305      	str	r3, [sp, #20]
 8005862:	f04f 0801 	mov.w	r8, #1
 8005866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005868:	2b00      	cmp	r3, #0
 800586a:	f47f af6a 	bne.w	8005742 <_dtoa_r+0x7ca>
 800586e:	2001      	movs	r0, #1
 8005870:	e76f      	b.n	8005752 <_dtoa_r+0x7da>
 8005872:	f04f 0800 	mov.w	r8, #0
 8005876:	e7f6      	b.n	8005866 <_dtoa_r+0x8ee>
 8005878:	4698      	mov	r8, r3
 800587a:	e7f4      	b.n	8005866 <_dtoa_r+0x8ee>
 800587c:	f43f af7d 	beq.w	800577a <_dtoa_r+0x802>
 8005880:	4618      	mov	r0, r3
 8005882:	301c      	adds	r0, #28
 8005884:	e772      	b.n	800576c <_dtoa_r+0x7f4>
 8005886:	9b03      	ldr	r3, [sp, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	dc37      	bgt.n	80058fc <_dtoa_r+0x984>
 800588c:	9b06      	ldr	r3, [sp, #24]
 800588e:	2b02      	cmp	r3, #2
 8005890:	dd34      	ble.n	80058fc <_dtoa_r+0x984>
 8005892:	9b03      	ldr	r3, [sp, #12]
 8005894:	9302      	str	r3, [sp, #8]
 8005896:	9b02      	ldr	r3, [sp, #8]
 8005898:	b96b      	cbnz	r3, 80058b6 <_dtoa_r+0x93e>
 800589a:	4631      	mov	r1, r6
 800589c:	2205      	movs	r2, #5
 800589e:	4620      	mov	r0, r4
 80058a0:	f000 fbf4 	bl	800608c <__multadd>
 80058a4:	4601      	mov	r1, r0
 80058a6:	4606      	mov	r6, r0
 80058a8:	ee18 0a10 	vmov	r0, s16
 80058ac:	f000 fe0e 	bl	80064cc <__mcmp>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	f73f adbb 	bgt.w	800542c <_dtoa_r+0x4b4>
 80058b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b8:	9d01      	ldr	r5, [sp, #4]
 80058ba:	43db      	mvns	r3, r3
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	f04f 0800 	mov.w	r8, #0
 80058c2:	4631      	mov	r1, r6
 80058c4:	4620      	mov	r0, r4
 80058c6:	f000 fbbf 	bl	8006048 <_Bfree>
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	f43f aea4 	beq.w	8005618 <_dtoa_r+0x6a0>
 80058d0:	f1b8 0f00 	cmp.w	r8, #0
 80058d4:	d005      	beq.n	80058e2 <_dtoa_r+0x96a>
 80058d6:	45b8      	cmp	r8, r7
 80058d8:	d003      	beq.n	80058e2 <_dtoa_r+0x96a>
 80058da:	4641      	mov	r1, r8
 80058dc:	4620      	mov	r0, r4
 80058de:	f000 fbb3 	bl	8006048 <_Bfree>
 80058e2:	4639      	mov	r1, r7
 80058e4:	4620      	mov	r0, r4
 80058e6:	f000 fbaf 	bl	8006048 <_Bfree>
 80058ea:	e695      	b.n	8005618 <_dtoa_r+0x6a0>
 80058ec:	2600      	movs	r6, #0
 80058ee:	4637      	mov	r7, r6
 80058f0:	e7e1      	b.n	80058b6 <_dtoa_r+0x93e>
 80058f2:	9700      	str	r7, [sp, #0]
 80058f4:	4637      	mov	r7, r6
 80058f6:	e599      	b.n	800542c <_dtoa_r+0x4b4>
 80058f8:	40240000 	.word	0x40240000
 80058fc:	9b08      	ldr	r3, [sp, #32]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 80ca 	beq.w	8005a98 <_dtoa_r+0xb20>
 8005904:	9b03      	ldr	r3, [sp, #12]
 8005906:	9302      	str	r3, [sp, #8]
 8005908:	2d00      	cmp	r5, #0
 800590a:	dd05      	ble.n	8005918 <_dtoa_r+0x9a0>
 800590c:	4639      	mov	r1, r7
 800590e:	462a      	mov	r2, r5
 8005910:	4620      	mov	r0, r4
 8005912:	f000 fd6b 	bl	80063ec <__lshift>
 8005916:	4607      	mov	r7, r0
 8005918:	f1b8 0f00 	cmp.w	r8, #0
 800591c:	d05b      	beq.n	80059d6 <_dtoa_r+0xa5e>
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4620      	mov	r0, r4
 8005922:	f000 fb51 	bl	8005fc8 <_Balloc>
 8005926:	4605      	mov	r5, r0
 8005928:	b928      	cbnz	r0, 8005936 <_dtoa_r+0x9be>
 800592a:	4b87      	ldr	r3, [pc, #540]	; (8005b48 <_dtoa_r+0xbd0>)
 800592c:	4602      	mov	r2, r0
 800592e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005932:	f7ff bb3b 	b.w	8004fac <_dtoa_r+0x34>
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	3202      	adds	r2, #2
 800593a:	0092      	lsls	r2, r2, #2
 800593c:	f107 010c 	add.w	r1, r7, #12
 8005940:	300c      	adds	r0, #12
 8005942:	f000 fb33 	bl	8005fac <memcpy>
 8005946:	2201      	movs	r2, #1
 8005948:	4629      	mov	r1, r5
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fd4e 	bl	80063ec <__lshift>
 8005950:	9b01      	ldr	r3, [sp, #4]
 8005952:	f103 0901 	add.w	r9, r3, #1
 8005956:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800595a:	4413      	add	r3, r2
 800595c:	9305      	str	r3, [sp, #20]
 800595e:	f00a 0301 	and.w	r3, sl, #1
 8005962:	46b8      	mov	r8, r7
 8005964:	9304      	str	r3, [sp, #16]
 8005966:	4607      	mov	r7, r0
 8005968:	4631      	mov	r1, r6
 800596a:	ee18 0a10 	vmov	r0, s16
 800596e:	f7ff fa75 	bl	8004e5c <quorem>
 8005972:	4641      	mov	r1, r8
 8005974:	9002      	str	r0, [sp, #8]
 8005976:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800597a:	ee18 0a10 	vmov	r0, s16
 800597e:	f000 fda5 	bl	80064cc <__mcmp>
 8005982:	463a      	mov	r2, r7
 8005984:	9003      	str	r0, [sp, #12]
 8005986:	4631      	mov	r1, r6
 8005988:	4620      	mov	r0, r4
 800598a:	f000 fdbb 	bl	8006504 <__mdiff>
 800598e:	68c2      	ldr	r2, [r0, #12]
 8005990:	f109 3bff 	add.w	fp, r9, #4294967295
 8005994:	4605      	mov	r5, r0
 8005996:	bb02      	cbnz	r2, 80059da <_dtoa_r+0xa62>
 8005998:	4601      	mov	r1, r0
 800599a:	ee18 0a10 	vmov	r0, s16
 800599e:	f000 fd95 	bl	80064cc <__mcmp>
 80059a2:	4602      	mov	r2, r0
 80059a4:	4629      	mov	r1, r5
 80059a6:	4620      	mov	r0, r4
 80059a8:	9207      	str	r2, [sp, #28]
 80059aa:	f000 fb4d 	bl	8006048 <_Bfree>
 80059ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80059b2:	ea43 0102 	orr.w	r1, r3, r2
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	430b      	orrs	r3, r1
 80059ba:	464d      	mov	r5, r9
 80059bc:	d10f      	bne.n	80059de <_dtoa_r+0xa66>
 80059be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80059c2:	d02a      	beq.n	8005a1a <_dtoa_r+0xaa2>
 80059c4:	9b03      	ldr	r3, [sp, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	dd02      	ble.n	80059d0 <_dtoa_r+0xa58>
 80059ca:	9b02      	ldr	r3, [sp, #8]
 80059cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80059d0:	f88b a000 	strb.w	sl, [fp]
 80059d4:	e775      	b.n	80058c2 <_dtoa_r+0x94a>
 80059d6:	4638      	mov	r0, r7
 80059d8:	e7ba      	b.n	8005950 <_dtoa_r+0x9d8>
 80059da:	2201      	movs	r2, #1
 80059dc:	e7e2      	b.n	80059a4 <_dtoa_r+0xa2c>
 80059de:	9b03      	ldr	r3, [sp, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	db04      	blt.n	80059ee <_dtoa_r+0xa76>
 80059e4:	9906      	ldr	r1, [sp, #24]
 80059e6:	430b      	orrs	r3, r1
 80059e8:	9904      	ldr	r1, [sp, #16]
 80059ea:	430b      	orrs	r3, r1
 80059ec:	d122      	bne.n	8005a34 <_dtoa_r+0xabc>
 80059ee:	2a00      	cmp	r2, #0
 80059f0:	ddee      	ble.n	80059d0 <_dtoa_r+0xa58>
 80059f2:	ee18 1a10 	vmov	r1, s16
 80059f6:	2201      	movs	r2, #1
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 fcf7 	bl	80063ec <__lshift>
 80059fe:	4631      	mov	r1, r6
 8005a00:	ee08 0a10 	vmov	s16, r0
 8005a04:	f000 fd62 	bl	80064cc <__mcmp>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	dc03      	bgt.n	8005a14 <_dtoa_r+0xa9c>
 8005a0c:	d1e0      	bne.n	80059d0 <_dtoa_r+0xa58>
 8005a0e:	f01a 0f01 	tst.w	sl, #1
 8005a12:	d0dd      	beq.n	80059d0 <_dtoa_r+0xa58>
 8005a14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a18:	d1d7      	bne.n	80059ca <_dtoa_r+0xa52>
 8005a1a:	2339      	movs	r3, #57	; 0x39
 8005a1c:	f88b 3000 	strb.w	r3, [fp]
 8005a20:	462b      	mov	r3, r5
 8005a22:	461d      	mov	r5, r3
 8005a24:	3b01      	subs	r3, #1
 8005a26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a2a:	2a39      	cmp	r2, #57	; 0x39
 8005a2c:	d071      	beq.n	8005b12 <_dtoa_r+0xb9a>
 8005a2e:	3201      	adds	r2, #1
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e746      	b.n	80058c2 <_dtoa_r+0x94a>
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	dd07      	ble.n	8005a48 <_dtoa_r+0xad0>
 8005a38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005a3c:	d0ed      	beq.n	8005a1a <_dtoa_r+0xaa2>
 8005a3e:	f10a 0301 	add.w	r3, sl, #1
 8005a42:	f88b 3000 	strb.w	r3, [fp]
 8005a46:	e73c      	b.n	80058c2 <_dtoa_r+0x94a>
 8005a48:	9b05      	ldr	r3, [sp, #20]
 8005a4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005a4e:	4599      	cmp	r9, r3
 8005a50:	d047      	beq.n	8005ae2 <_dtoa_r+0xb6a>
 8005a52:	ee18 1a10 	vmov	r1, s16
 8005a56:	2300      	movs	r3, #0
 8005a58:	220a      	movs	r2, #10
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 fb16 	bl	800608c <__multadd>
 8005a60:	45b8      	cmp	r8, r7
 8005a62:	ee08 0a10 	vmov	s16, r0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	f04f 020a 	mov.w	r2, #10
 8005a6e:	4641      	mov	r1, r8
 8005a70:	4620      	mov	r0, r4
 8005a72:	d106      	bne.n	8005a82 <_dtoa_r+0xb0a>
 8005a74:	f000 fb0a 	bl	800608c <__multadd>
 8005a78:	4680      	mov	r8, r0
 8005a7a:	4607      	mov	r7, r0
 8005a7c:	f109 0901 	add.w	r9, r9, #1
 8005a80:	e772      	b.n	8005968 <_dtoa_r+0x9f0>
 8005a82:	f000 fb03 	bl	800608c <__multadd>
 8005a86:	4639      	mov	r1, r7
 8005a88:	4680      	mov	r8, r0
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	220a      	movs	r2, #10
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fafc 	bl	800608c <__multadd>
 8005a94:	4607      	mov	r7, r0
 8005a96:	e7f1      	b.n	8005a7c <_dtoa_r+0xb04>
 8005a98:	9b03      	ldr	r3, [sp, #12]
 8005a9a:	9302      	str	r3, [sp, #8]
 8005a9c:	9d01      	ldr	r5, [sp, #4]
 8005a9e:	ee18 0a10 	vmov	r0, s16
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	f7ff f9da 	bl	8004e5c <quorem>
 8005aa8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005aac:	9b01      	ldr	r3, [sp, #4]
 8005aae:	f805 ab01 	strb.w	sl, [r5], #1
 8005ab2:	1aea      	subs	r2, r5, r3
 8005ab4:	9b02      	ldr	r3, [sp, #8]
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	dd09      	ble.n	8005ace <_dtoa_r+0xb56>
 8005aba:	ee18 1a10 	vmov	r1, s16
 8005abe:	2300      	movs	r3, #0
 8005ac0:	220a      	movs	r2, #10
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	f000 fae2 	bl	800608c <__multadd>
 8005ac8:	ee08 0a10 	vmov	s16, r0
 8005acc:	e7e7      	b.n	8005a9e <_dtoa_r+0xb26>
 8005ace:	9b02      	ldr	r3, [sp, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	bfc8      	it	gt
 8005ad4:	461d      	movgt	r5, r3
 8005ad6:	9b01      	ldr	r3, [sp, #4]
 8005ad8:	bfd8      	it	le
 8005ada:	2501      	movle	r5, #1
 8005adc:	441d      	add	r5, r3
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	ee18 1a10 	vmov	r1, s16
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f000 fc7f 	bl	80063ec <__lshift>
 8005aee:	4631      	mov	r1, r6
 8005af0:	ee08 0a10 	vmov	s16, r0
 8005af4:	f000 fcea 	bl	80064cc <__mcmp>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	dc91      	bgt.n	8005a20 <_dtoa_r+0xaa8>
 8005afc:	d102      	bne.n	8005b04 <_dtoa_r+0xb8c>
 8005afe:	f01a 0f01 	tst.w	sl, #1
 8005b02:	d18d      	bne.n	8005a20 <_dtoa_r+0xaa8>
 8005b04:	462b      	mov	r3, r5
 8005b06:	461d      	mov	r5, r3
 8005b08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b0c:	2a30      	cmp	r2, #48	; 0x30
 8005b0e:	d0fa      	beq.n	8005b06 <_dtoa_r+0xb8e>
 8005b10:	e6d7      	b.n	80058c2 <_dtoa_r+0x94a>
 8005b12:	9a01      	ldr	r2, [sp, #4]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d184      	bne.n	8005a22 <_dtoa_r+0xaaa>
 8005b18:	9b00      	ldr	r3, [sp, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	2331      	movs	r3, #49	; 0x31
 8005b20:	7013      	strb	r3, [r2, #0]
 8005b22:	e6ce      	b.n	80058c2 <_dtoa_r+0x94a>
 8005b24:	4b09      	ldr	r3, [pc, #36]	; (8005b4c <_dtoa_r+0xbd4>)
 8005b26:	f7ff ba95 	b.w	8005054 <_dtoa_r+0xdc>
 8005b2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f47f aa6e 	bne.w	800500e <_dtoa_r+0x96>
 8005b32:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <_dtoa_r+0xbd8>)
 8005b34:	f7ff ba8e 	b.w	8005054 <_dtoa_r+0xdc>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dcae      	bgt.n	8005a9c <_dtoa_r+0xb24>
 8005b3e:	9b06      	ldr	r3, [sp, #24]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	f73f aea8 	bgt.w	8005896 <_dtoa_r+0x91e>
 8005b46:	e7a9      	b.n	8005a9c <_dtoa_r+0xb24>
 8005b48:	08006f53 	.word	0x08006f53
 8005b4c:	08006eb0 	.word	0x08006eb0
 8005b50:	08006ed4 	.word	0x08006ed4

08005b54 <__sflush_r>:
 8005b54:	898a      	ldrh	r2, [r1, #12]
 8005b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	0710      	lsls	r0, r2, #28
 8005b5e:	460c      	mov	r4, r1
 8005b60:	d458      	bmi.n	8005c14 <__sflush_r+0xc0>
 8005b62:	684b      	ldr	r3, [r1, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	dc05      	bgt.n	8005b74 <__sflush_r+0x20>
 8005b68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	dc02      	bgt.n	8005b74 <__sflush_r+0x20>
 8005b6e:	2000      	movs	r0, #0
 8005b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b76:	2e00      	cmp	r6, #0
 8005b78:	d0f9      	beq.n	8005b6e <__sflush_r+0x1a>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b80:	682f      	ldr	r7, [r5, #0]
 8005b82:	602b      	str	r3, [r5, #0]
 8005b84:	d032      	beq.n	8005bec <__sflush_r+0x98>
 8005b86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	075a      	lsls	r2, r3, #29
 8005b8c:	d505      	bpl.n	8005b9a <__sflush_r+0x46>
 8005b8e:	6863      	ldr	r3, [r4, #4]
 8005b90:	1ac0      	subs	r0, r0, r3
 8005b92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b94:	b10b      	cbz	r3, 8005b9a <__sflush_r+0x46>
 8005b96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b98:	1ac0      	subs	r0, r0, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ba0:	6a21      	ldr	r1, [r4, #32]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	47b0      	blx	r6
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	89a3      	ldrh	r3, [r4, #12]
 8005baa:	d106      	bne.n	8005bba <__sflush_r+0x66>
 8005bac:	6829      	ldr	r1, [r5, #0]
 8005bae:	291d      	cmp	r1, #29
 8005bb0:	d82c      	bhi.n	8005c0c <__sflush_r+0xb8>
 8005bb2:	4a2a      	ldr	r2, [pc, #168]	; (8005c5c <__sflush_r+0x108>)
 8005bb4:	40ca      	lsrs	r2, r1
 8005bb6:	07d6      	lsls	r6, r2, #31
 8005bb8:	d528      	bpl.n	8005c0c <__sflush_r+0xb8>
 8005bba:	2200      	movs	r2, #0
 8005bbc:	6062      	str	r2, [r4, #4]
 8005bbe:	04d9      	lsls	r1, r3, #19
 8005bc0:	6922      	ldr	r2, [r4, #16]
 8005bc2:	6022      	str	r2, [r4, #0]
 8005bc4:	d504      	bpl.n	8005bd0 <__sflush_r+0x7c>
 8005bc6:	1c42      	adds	r2, r0, #1
 8005bc8:	d101      	bne.n	8005bce <__sflush_r+0x7a>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	b903      	cbnz	r3, 8005bd0 <__sflush_r+0x7c>
 8005bce:	6560      	str	r0, [r4, #84]	; 0x54
 8005bd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bd2:	602f      	str	r7, [r5, #0]
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	d0ca      	beq.n	8005b6e <__sflush_r+0x1a>
 8005bd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bdc:	4299      	cmp	r1, r3
 8005bde:	d002      	beq.n	8005be6 <__sflush_r+0x92>
 8005be0:	4628      	mov	r0, r5
 8005be2:	f000 fd8b 	bl	80066fc <_free_r>
 8005be6:	2000      	movs	r0, #0
 8005be8:	6360      	str	r0, [r4, #52]	; 0x34
 8005bea:	e7c1      	b.n	8005b70 <__sflush_r+0x1c>
 8005bec:	6a21      	ldr	r1, [r4, #32]
 8005bee:	2301      	movs	r3, #1
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	47b0      	blx	r6
 8005bf4:	1c41      	adds	r1, r0, #1
 8005bf6:	d1c7      	bne.n	8005b88 <__sflush_r+0x34>
 8005bf8:	682b      	ldr	r3, [r5, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0c4      	beq.n	8005b88 <__sflush_r+0x34>
 8005bfe:	2b1d      	cmp	r3, #29
 8005c00:	d001      	beq.n	8005c06 <__sflush_r+0xb2>
 8005c02:	2b16      	cmp	r3, #22
 8005c04:	d101      	bne.n	8005c0a <__sflush_r+0xb6>
 8005c06:	602f      	str	r7, [r5, #0]
 8005c08:	e7b1      	b.n	8005b6e <__sflush_r+0x1a>
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	e7ad      	b.n	8005b70 <__sflush_r+0x1c>
 8005c14:	690f      	ldr	r7, [r1, #16]
 8005c16:	2f00      	cmp	r7, #0
 8005c18:	d0a9      	beq.n	8005b6e <__sflush_r+0x1a>
 8005c1a:	0793      	lsls	r3, r2, #30
 8005c1c:	680e      	ldr	r6, [r1, #0]
 8005c1e:	bf08      	it	eq
 8005c20:	694b      	ldreq	r3, [r1, #20]
 8005c22:	600f      	str	r7, [r1, #0]
 8005c24:	bf18      	it	ne
 8005c26:	2300      	movne	r3, #0
 8005c28:	eba6 0807 	sub.w	r8, r6, r7
 8005c2c:	608b      	str	r3, [r1, #8]
 8005c2e:	f1b8 0f00 	cmp.w	r8, #0
 8005c32:	dd9c      	ble.n	8005b6e <__sflush_r+0x1a>
 8005c34:	6a21      	ldr	r1, [r4, #32]
 8005c36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c38:	4643      	mov	r3, r8
 8005c3a:	463a      	mov	r2, r7
 8005c3c:	4628      	mov	r0, r5
 8005c3e:	47b0      	blx	r6
 8005c40:	2800      	cmp	r0, #0
 8005c42:	dc06      	bgt.n	8005c52 <__sflush_r+0xfe>
 8005c44:	89a3      	ldrh	r3, [r4, #12]
 8005c46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4a:	81a3      	strh	r3, [r4, #12]
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e78e      	b.n	8005b70 <__sflush_r+0x1c>
 8005c52:	4407      	add	r7, r0
 8005c54:	eba8 0800 	sub.w	r8, r8, r0
 8005c58:	e7e9      	b.n	8005c2e <__sflush_r+0xda>
 8005c5a:	bf00      	nop
 8005c5c:	20400001 	.word	0x20400001

08005c60 <_fflush_r>:
 8005c60:	b538      	push	{r3, r4, r5, lr}
 8005c62:	690b      	ldr	r3, [r1, #16]
 8005c64:	4605      	mov	r5, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b913      	cbnz	r3, 8005c70 <_fflush_r+0x10>
 8005c6a:	2500      	movs	r5, #0
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	bd38      	pop	{r3, r4, r5, pc}
 8005c70:	b118      	cbz	r0, 8005c7a <_fflush_r+0x1a>
 8005c72:	6983      	ldr	r3, [r0, #24]
 8005c74:	b90b      	cbnz	r3, 8005c7a <_fflush_r+0x1a>
 8005c76:	f000 f887 	bl	8005d88 <__sinit>
 8005c7a:	4b14      	ldr	r3, [pc, #80]	; (8005ccc <_fflush_r+0x6c>)
 8005c7c:	429c      	cmp	r4, r3
 8005c7e:	d11b      	bne.n	8005cb8 <_fflush_r+0x58>
 8005c80:	686c      	ldr	r4, [r5, #4]
 8005c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d0ef      	beq.n	8005c6a <_fflush_r+0xa>
 8005c8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c8c:	07d0      	lsls	r0, r2, #31
 8005c8e:	d404      	bmi.n	8005c9a <_fflush_r+0x3a>
 8005c90:	0599      	lsls	r1, r3, #22
 8005c92:	d402      	bmi.n	8005c9a <_fflush_r+0x3a>
 8005c94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c96:	f000 f91a 	bl	8005ece <__retarget_lock_acquire_recursive>
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	f7ff ff59 	bl	8005b54 <__sflush_r>
 8005ca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ca4:	07da      	lsls	r2, r3, #31
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	d4e0      	bmi.n	8005c6c <_fflush_r+0xc>
 8005caa:	89a3      	ldrh	r3, [r4, #12]
 8005cac:	059b      	lsls	r3, r3, #22
 8005cae:	d4dd      	bmi.n	8005c6c <_fflush_r+0xc>
 8005cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cb2:	f000 f90d 	bl	8005ed0 <__retarget_lock_release_recursive>
 8005cb6:	e7d9      	b.n	8005c6c <_fflush_r+0xc>
 8005cb8:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <_fflush_r+0x70>)
 8005cba:	429c      	cmp	r4, r3
 8005cbc:	d101      	bne.n	8005cc2 <_fflush_r+0x62>
 8005cbe:	68ac      	ldr	r4, [r5, #8]
 8005cc0:	e7df      	b.n	8005c82 <_fflush_r+0x22>
 8005cc2:	4b04      	ldr	r3, [pc, #16]	; (8005cd4 <_fflush_r+0x74>)
 8005cc4:	429c      	cmp	r4, r3
 8005cc6:	bf08      	it	eq
 8005cc8:	68ec      	ldreq	r4, [r5, #12]
 8005cca:	e7da      	b.n	8005c82 <_fflush_r+0x22>
 8005ccc:	08006f84 	.word	0x08006f84
 8005cd0:	08006fa4 	.word	0x08006fa4
 8005cd4:	08006f64 	.word	0x08006f64

08005cd8 <std>:
 8005cd8:	2300      	movs	r3, #0
 8005cda:	b510      	push	{r4, lr}
 8005cdc:	4604      	mov	r4, r0
 8005cde:	e9c0 3300 	strd	r3, r3, [r0]
 8005ce2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ce6:	6083      	str	r3, [r0, #8]
 8005ce8:	8181      	strh	r1, [r0, #12]
 8005cea:	6643      	str	r3, [r0, #100]	; 0x64
 8005cec:	81c2      	strh	r2, [r0, #14]
 8005cee:	6183      	str	r3, [r0, #24]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	2208      	movs	r2, #8
 8005cf4:	305c      	adds	r0, #92	; 0x5c
 8005cf6:	f7fe faf1 	bl	80042dc <memset>
 8005cfa:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <std+0x38>)
 8005cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8005cfe:	4b05      	ldr	r3, [pc, #20]	; (8005d14 <std+0x3c>)
 8005d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <std+0x40>)
 8005d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d06:	4b05      	ldr	r3, [pc, #20]	; (8005d1c <std+0x44>)
 8005d08:	6224      	str	r4, [r4, #32]
 8005d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8005d0c:	bd10      	pop	{r4, pc}
 8005d0e:	bf00      	nop
 8005d10:	08006b91 	.word	0x08006b91
 8005d14:	08006bb3 	.word	0x08006bb3
 8005d18:	08006beb 	.word	0x08006beb
 8005d1c:	08006c0f 	.word	0x08006c0f

08005d20 <_cleanup_r>:
 8005d20:	4901      	ldr	r1, [pc, #4]	; (8005d28 <_cleanup_r+0x8>)
 8005d22:	f000 b8af 	b.w	8005e84 <_fwalk_reent>
 8005d26:	bf00      	nop
 8005d28:	08005c61 	.word	0x08005c61

08005d2c <__sfmoreglue>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	2268      	movs	r2, #104	; 0x68
 8005d30:	1e4d      	subs	r5, r1, #1
 8005d32:	4355      	muls	r5, r2
 8005d34:	460e      	mov	r6, r1
 8005d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d3a:	f000 fd4b 	bl	80067d4 <_malloc_r>
 8005d3e:	4604      	mov	r4, r0
 8005d40:	b140      	cbz	r0, 8005d54 <__sfmoreglue+0x28>
 8005d42:	2100      	movs	r1, #0
 8005d44:	e9c0 1600 	strd	r1, r6, [r0]
 8005d48:	300c      	adds	r0, #12
 8005d4a:	60a0      	str	r0, [r4, #8]
 8005d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d50:	f7fe fac4 	bl	80042dc <memset>
 8005d54:	4620      	mov	r0, r4
 8005d56:	bd70      	pop	{r4, r5, r6, pc}

08005d58 <__sfp_lock_acquire>:
 8005d58:	4801      	ldr	r0, [pc, #4]	; (8005d60 <__sfp_lock_acquire+0x8>)
 8005d5a:	f000 b8b8 	b.w	8005ece <__retarget_lock_acquire_recursive>
 8005d5e:	bf00      	nop
 8005d60:	20000389 	.word	0x20000389

08005d64 <__sfp_lock_release>:
 8005d64:	4801      	ldr	r0, [pc, #4]	; (8005d6c <__sfp_lock_release+0x8>)
 8005d66:	f000 b8b3 	b.w	8005ed0 <__retarget_lock_release_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	20000389 	.word	0x20000389

08005d70 <__sinit_lock_acquire>:
 8005d70:	4801      	ldr	r0, [pc, #4]	; (8005d78 <__sinit_lock_acquire+0x8>)
 8005d72:	f000 b8ac 	b.w	8005ece <__retarget_lock_acquire_recursive>
 8005d76:	bf00      	nop
 8005d78:	2000038a 	.word	0x2000038a

08005d7c <__sinit_lock_release>:
 8005d7c:	4801      	ldr	r0, [pc, #4]	; (8005d84 <__sinit_lock_release+0x8>)
 8005d7e:	f000 b8a7 	b.w	8005ed0 <__retarget_lock_release_recursive>
 8005d82:	bf00      	nop
 8005d84:	2000038a 	.word	0x2000038a

08005d88 <__sinit>:
 8005d88:	b510      	push	{r4, lr}
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	f7ff fff0 	bl	8005d70 <__sinit_lock_acquire>
 8005d90:	69a3      	ldr	r3, [r4, #24]
 8005d92:	b11b      	cbz	r3, 8005d9c <__sinit+0x14>
 8005d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d98:	f7ff bff0 	b.w	8005d7c <__sinit_lock_release>
 8005d9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005da0:	6523      	str	r3, [r4, #80]	; 0x50
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <__sinit+0x68>)
 8005da4:	4a13      	ldr	r2, [pc, #76]	; (8005df4 <__sinit+0x6c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	62a2      	str	r2, [r4, #40]	; 0x28
 8005daa:	42a3      	cmp	r3, r4
 8005dac:	bf04      	itt	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	61a3      	streq	r3, [r4, #24]
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 f820 	bl	8005df8 <__sfp>
 8005db8:	6060      	str	r0, [r4, #4]
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 f81c 	bl	8005df8 <__sfp>
 8005dc0:	60a0      	str	r0, [r4, #8]
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f818 	bl	8005df8 <__sfp>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	60e0      	str	r0, [r4, #12]
 8005dcc:	2104      	movs	r1, #4
 8005dce:	6860      	ldr	r0, [r4, #4]
 8005dd0:	f7ff ff82 	bl	8005cd8 <std>
 8005dd4:	68a0      	ldr	r0, [r4, #8]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	2109      	movs	r1, #9
 8005dda:	f7ff ff7d 	bl	8005cd8 <std>
 8005dde:	68e0      	ldr	r0, [r4, #12]
 8005de0:	2202      	movs	r2, #2
 8005de2:	2112      	movs	r1, #18
 8005de4:	f7ff ff78 	bl	8005cd8 <std>
 8005de8:	2301      	movs	r3, #1
 8005dea:	61a3      	str	r3, [r4, #24]
 8005dec:	e7d2      	b.n	8005d94 <__sinit+0xc>
 8005dee:	bf00      	nop
 8005df0:	08006e9c 	.word	0x08006e9c
 8005df4:	08005d21 	.word	0x08005d21

08005df8 <__sfp>:
 8005df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	f7ff ffac 	bl	8005d58 <__sfp_lock_acquire>
 8005e00:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <__sfp+0x84>)
 8005e02:	681e      	ldr	r6, [r3, #0]
 8005e04:	69b3      	ldr	r3, [r6, #24]
 8005e06:	b913      	cbnz	r3, 8005e0e <__sfp+0x16>
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff ffbd 	bl	8005d88 <__sinit>
 8005e0e:	3648      	adds	r6, #72	; 0x48
 8005e10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	d503      	bpl.n	8005e20 <__sfp+0x28>
 8005e18:	6833      	ldr	r3, [r6, #0]
 8005e1a:	b30b      	cbz	r3, 8005e60 <__sfp+0x68>
 8005e1c:	6836      	ldr	r6, [r6, #0]
 8005e1e:	e7f7      	b.n	8005e10 <__sfp+0x18>
 8005e20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e24:	b9d5      	cbnz	r5, 8005e5c <__sfp+0x64>
 8005e26:	4b16      	ldr	r3, [pc, #88]	; (8005e80 <__sfp+0x88>)
 8005e28:	60e3      	str	r3, [r4, #12]
 8005e2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e2e:	6665      	str	r5, [r4, #100]	; 0x64
 8005e30:	f000 f84c 	bl	8005ecc <__retarget_lock_init_recursive>
 8005e34:	f7ff ff96 	bl	8005d64 <__sfp_lock_release>
 8005e38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e40:	6025      	str	r5, [r4, #0]
 8005e42:	61a5      	str	r5, [r4, #24]
 8005e44:	2208      	movs	r2, #8
 8005e46:	4629      	mov	r1, r5
 8005e48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e4c:	f7fe fa46 	bl	80042dc <memset>
 8005e50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e58:	4620      	mov	r0, r4
 8005e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e5c:	3468      	adds	r4, #104	; 0x68
 8005e5e:	e7d9      	b.n	8005e14 <__sfp+0x1c>
 8005e60:	2104      	movs	r1, #4
 8005e62:	4638      	mov	r0, r7
 8005e64:	f7ff ff62 	bl	8005d2c <__sfmoreglue>
 8005e68:	4604      	mov	r4, r0
 8005e6a:	6030      	str	r0, [r6, #0]
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1d5      	bne.n	8005e1c <__sfp+0x24>
 8005e70:	f7ff ff78 	bl	8005d64 <__sfp_lock_release>
 8005e74:	230c      	movs	r3, #12
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	e7ee      	b.n	8005e58 <__sfp+0x60>
 8005e7a:	bf00      	nop
 8005e7c:	08006e9c 	.word	0x08006e9c
 8005e80:	ffff0001 	.word	0xffff0001

08005e84 <_fwalk_reent>:
 8005e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e88:	4606      	mov	r6, r0
 8005e8a:	4688      	mov	r8, r1
 8005e8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e90:	2700      	movs	r7, #0
 8005e92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e96:	f1b9 0901 	subs.w	r9, r9, #1
 8005e9a:	d505      	bpl.n	8005ea8 <_fwalk_reent+0x24>
 8005e9c:	6824      	ldr	r4, [r4, #0]
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d1f7      	bne.n	8005e92 <_fwalk_reent+0xe>
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ea8:	89ab      	ldrh	r3, [r5, #12]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d907      	bls.n	8005ebe <_fwalk_reent+0x3a>
 8005eae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	d003      	beq.n	8005ebe <_fwalk_reent+0x3a>
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4630      	mov	r0, r6
 8005eba:	47c0      	blx	r8
 8005ebc:	4307      	orrs	r7, r0
 8005ebe:	3568      	adds	r5, #104	; 0x68
 8005ec0:	e7e9      	b.n	8005e96 <_fwalk_reent+0x12>
	...

08005ec4 <_localeconv_r>:
 8005ec4:	4800      	ldr	r0, [pc, #0]	; (8005ec8 <_localeconv_r+0x4>)
 8005ec6:	4770      	bx	lr
 8005ec8:	20000160 	.word	0x20000160

08005ecc <__retarget_lock_init_recursive>:
 8005ecc:	4770      	bx	lr

08005ece <__retarget_lock_acquire_recursive>:
 8005ece:	4770      	bx	lr

08005ed0 <__retarget_lock_release_recursive>:
 8005ed0:	4770      	bx	lr

08005ed2 <__swhatbuf_r>:
 8005ed2:	b570      	push	{r4, r5, r6, lr}
 8005ed4:	460e      	mov	r6, r1
 8005ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eda:	2900      	cmp	r1, #0
 8005edc:	b096      	sub	sp, #88	; 0x58
 8005ede:	4614      	mov	r4, r2
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	da08      	bge.n	8005ef6 <__swhatbuf_r+0x24>
 8005ee4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	061a      	lsls	r2, r3, #24
 8005eee:	d410      	bmi.n	8005f12 <__swhatbuf_r+0x40>
 8005ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ef4:	e00e      	b.n	8005f14 <__swhatbuf_r+0x42>
 8005ef6:	466a      	mov	r2, sp
 8005ef8:	f000 fee0 	bl	8006cbc <_fstat_r>
 8005efc:	2800      	cmp	r0, #0
 8005efe:	dbf1      	blt.n	8005ee4 <__swhatbuf_r+0x12>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f0a:	425a      	negs	r2, r3
 8005f0c:	415a      	adcs	r2, r3
 8005f0e:	602a      	str	r2, [r5, #0]
 8005f10:	e7ee      	b.n	8005ef0 <__swhatbuf_r+0x1e>
 8005f12:	2340      	movs	r3, #64	; 0x40
 8005f14:	2000      	movs	r0, #0
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	b016      	add	sp, #88	; 0x58
 8005f1a:	bd70      	pop	{r4, r5, r6, pc}

08005f1c <__smakebuf_r>:
 8005f1c:	898b      	ldrh	r3, [r1, #12]
 8005f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f20:	079d      	lsls	r5, r3, #30
 8005f22:	4606      	mov	r6, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	d507      	bpl.n	8005f38 <__smakebuf_r+0x1c>
 8005f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	6123      	str	r3, [r4, #16]
 8005f30:	2301      	movs	r3, #1
 8005f32:	6163      	str	r3, [r4, #20]
 8005f34:	b002      	add	sp, #8
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	ab01      	add	r3, sp, #4
 8005f3a:	466a      	mov	r2, sp
 8005f3c:	f7ff ffc9 	bl	8005ed2 <__swhatbuf_r>
 8005f40:	9900      	ldr	r1, [sp, #0]
 8005f42:	4605      	mov	r5, r0
 8005f44:	4630      	mov	r0, r6
 8005f46:	f000 fc45 	bl	80067d4 <_malloc_r>
 8005f4a:	b948      	cbnz	r0, 8005f60 <__smakebuf_r+0x44>
 8005f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f50:	059a      	lsls	r2, r3, #22
 8005f52:	d4ef      	bmi.n	8005f34 <__smakebuf_r+0x18>
 8005f54:	f023 0303 	bic.w	r3, r3, #3
 8005f58:	f043 0302 	orr.w	r3, r3, #2
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	e7e3      	b.n	8005f28 <__smakebuf_r+0xc>
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <__smakebuf_r+0x7c>)
 8005f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	6020      	str	r0, [r4, #0]
 8005f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	6163      	str	r3, [r4, #20]
 8005f72:	9b01      	ldr	r3, [sp, #4]
 8005f74:	6120      	str	r0, [r4, #16]
 8005f76:	b15b      	cbz	r3, 8005f90 <__smakebuf_r+0x74>
 8005f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	f000 feaf 	bl	8006ce0 <_isatty_r>
 8005f82:	b128      	cbz	r0, 8005f90 <__smakebuf_r+0x74>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	f043 0301 	orr.w	r3, r3, #1
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	89a0      	ldrh	r0, [r4, #12]
 8005f92:	4305      	orrs	r5, r0
 8005f94:	81a5      	strh	r5, [r4, #12]
 8005f96:	e7cd      	b.n	8005f34 <__smakebuf_r+0x18>
 8005f98:	08005d21 	.word	0x08005d21

08005f9c <malloc>:
 8005f9c:	4b02      	ldr	r3, [pc, #8]	; (8005fa8 <malloc+0xc>)
 8005f9e:	4601      	mov	r1, r0
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	f000 bc17 	b.w	80067d4 <_malloc_r>
 8005fa6:	bf00      	nop
 8005fa8:	2000000c 	.word	0x2000000c

08005fac <memcpy>:
 8005fac:	440a      	add	r2, r1
 8005fae:	4291      	cmp	r1, r2
 8005fb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb4:	d100      	bne.n	8005fb8 <memcpy+0xc>
 8005fb6:	4770      	bx	lr
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc2:	4291      	cmp	r1, r2
 8005fc4:	d1f9      	bne.n	8005fba <memcpy+0xe>
 8005fc6:	bd10      	pop	{r4, pc}

08005fc8 <_Balloc>:
 8005fc8:	b570      	push	{r4, r5, r6, lr}
 8005fca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005fcc:	4604      	mov	r4, r0
 8005fce:	460d      	mov	r5, r1
 8005fd0:	b976      	cbnz	r6, 8005ff0 <_Balloc+0x28>
 8005fd2:	2010      	movs	r0, #16
 8005fd4:	f7ff ffe2 	bl	8005f9c <malloc>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	6260      	str	r0, [r4, #36]	; 0x24
 8005fdc:	b920      	cbnz	r0, 8005fe8 <_Balloc+0x20>
 8005fde:	4b18      	ldr	r3, [pc, #96]	; (8006040 <_Balloc+0x78>)
 8005fe0:	4818      	ldr	r0, [pc, #96]	; (8006044 <_Balloc+0x7c>)
 8005fe2:	2166      	movs	r1, #102	; 0x66
 8005fe4:	f000 fe2a 	bl	8006c3c <__assert_func>
 8005fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fec:	6006      	str	r6, [r0, #0]
 8005fee:	60c6      	str	r6, [r0, #12]
 8005ff0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ff2:	68f3      	ldr	r3, [r6, #12]
 8005ff4:	b183      	cbz	r3, 8006018 <_Balloc+0x50>
 8005ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ffe:	b9b8      	cbnz	r0, 8006030 <_Balloc+0x68>
 8006000:	2101      	movs	r1, #1
 8006002:	fa01 f605 	lsl.w	r6, r1, r5
 8006006:	1d72      	adds	r2, r6, #5
 8006008:	0092      	lsls	r2, r2, #2
 800600a:	4620      	mov	r0, r4
 800600c:	f000 fb60 	bl	80066d0 <_calloc_r>
 8006010:	b160      	cbz	r0, 800602c <_Balloc+0x64>
 8006012:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006016:	e00e      	b.n	8006036 <_Balloc+0x6e>
 8006018:	2221      	movs	r2, #33	; 0x21
 800601a:	2104      	movs	r1, #4
 800601c:	4620      	mov	r0, r4
 800601e:	f000 fb57 	bl	80066d0 <_calloc_r>
 8006022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006024:	60f0      	str	r0, [r6, #12]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d1e4      	bne.n	8005ff6 <_Balloc+0x2e>
 800602c:	2000      	movs	r0, #0
 800602e:	bd70      	pop	{r4, r5, r6, pc}
 8006030:	6802      	ldr	r2, [r0, #0]
 8006032:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006036:	2300      	movs	r3, #0
 8006038:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800603c:	e7f7      	b.n	800602e <_Balloc+0x66>
 800603e:	bf00      	nop
 8006040:	08006ee1 	.word	0x08006ee1
 8006044:	08006fc4 	.word	0x08006fc4

08006048 <_Bfree>:
 8006048:	b570      	push	{r4, r5, r6, lr}
 800604a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800604c:	4605      	mov	r5, r0
 800604e:	460c      	mov	r4, r1
 8006050:	b976      	cbnz	r6, 8006070 <_Bfree+0x28>
 8006052:	2010      	movs	r0, #16
 8006054:	f7ff ffa2 	bl	8005f9c <malloc>
 8006058:	4602      	mov	r2, r0
 800605a:	6268      	str	r0, [r5, #36]	; 0x24
 800605c:	b920      	cbnz	r0, 8006068 <_Bfree+0x20>
 800605e:	4b09      	ldr	r3, [pc, #36]	; (8006084 <_Bfree+0x3c>)
 8006060:	4809      	ldr	r0, [pc, #36]	; (8006088 <_Bfree+0x40>)
 8006062:	218a      	movs	r1, #138	; 0x8a
 8006064:	f000 fdea 	bl	8006c3c <__assert_func>
 8006068:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800606c:	6006      	str	r6, [r0, #0]
 800606e:	60c6      	str	r6, [r0, #12]
 8006070:	b13c      	cbz	r4, 8006082 <_Bfree+0x3a>
 8006072:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006074:	6862      	ldr	r2, [r4, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800607c:	6021      	str	r1, [r4, #0]
 800607e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006082:	bd70      	pop	{r4, r5, r6, pc}
 8006084:	08006ee1 	.word	0x08006ee1
 8006088:	08006fc4 	.word	0x08006fc4

0800608c <__multadd>:
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	690d      	ldr	r5, [r1, #16]
 8006092:	4607      	mov	r7, r0
 8006094:	460c      	mov	r4, r1
 8006096:	461e      	mov	r6, r3
 8006098:	f101 0c14 	add.w	ip, r1, #20
 800609c:	2000      	movs	r0, #0
 800609e:	f8dc 3000 	ldr.w	r3, [ip]
 80060a2:	b299      	uxth	r1, r3
 80060a4:	fb02 6101 	mla	r1, r2, r1, r6
 80060a8:	0c1e      	lsrs	r6, r3, #16
 80060aa:	0c0b      	lsrs	r3, r1, #16
 80060ac:	fb02 3306 	mla	r3, r2, r6, r3
 80060b0:	b289      	uxth	r1, r1
 80060b2:	3001      	adds	r0, #1
 80060b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060b8:	4285      	cmp	r5, r0
 80060ba:	f84c 1b04 	str.w	r1, [ip], #4
 80060be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060c2:	dcec      	bgt.n	800609e <__multadd+0x12>
 80060c4:	b30e      	cbz	r6, 800610a <__multadd+0x7e>
 80060c6:	68a3      	ldr	r3, [r4, #8]
 80060c8:	42ab      	cmp	r3, r5
 80060ca:	dc19      	bgt.n	8006100 <__multadd+0x74>
 80060cc:	6861      	ldr	r1, [r4, #4]
 80060ce:	4638      	mov	r0, r7
 80060d0:	3101      	adds	r1, #1
 80060d2:	f7ff ff79 	bl	8005fc8 <_Balloc>
 80060d6:	4680      	mov	r8, r0
 80060d8:	b928      	cbnz	r0, 80060e6 <__multadd+0x5a>
 80060da:	4602      	mov	r2, r0
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <__multadd+0x84>)
 80060de:	480d      	ldr	r0, [pc, #52]	; (8006114 <__multadd+0x88>)
 80060e0:	21b5      	movs	r1, #181	; 0xb5
 80060e2:	f000 fdab 	bl	8006c3c <__assert_func>
 80060e6:	6922      	ldr	r2, [r4, #16]
 80060e8:	3202      	adds	r2, #2
 80060ea:	f104 010c 	add.w	r1, r4, #12
 80060ee:	0092      	lsls	r2, r2, #2
 80060f0:	300c      	adds	r0, #12
 80060f2:	f7ff ff5b 	bl	8005fac <memcpy>
 80060f6:	4621      	mov	r1, r4
 80060f8:	4638      	mov	r0, r7
 80060fa:	f7ff ffa5 	bl	8006048 <_Bfree>
 80060fe:	4644      	mov	r4, r8
 8006100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006104:	3501      	adds	r5, #1
 8006106:	615e      	str	r6, [r3, #20]
 8006108:	6125      	str	r5, [r4, #16]
 800610a:	4620      	mov	r0, r4
 800610c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006110:	08006f53 	.word	0x08006f53
 8006114:	08006fc4 	.word	0x08006fc4

08006118 <__hi0bits>:
 8006118:	0c03      	lsrs	r3, r0, #16
 800611a:	041b      	lsls	r3, r3, #16
 800611c:	b9d3      	cbnz	r3, 8006154 <__hi0bits+0x3c>
 800611e:	0400      	lsls	r0, r0, #16
 8006120:	2310      	movs	r3, #16
 8006122:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006126:	bf04      	itt	eq
 8006128:	0200      	lsleq	r0, r0, #8
 800612a:	3308      	addeq	r3, #8
 800612c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006130:	bf04      	itt	eq
 8006132:	0100      	lsleq	r0, r0, #4
 8006134:	3304      	addeq	r3, #4
 8006136:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800613a:	bf04      	itt	eq
 800613c:	0080      	lsleq	r0, r0, #2
 800613e:	3302      	addeq	r3, #2
 8006140:	2800      	cmp	r0, #0
 8006142:	db05      	blt.n	8006150 <__hi0bits+0x38>
 8006144:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006148:	f103 0301 	add.w	r3, r3, #1
 800614c:	bf08      	it	eq
 800614e:	2320      	moveq	r3, #32
 8006150:	4618      	mov	r0, r3
 8006152:	4770      	bx	lr
 8006154:	2300      	movs	r3, #0
 8006156:	e7e4      	b.n	8006122 <__hi0bits+0xa>

08006158 <__lo0bits>:
 8006158:	6803      	ldr	r3, [r0, #0]
 800615a:	f013 0207 	ands.w	r2, r3, #7
 800615e:	4601      	mov	r1, r0
 8006160:	d00b      	beq.n	800617a <__lo0bits+0x22>
 8006162:	07da      	lsls	r2, r3, #31
 8006164:	d423      	bmi.n	80061ae <__lo0bits+0x56>
 8006166:	0798      	lsls	r0, r3, #30
 8006168:	bf49      	itett	mi
 800616a:	085b      	lsrmi	r3, r3, #1
 800616c:	089b      	lsrpl	r3, r3, #2
 800616e:	2001      	movmi	r0, #1
 8006170:	600b      	strmi	r3, [r1, #0]
 8006172:	bf5c      	itt	pl
 8006174:	600b      	strpl	r3, [r1, #0]
 8006176:	2002      	movpl	r0, #2
 8006178:	4770      	bx	lr
 800617a:	b298      	uxth	r0, r3
 800617c:	b9a8      	cbnz	r0, 80061aa <__lo0bits+0x52>
 800617e:	0c1b      	lsrs	r3, r3, #16
 8006180:	2010      	movs	r0, #16
 8006182:	b2da      	uxtb	r2, r3
 8006184:	b90a      	cbnz	r2, 800618a <__lo0bits+0x32>
 8006186:	3008      	adds	r0, #8
 8006188:	0a1b      	lsrs	r3, r3, #8
 800618a:	071a      	lsls	r2, r3, #28
 800618c:	bf04      	itt	eq
 800618e:	091b      	lsreq	r3, r3, #4
 8006190:	3004      	addeq	r0, #4
 8006192:	079a      	lsls	r2, r3, #30
 8006194:	bf04      	itt	eq
 8006196:	089b      	lsreq	r3, r3, #2
 8006198:	3002      	addeq	r0, #2
 800619a:	07da      	lsls	r2, r3, #31
 800619c:	d403      	bmi.n	80061a6 <__lo0bits+0x4e>
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	f100 0001 	add.w	r0, r0, #1
 80061a4:	d005      	beq.n	80061b2 <__lo0bits+0x5a>
 80061a6:	600b      	str	r3, [r1, #0]
 80061a8:	4770      	bx	lr
 80061aa:	4610      	mov	r0, r2
 80061ac:	e7e9      	b.n	8006182 <__lo0bits+0x2a>
 80061ae:	2000      	movs	r0, #0
 80061b0:	4770      	bx	lr
 80061b2:	2020      	movs	r0, #32
 80061b4:	4770      	bx	lr
	...

080061b8 <__i2b>:
 80061b8:	b510      	push	{r4, lr}
 80061ba:	460c      	mov	r4, r1
 80061bc:	2101      	movs	r1, #1
 80061be:	f7ff ff03 	bl	8005fc8 <_Balloc>
 80061c2:	4602      	mov	r2, r0
 80061c4:	b928      	cbnz	r0, 80061d2 <__i2b+0x1a>
 80061c6:	4b05      	ldr	r3, [pc, #20]	; (80061dc <__i2b+0x24>)
 80061c8:	4805      	ldr	r0, [pc, #20]	; (80061e0 <__i2b+0x28>)
 80061ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80061ce:	f000 fd35 	bl	8006c3c <__assert_func>
 80061d2:	2301      	movs	r3, #1
 80061d4:	6144      	str	r4, [r0, #20]
 80061d6:	6103      	str	r3, [r0, #16]
 80061d8:	bd10      	pop	{r4, pc}
 80061da:	bf00      	nop
 80061dc:	08006f53 	.word	0x08006f53
 80061e0:	08006fc4 	.word	0x08006fc4

080061e4 <__multiply>:
 80061e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e8:	4691      	mov	r9, r2
 80061ea:	690a      	ldr	r2, [r1, #16]
 80061ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	bfb8      	it	lt
 80061f4:	460b      	movlt	r3, r1
 80061f6:	460c      	mov	r4, r1
 80061f8:	bfbc      	itt	lt
 80061fa:	464c      	movlt	r4, r9
 80061fc:	4699      	movlt	r9, r3
 80061fe:	6927      	ldr	r7, [r4, #16]
 8006200:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	6861      	ldr	r1, [r4, #4]
 8006208:	eb07 060a 	add.w	r6, r7, sl
 800620c:	42b3      	cmp	r3, r6
 800620e:	b085      	sub	sp, #20
 8006210:	bfb8      	it	lt
 8006212:	3101      	addlt	r1, #1
 8006214:	f7ff fed8 	bl	8005fc8 <_Balloc>
 8006218:	b930      	cbnz	r0, 8006228 <__multiply+0x44>
 800621a:	4602      	mov	r2, r0
 800621c:	4b44      	ldr	r3, [pc, #272]	; (8006330 <__multiply+0x14c>)
 800621e:	4845      	ldr	r0, [pc, #276]	; (8006334 <__multiply+0x150>)
 8006220:	f240 115d 	movw	r1, #349	; 0x15d
 8006224:	f000 fd0a 	bl	8006c3c <__assert_func>
 8006228:	f100 0514 	add.w	r5, r0, #20
 800622c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006230:	462b      	mov	r3, r5
 8006232:	2200      	movs	r2, #0
 8006234:	4543      	cmp	r3, r8
 8006236:	d321      	bcc.n	800627c <__multiply+0x98>
 8006238:	f104 0314 	add.w	r3, r4, #20
 800623c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006240:	f109 0314 	add.w	r3, r9, #20
 8006244:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006248:	9202      	str	r2, [sp, #8]
 800624a:	1b3a      	subs	r2, r7, r4
 800624c:	3a15      	subs	r2, #21
 800624e:	f022 0203 	bic.w	r2, r2, #3
 8006252:	3204      	adds	r2, #4
 8006254:	f104 0115 	add.w	r1, r4, #21
 8006258:	428f      	cmp	r7, r1
 800625a:	bf38      	it	cc
 800625c:	2204      	movcc	r2, #4
 800625e:	9201      	str	r2, [sp, #4]
 8006260:	9a02      	ldr	r2, [sp, #8]
 8006262:	9303      	str	r3, [sp, #12]
 8006264:	429a      	cmp	r2, r3
 8006266:	d80c      	bhi.n	8006282 <__multiply+0x9e>
 8006268:	2e00      	cmp	r6, #0
 800626a:	dd03      	ble.n	8006274 <__multiply+0x90>
 800626c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006270:	2b00      	cmp	r3, #0
 8006272:	d05a      	beq.n	800632a <__multiply+0x146>
 8006274:	6106      	str	r6, [r0, #16]
 8006276:	b005      	add	sp, #20
 8006278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800627c:	f843 2b04 	str.w	r2, [r3], #4
 8006280:	e7d8      	b.n	8006234 <__multiply+0x50>
 8006282:	f8b3 a000 	ldrh.w	sl, [r3]
 8006286:	f1ba 0f00 	cmp.w	sl, #0
 800628a:	d024      	beq.n	80062d6 <__multiply+0xf2>
 800628c:	f104 0e14 	add.w	lr, r4, #20
 8006290:	46a9      	mov	r9, r5
 8006292:	f04f 0c00 	mov.w	ip, #0
 8006296:	f85e 2b04 	ldr.w	r2, [lr], #4
 800629a:	f8d9 1000 	ldr.w	r1, [r9]
 800629e:	fa1f fb82 	uxth.w	fp, r2
 80062a2:	b289      	uxth	r1, r1
 80062a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80062a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80062ac:	f8d9 2000 	ldr.w	r2, [r9]
 80062b0:	4461      	add	r1, ip
 80062b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80062ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062be:	b289      	uxth	r1, r1
 80062c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062c4:	4577      	cmp	r7, lr
 80062c6:	f849 1b04 	str.w	r1, [r9], #4
 80062ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062ce:	d8e2      	bhi.n	8006296 <__multiply+0xb2>
 80062d0:	9a01      	ldr	r2, [sp, #4]
 80062d2:	f845 c002 	str.w	ip, [r5, r2]
 80062d6:	9a03      	ldr	r2, [sp, #12]
 80062d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80062dc:	3304      	adds	r3, #4
 80062de:	f1b9 0f00 	cmp.w	r9, #0
 80062e2:	d020      	beq.n	8006326 <__multiply+0x142>
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	f104 0c14 	add.w	ip, r4, #20
 80062ea:	46ae      	mov	lr, r5
 80062ec:	f04f 0a00 	mov.w	sl, #0
 80062f0:	f8bc b000 	ldrh.w	fp, [ip]
 80062f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80062f8:	fb09 220b 	mla	r2, r9, fp, r2
 80062fc:	4492      	add	sl, r2
 80062fe:	b289      	uxth	r1, r1
 8006300:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006304:	f84e 1b04 	str.w	r1, [lr], #4
 8006308:	f85c 2b04 	ldr.w	r2, [ip], #4
 800630c:	f8be 1000 	ldrh.w	r1, [lr]
 8006310:	0c12      	lsrs	r2, r2, #16
 8006312:	fb09 1102 	mla	r1, r9, r2, r1
 8006316:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800631a:	4567      	cmp	r7, ip
 800631c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006320:	d8e6      	bhi.n	80062f0 <__multiply+0x10c>
 8006322:	9a01      	ldr	r2, [sp, #4]
 8006324:	50a9      	str	r1, [r5, r2]
 8006326:	3504      	adds	r5, #4
 8006328:	e79a      	b.n	8006260 <__multiply+0x7c>
 800632a:	3e01      	subs	r6, #1
 800632c:	e79c      	b.n	8006268 <__multiply+0x84>
 800632e:	bf00      	nop
 8006330:	08006f53 	.word	0x08006f53
 8006334:	08006fc4 	.word	0x08006fc4

08006338 <__pow5mult>:
 8006338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800633c:	4615      	mov	r5, r2
 800633e:	f012 0203 	ands.w	r2, r2, #3
 8006342:	4606      	mov	r6, r0
 8006344:	460f      	mov	r7, r1
 8006346:	d007      	beq.n	8006358 <__pow5mult+0x20>
 8006348:	4c25      	ldr	r4, [pc, #148]	; (80063e0 <__pow5mult+0xa8>)
 800634a:	3a01      	subs	r2, #1
 800634c:	2300      	movs	r3, #0
 800634e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006352:	f7ff fe9b 	bl	800608c <__multadd>
 8006356:	4607      	mov	r7, r0
 8006358:	10ad      	asrs	r5, r5, #2
 800635a:	d03d      	beq.n	80063d8 <__pow5mult+0xa0>
 800635c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800635e:	b97c      	cbnz	r4, 8006380 <__pow5mult+0x48>
 8006360:	2010      	movs	r0, #16
 8006362:	f7ff fe1b 	bl	8005f9c <malloc>
 8006366:	4602      	mov	r2, r0
 8006368:	6270      	str	r0, [r6, #36]	; 0x24
 800636a:	b928      	cbnz	r0, 8006378 <__pow5mult+0x40>
 800636c:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <__pow5mult+0xac>)
 800636e:	481e      	ldr	r0, [pc, #120]	; (80063e8 <__pow5mult+0xb0>)
 8006370:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006374:	f000 fc62 	bl	8006c3c <__assert_func>
 8006378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800637c:	6004      	str	r4, [r0, #0]
 800637e:	60c4      	str	r4, [r0, #12]
 8006380:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006384:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006388:	b94c      	cbnz	r4, 800639e <__pow5mult+0x66>
 800638a:	f240 2171 	movw	r1, #625	; 0x271
 800638e:	4630      	mov	r0, r6
 8006390:	f7ff ff12 	bl	80061b8 <__i2b>
 8006394:	2300      	movs	r3, #0
 8006396:	f8c8 0008 	str.w	r0, [r8, #8]
 800639a:	4604      	mov	r4, r0
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	f04f 0900 	mov.w	r9, #0
 80063a2:	07eb      	lsls	r3, r5, #31
 80063a4:	d50a      	bpl.n	80063bc <__pow5mult+0x84>
 80063a6:	4639      	mov	r1, r7
 80063a8:	4622      	mov	r2, r4
 80063aa:	4630      	mov	r0, r6
 80063ac:	f7ff ff1a 	bl	80061e4 <__multiply>
 80063b0:	4639      	mov	r1, r7
 80063b2:	4680      	mov	r8, r0
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff fe47 	bl	8006048 <_Bfree>
 80063ba:	4647      	mov	r7, r8
 80063bc:	106d      	asrs	r5, r5, #1
 80063be:	d00b      	beq.n	80063d8 <__pow5mult+0xa0>
 80063c0:	6820      	ldr	r0, [r4, #0]
 80063c2:	b938      	cbnz	r0, 80063d4 <__pow5mult+0x9c>
 80063c4:	4622      	mov	r2, r4
 80063c6:	4621      	mov	r1, r4
 80063c8:	4630      	mov	r0, r6
 80063ca:	f7ff ff0b 	bl	80061e4 <__multiply>
 80063ce:	6020      	str	r0, [r4, #0]
 80063d0:	f8c0 9000 	str.w	r9, [r0]
 80063d4:	4604      	mov	r4, r0
 80063d6:	e7e4      	b.n	80063a2 <__pow5mult+0x6a>
 80063d8:	4638      	mov	r0, r7
 80063da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063de:	bf00      	nop
 80063e0:	08007110 	.word	0x08007110
 80063e4:	08006ee1 	.word	0x08006ee1
 80063e8:	08006fc4 	.word	0x08006fc4

080063ec <__lshift>:
 80063ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063f0:	460c      	mov	r4, r1
 80063f2:	6849      	ldr	r1, [r1, #4]
 80063f4:	6923      	ldr	r3, [r4, #16]
 80063f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80063fa:	68a3      	ldr	r3, [r4, #8]
 80063fc:	4607      	mov	r7, r0
 80063fe:	4691      	mov	r9, r2
 8006400:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006404:	f108 0601 	add.w	r6, r8, #1
 8006408:	42b3      	cmp	r3, r6
 800640a:	db0b      	blt.n	8006424 <__lshift+0x38>
 800640c:	4638      	mov	r0, r7
 800640e:	f7ff fddb 	bl	8005fc8 <_Balloc>
 8006412:	4605      	mov	r5, r0
 8006414:	b948      	cbnz	r0, 800642a <__lshift+0x3e>
 8006416:	4602      	mov	r2, r0
 8006418:	4b2a      	ldr	r3, [pc, #168]	; (80064c4 <__lshift+0xd8>)
 800641a:	482b      	ldr	r0, [pc, #172]	; (80064c8 <__lshift+0xdc>)
 800641c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006420:	f000 fc0c 	bl	8006c3c <__assert_func>
 8006424:	3101      	adds	r1, #1
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	e7ee      	b.n	8006408 <__lshift+0x1c>
 800642a:	2300      	movs	r3, #0
 800642c:	f100 0114 	add.w	r1, r0, #20
 8006430:	f100 0210 	add.w	r2, r0, #16
 8006434:	4618      	mov	r0, r3
 8006436:	4553      	cmp	r3, sl
 8006438:	db37      	blt.n	80064aa <__lshift+0xbe>
 800643a:	6920      	ldr	r0, [r4, #16]
 800643c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006440:	f104 0314 	add.w	r3, r4, #20
 8006444:	f019 091f 	ands.w	r9, r9, #31
 8006448:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800644c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006450:	d02f      	beq.n	80064b2 <__lshift+0xc6>
 8006452:	f1c9 0e20 	rsb	lr, r9, #32
 8006456:	468a      	mov	sl, r1
 8006458:	f04f 0c00 	mov.w	ip, #0
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	fa02 f209 	lsl.w	r2, r2, r9
 8006462:	ea42 020c 	orr.w	r2, r2, ip
 8006466:	f84a 2b04 	str.w	r2, [sl], #4
 800646a:	f853 2b04 	ldr.w	r2, [r3], #4
 800646e:	4298      	cmp	r0, r3
 8006470:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006474:	d8f2      	bhi.n	800645c <__lshift+0x70>
 8006476:	1b03      	subs	r3, r0, r4
 8006478:	3b15      	subs	r3, #21
 800647a:	f023 0303 	bic.w	r3, r3, #3
 800647e:	3304      	adds	r3, #4
 8006480:	f104 0215 	add.w	r2, r4, #21
 8006484:	4290      	cmp	r0, r2
 8006486:	bf38      	it	cc
 8006488:	2304      	movcc	r3, #4
 800648a:	f841 c003 	str.w	ip, [r1, r3]
 800648e:	f1bc 0f00 	cmp.w	ip, #0
 8006492:	d001      	beq.n	8006498 <__lshift+0xac>
 8006494:	f108 0602 	add.w	r6, r8, #2
 8006498:	3e01      	subs	r6, #1
 800649a:	4638      	mov	r0, r7
 800649c:	612e      	str	r6, [r5, #16]
 800649e:	4621      	mov	r1, r4
 80064a0:	f7ff fdd2 	bl	8006048 <_Bfree>
 80064a4:	4628      	mov	r0, r5
 80064a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80064ae:	3301      	adds	r3, #1
 80064b0:	e7c1      	b.n	8006436 <__lshift+0x4a>
 80064b2:	3904      	subs	r1, #4
 80064b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80064bc:	4298      	cmp	r0, r3
 80064be:	d8f9      	bhi.n	80064b4 <__lshift+0xc8>
 80064c0:	e7ea      	b.n	8006498 <__lshift+0xac>
 80064c2:	bf00      	nop
 80064c4:	08006f53 	.word	0x08006f53
 80064c8:	08006fc4 	.word	0x08006fc4

080064cc <__mcmp>:
 80064cc:	b530      	push	{r4, r5, lr}
 80064ce:	6902      	ldr	r2, [r0, #16]
 80064d0:	690c      	ldr	r4, [r1, #16]
 80064d2:	1b12      	subs	r2, r2, r4
 80064d4:	d10e      	bne.n	80064f4 <__mcmp+0x28>
 80064d6:	f100 0314 	add.w	r3, r0, #20
 80064da:	3114      	adds	r1, #20
 80064dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80064e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80064e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80064e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80064ec:	42a5      	cmp	r5, r4
 80064ee:	d003      	beq.n	80064f8 <__mcmp+0x2c>
 80064f0:	d305      	bcc.n	80064fe <__mcmp+0x32>
 80064f2:	2201      	movs	r2, #1
 80064f4:	4610      	mov	r0, r2
 80064f6:	bd30      	pop	{r4, r5, pc}
 80064f8:	4283      	cmp	r3, r0
 80064fa:	d3f3      	bcc.n	80064e4 <__mcmp+0x18>
 80064fc:	e7fa      	b.n	80064f4 <__mcmp+0x28>
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006502:	e7f7      	b.n	80064f4 <__mcmp+0x28>

08006504 <__mdiff>:
 8006504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	460c      	mov	r4, r1
 800650a:	4606      	mov	r6, r0
 800650c:	4611      	mov	r1, r2
 800650e:	4620      	mov	r0, r4
 8006510:	4690      	mov	r8, r2
 8006512:	f7ff ffdb 	bl	80064cc <__mcmp>
 8006516:	1e05      	subs	r5, r0, #0
 8006518:	d110      	bne.n	800653c <__mdiff+0x38>
 800651a:	4629      	mov	r1, r5
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff fd53 	bl	8005fc8 <_Balloc>
 8006522:	b930      	cbnz	r0, 8006532 <__mdiff+0x2e>
 8006524:	4b3a      	ldr	r3, [pc, #232]	; (8006610 <__mdiff+0x10c>)
 8006526:	4602      	mov	r2, r0
 8006528:	f240 2132 	movw	r1, #562	; 0x232
 800652c:	4839      	ldr	r0, [pc, #228]	; (8006614 <__mdiff+0x110>)
 800652e:	f000 fb85 	bl	8006c3c <__assert_func>
 8006532:	2301      	movs	r3, #1
 8006534:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006538:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653c:	bfa4      	itt	ge
 800653e:	4643      	movge	r3, r8
 8006540:	46a0      	movge	r8, r4
 8006542:	4630      	mov	r0, r6
 8006544:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006548:	bfa6      	itte	ge
 800654a:	461c      	movge	r4, r3
 800654c:	2500      	movge	r5, #0
 800654e:	2501      	movlt	r5, #1
 8006550:	f7ff fd3a 	bl	8005fc8 <_Balloc>
 8006554:	b920      	cbnz	r0, 8006560 <__mdiff+0x5c>
 8006556:	4b2e      	ldr	r3, [pc, #184]	; (8006610 <__mdiff+0x10c>)
 8006558:	4602      	mov	r2, r0
 800655a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800655e:	e7e5      	b.n	800652c <__mdiff+0x28>
 8006560:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006564:	6926      	ldr	r6, [r4, #16]
 8006566:	60c5      	str	r5, [r0, #12]
 8006568:	f104 0914 	add.w	r9, r4, #20
 800656c:	f108 0514 	add.w	r5, r8, #20
 8006570:	f100 0e14 	add.w	lr, r0, #20
 8006574:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006578:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800657c:	f108 0210 	add.w	r2, r8, #16
 8006580:	46f2      	mov	sl, lr
 8006582:	2100      	movs	r1, #0
 8006584:	f859 3b04 	ldr.w	r3, [r9], #4
 8006588:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800658c:	fa1f f883 	uxth.w	r8, r3
 8006590:	fa11 f18b 	uxtah	r1, r1, fp
 8006594:	0c1b      	lsrs	r3, r3, #16
 8006596:	eba1 0808 	sub.w	r8, r1, r8
 800659a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800659e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80065a2:	fa1f f888 	uxth.w	r8, r8
 80065a6:	1419      	asrs	r1, r3, #16
 80065a8:	454e      	cmp	r6, r9
 80065aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80065ae:	f84a 3b04 	str.w	r3, [sl], #4
 80065b2:	d8e7      	bhi.n	8006584 <__mdiff+0x80>
 80065b4:	1b33      	subs	r3, r6, r4
 80065b6:	3b15      	subs	r3, #21
 80065b8:	f023 0303 	bic.w	r3, r3, #3
 80065bc:	3304      	adds	r3, #4
 80065be:	3415      	adds	r4, #21
 80065c0:	42a6      	cmp	r6, r4
 80065c2:	bf38      	it	cc
 80065c4:	2304      	movcc	r3, #4
 80065c6:	441d      	add	r5, r3
 80065c8:	4473      	add	r3, lr
 80065ca:	469e      	mov	lr, r3
 80065cc:	462e      	mov	r6, r5
 80065ce:	4566      	cmp	r6, ip
 80065d0:	d30e      	bcc.n	80065f0 <__mdiff+0xec>
 80065d2:	f10c 0203 	add.w	r2, ip, #3
 80065d6:	1b52      	subs	r2, r2, r5
 80065d8:	f022 0203 	bic.w	r2, r2, #3
 80065dc:	3d03      	subs	r5, #3
 80065de:	45ac      	cmp	ip, r5
 80065e0:	bf38      	it	cc
 80065e2:	2200      	movcc	r2, #0
 80065e4:	441a      	add	r2, r3
 80065e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80065ea:	b17b      	cbz	r3, 800660c <__mdiff+0x108>
 80065ec:	6107      	str	r7, [r0, #16]
 80065ee:	e7a3      	b.n	8006538 <__mdiff+0x34>
 80065f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80065f4:	fa11 f288 	uxtah	r2, r1, r8
 80065f8:	1414      	asrs	r4, r2, #16
 80065fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80065fe:	b292      	uxth	r2, r2
 8006600:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006604:	f84e 2b04 	str.w	r2, [lr], #4
 8006608:	1421      	asrs	r1, r4, #16
 800660a:	e7e0      	b.n	80065ce <__mdiff+0xca>
 800660c:	3f01      	subs	r7, #1
 800660e:	e7ea      	b.n	80065e6 <__mdiff+0xe2>
 8006610:	08006f53 	.word	0x08006f53
 8006614:	08006fc4 	.word	0x08006fc4

08006618 <__d2b>:
 8006618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800661c:	4689      	mov	r9, r1
 800661e:	2101      	movs	r1, #1
 8006620:	ec57 6b10 	vmov	r6, r7, d0
 8006624:	4690      	mov	r8, r2
 8006626:	f7ff fccf 	bl	8005fc8 <_Balloc>
 800662a:	4604      	mov	r4, r0
 800662c:	b930      	cbnz	r0, 800663c <__d2b+0x24>
 800662e:	4602      	mov	r2, r0
 8006630:	4b25      	ldr	r3, [pc, #148]	; (80066c8 <__d2b+0xb0>)
 8006632:	4826      	ldr	r0, [pc, #152]	; (80066cc <__d2b+0xb4>)
 8006634:	f240 310a 	movw	r1, #778	; 0x30a
 8006638:	f000 fb00 	bl	8006c3c <__assert_func>
 800663c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006640:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006644:	bb35      	cbnz	r5, 8006694 <__d2b+0x7c>
 8006646:	2e00      	cmp	r6, #0
 8006648:	9301      	str	r3, [sp, #4]
 800664a:	d028      	beq.n	800669e <__d2b+0x86>
 800664c:	4668      	mov	r0, sp
 800664e:	9600      	str	r6, [sp, #0]
 8006650:	f7ff fd82 	bl	8006158 <__lo0bits>
 8006654:	9900      	ldr	r1, [sp, #0]
 8006656:	b300      	cbz	r0, 800669a <__d2b+0x82>
 8006658:	9a01      	ldr	r2, [sp, #4]
 800665a:	f1c0 0320 	rsb	r3, r0, #32
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	430b      	orrs	r3, r1
 8006664:	40c2      	lsrs	r2, r0
 8006666:	6163      	str	r3, [r4, #20]
 8006668:	9201      	str	r2, [sp, #4]
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	61a3      	str	r3, [r4, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	bf14      	ite	ne
 8006672:	2202      	movne	r2, #2
 8006674:	2201      	moveq	r2, #1
 8006676:	6122      	str	r2, [r4, #16]
 8006678:	b1d5      	cbz	r5, 80066b0 <__d2b+0x98>
 800667a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800667e:	4405      	add	r5, r0
 8006680:	f8c9 5000 	str.w	r5, [r9]
 8006684:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006688:	f8c8 0000 	str.w	r0, [r8]
 800668c:	4620      	mov	r0, r4
 800668e:	b003      	add	sp, #12
 8006690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006698:	e7d5      	b.n	8006646 <__d2b+0x2e>
 800669a:	6161      	str	r1, [r4, #20]
 800669c:	e7e5      	b.n	800666a <__d2b+0x52>
 800669e:	a801      	add	r0, sp, #4
 80066a0:	f7ff fd5a 	bl	8006158 <__lo0bits>
 80066a4:	9b01      	ldr	r3, [sp, #4]
 80066a6:	6163      	str	r3, [r4, #20]
 80066a8:	2201      	movs	r2, #1
 80066aa:	6122      	str	r2, [r4, #16]
 80066ac:	3020      	adds	r0, #32
 80066ae:	e7e3      	b.n	8006678 <__d2b+0x60>
 80066b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80066b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066b8:	f8c9 0000 	str.w	r0, [r9]
 80066bc:	6918      	ldr	r0, [r3, #16]
 80066be:	f7ff fd2b 	bl	8006118 <__hi0bits>
 80066c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80066c6:	e7df      	b.n	8006688 <__d2b+0x70>
 80066c8:	08006f53 	.word	0x08006f53
 80066cc:	08006fc4 	.word	0x08006fc4

080066d0 <_calloc_r>:
 80066d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d2:	fba1 2402 	umull	r2, r4, r1, r2
 80066d6:	b94c      	cbnz	r4, 80066ec <_calloc_r+0x1c>
 80066d8:	4611      	mov	r1, r2
 80066da:	9201      	str	r2, [sp, #4]
 80066dc:	f000 f87a 	bl	80067d4 <_malloc_r>
 80066e0:	9a01      	ldr	r2, [sp, #4]
 80066e2:	4605      	mov	r5, r0
 80066e4:	b930      	cbnz	r0, 80066f4 <_calloc_r+0x24>
 80066e6:	4628      	mov	r0, r5
 80066e8:	b003      	add	sp, #12
 80066ea:	bd30      	pop	{r4, r5, pc}
 80066ec:	220c      	movs	r2, #12
 80066ee:	6002      	str	r2, [r0, #0]
 80066f0:	2500      	movs	r5, #0
 80066f2:	e7f8      	b.n	80066e6 <_calloc_r+0x16>
 80066f4:	4621      	mov	r1, r4
 80066f6:	f7fd fdf1 	bl	80042dc <memset>
 80066fa:	e7f4      	b.n	80066e6 <_calloc_r+0x16>

080066fc <_free_r>:
 80066fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066fe:	2900      	cmp	r1, #0
 8006700:	d044      	beq.n	800678c <_free_r+0x90>
 8006702:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006706:	9001      	str	r0, [sp, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f1a1 0404 	sub.w	r4, r1, #4
 800670e:	bfb8      	it	lt
 8006710:	18e4      	addlt	r4, r4, r3
 8006712:	f000 fb19 	bl	8006d48 <__malloc_lock>
 8006716:	4a1e      	ldr	r2, [pc, #120]	; (8006790 <_free_r+0x94>)
 8006718:	9801      	ldr	r0, [sp, #4]
 800671a:	6813      	ldr	r3, [r2, #0]
 800671c:	b933      	cbnz	r3, 800672c <_free_r+0x30>
 800671e:	6063      	str	r3, [r4, #4]
 8006720:	6014      	str	r4, [r2, #0]
 8006722:	b003      	add	sp, #12
 8006724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006728:	f000 bb14 	b.w	8006d54 <__malloc_unlock>
 800672c:	42a3      	cmp	r3, r4
 800672e:	d908      	bls.n	8006742 <_free_r+0x46>
 8006730:	6825      	ldr	r5, [r4, #0]
 8006732:	1961      	adds	r1, r4, r5
 8006734:	428b      	cmp	r3, r1
 8006736:	bf01      	itttt	eq
 8006738:	6819      	ldreq	r1, [r3, #0]
 800673a:	685b      	ldreq	r3, [r3, #4]
 800673c:	1949      	addeq	r1, r1, r5
 800673e:	6021      	streq	r1, [r4, #0]
 8006740:	e7ed      	b.n	800671e <_free_r+0x22>
 8006742:	461a      	mov	r2, r3
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	b10b      	cbz	r3, 800674c <_free_r+0x50>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d9fa      	bls.n	8006742 <_free_r+0x46>
 800674c:	6811      	ldr	r1, [r2, #0]
 800674e:	1855      	adds	r5, r2, r1
 8006750:	42a5      	cmp	r5, r4
 8006752:	d10b      	bne.n	800676c <_free_r+0x70>
 8006754:	6824      	ldr	r4, [r4, #0]
 8006756:	4421      	add	r1, r4
 8006758:	1854      	adds	r4, r2, r1
 800675a:	42a3      	cmp	r3, r4
 800675c:	6011      	str	r1, [r2, #0]
 800675e:	d1e0      	bne.n	8006722 <_free_r+0x26>
 8006760:	681c      	ldr	r4, [r3, #0]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	6053      	str	r3, [r2, #4]
 8006766:	4421      	add	r1, r4
 8006768:	6011      	str	r1, [r2, #0]
 800676a:	e7da      	b.n	8006722 <_free_r+0x26>
 800676c:	d902      	bls.n	8006774 <_free_r+0x78>
 800676e:	230c      	movs	r3, #12
 8006770:	6003      	str	r3, [r0, #0]
 8006772:	e7d6      	b.n	8006722 <_free_r+0x26>
 8006774:	6825      	ldr	r5, [r4, #0]
 8006776:	1961      	adds	r1, r4, r5
 8006778:	428b      	cmp	r3, r1
 800677a:	bf04      	itt	eq
 800677c:	6819      	ldreq	r1, [r3, #0]
 800677e:	685b      	ldreq	r3, [r3, #4]
 8006780:	6063      	str	r3, [r4, #4]
 8006782:	bf04      	itt	eq
 8006784:	1949      	addeq	r1, r1, r5
 8006786:	6021      	streq	r1, [r4, #0]
 8006788:	6054      	str	r4, [r2, #4]
 800678a:	e7ca      	b.n	8006722 <_free_r+0x26>
 800678c:	b003      	add	sp, #12
 800678e:	bd30      	pop	{r4, r5, pc}
 8006790:	2000038c 	.word	0x2000038c

08006794 <sbrk_aligned>:
 8006794:	b570      	push	{r4, r5, r6, lr}
 8006796:	4e0e      	ldr	r6, [pc, #56]	; (80067d0 <sbrk_aligned+0x3c>)
 8006798:	460c      	mov	r4, r1
 800679a:	6831      	ldr	r1, [r6, #0]
 800679c:	4605      	mov	r5, r0
 800679e:	b911      	cbnz	r1, 80067a6 <sbrk_aligned+0x12>
 80067a0:	f000 f9e6 	bl	8006b70 <_sbrk_r>
 80067a4:	6030      	str	r0, [r6, #0]
 80067a6:	4621      	mov	r1, r4
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 f9e1 	bl	8006b70 <_sbrk_r>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	d00a      	beq.n	80067c8 <sbrk_aligned+0x34>
 80067b2:	1cc4      	adds	r4, r0, #3
 80067b4:	f024 0403 	bic.w	r4, r4, #3
 80067b8:	42a0      	cmp	r0, r4
 80067ba:	d007      	beq.n	80067cc <sbrk_aligned+0x38>
 80067bc:	1a21      	subs	r1, r4, r0
 80067be:	4628      	mov	r0, r5
 80067c0:	f000 f9d6 	bl	8006b70 <_sbrk_r>
 80067c4:	3001      	adds	r0, #1
 80067c6:	d101      	bne.n	80067cc <sbrk_aligned+0x38>
 80067c8:	f04f 34ff 	mov.w	r4, #4294967295
 80067cc:	4620      	mov	r0, r4
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	20000390 	.word	0x20000390

080067d4 <_malloc_r>:
 80067d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d8:	1ccd      	adds	r5, r1, #3
 80067da:	f025 0503 	bic.w	r5, r5, #3
 80067de:	3508      	adds	r5, #8
 80067e0:	2d0c      	cmp	r5, #12
 80067e2:	bf38      	it	cc
 80067e4:	250c      	movcc	r5, #12
 80067e6:	2d00      	cmp	r5, #0
 80067e8:	4607      	mov	r7, r0
 80067ea:	db01      	blt.n	80067f0 <_malloc_r+0x1c>
 80067ec:	42a9      	cmp	r1, r5
 80067ee:	d905      	bls.n	80067fc <_malloc_r+0x28>
 80067f0:	230c      	movs	r3, #12
 80067f2:	603b      	str	r3, [r7, #0]
 80067f4:	2600      	movs	r6, #0
 80067f6:	4630      	mov	r0, r6
 80067f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fc:	4e2e      	ldr	r6, [pc, #184]	; (80068b8 <_malloc_r+0xe4>)
 80067fe:	f000 faa3 	bl	8006d48 <__malloc_lock>
 8006802:	6833      	ldr	r3, [r6, #0]
 8006804:	461c      	mov	r4, r3
 8006806:	bb34      	cbnz	r4, 8006856 <_malloc_r+0x82>
 8006808:	4629      	mov	r1, r5
 800680a:	4638      	mov	r0, r7
 800680c:	f7ff ffc2 	bl	8006794 <sbrk_aligned>
 8006810:	1c43      	adds	r3, r0, #1
 8006812:	4604      	mov	r4, r0
 8006814:	d14d      	bne.n	80068b2 <_malloc_r+0xde>
 8006816:	6834      	ldr	r4, [r6, #0]
 8006818:	4626      	mov	r6, r4
 800681a:	2e00      	cmp	r6, #0
 800681c:	d140      	bne.n	80068a0 <_malloc_r+0xcc>
 800681e:	6823      	ldr	r3, [r4, #0]
 8006820:	4631      	mov	r1, r6
 8006822:	4638      	mov	r0, r7
 8006824:	eb04 0803 	add.w	r8, r4, r3
 8006828:	f000 f9a2 	bl	8006b70 <_sbrk_r>
 800682c:	4580      	cmp	r8, r0
 800682e:	d13a      	bne.n	80068a6 <_malloc_r+0xd2>
 8006830:	6821      	ldr	r1, [r4, #0]
 8006832:	3503      	adds	r5, #3
 8006834:	1a6d      	subs	r5, r5, r1
 8006836:	f025 0503 	bic.w	r5, r5, #3
 800683a:	3508      	adds	r5, #8
 800683c:	2d0c      	cmp	r5, #12
 800683e:	bf38      	it	cc
 8006840:	250c      	movcc	r5, #12
 8006842:	4629      	mov	r1, r5
 8006844:	4638      	mov	r0, r7
 8006846:	f7ff ffa5 	bl	8006794 <sbrk_aligned>
 800684a:	3001      	adds	r0, #1
 800684c:	d02b      	beq.n	80068a6 <_malloc_r+0xd2>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	442b      	add	r3, r5
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	e00e      	b.n	8006874 <_malloc_r+0xa0>
 8006856:	6822      	ldr	r2, [r4, #0]
 8006858:	1b52      	subs	r2, r2, r5
 800685a:	d41e      	bmi.n	800689a <_malloc_r+0xc6>
 800685c:	2a0b      	cmp	r2, #11
 800685e:	d916      	bls.n	800688e <_malloc_r+0xba>
 8006860:	1961      	adds	r1, r4, r5
 8006862:	42a3      	cmp	r3, r4
 8006864:	6025      	str	r5, [r4, #0]
 8006866:	bf18      	it	ne
 8006868:	6059      	strne	r1, [r3, #4]
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	bf08      	it	eq
 800686e:	6031      	streq	r1, [r6, #0]
 8006870:	5162      	str	r2, [r4, r5]
 8006872:	604b      	str	r3, [r1, #4]
 8006874:	4638      	mov	r0, r7
 8006876:	f104 060b 	add.w	r6, r4, #11
 800687a:	f000 fa6b 	bl	8006d54 <__malloc_unlock>
 800687e:	f026 0607 	bic.w	r6, r6, #7
 8006882:	1d23      	adds	r3, r4, #4
 8006884:	1af2      	subs	r2, r6, r3
 8006886:	d0b6      	beq.n	80067f6 <_malloc_r+0x22>
 8006888:	1b9b      	subs	r3, r3, r6
 800688a:	50a3      	str	r3, [r4, r2]
 800688c:	e7b3      	b.n	80067f6 <_malloc_r+0x22>
 800688e:	6862      	ldr	r2, [r4, #4]
 8006890:	42a3      	cmp	r3, r4
 8006892:	bf0c      	ite	eq
 8006894:	6032      	streq	r2, [r6, #0]
 8006896:	605a      	strne	r2, [r3, #4]
 8006898:	e7ec      	b.n	8006874 <_malloc_r+0xa0>
 800689a:	4623      	mov	r3, r4
 800689c:	6864      	ldr	r4, [r4, #4]
 800689e:	e7b2      	b.n	8006806 <_malloc_r+0x32>
 80068a0:	4634      	mov	r4, r6
 80068a2:	6876      	ldr	r6, [r6, #4]
 80068a4:	e7b9      	b.n	800681a <_malloc_r+0x46>
 80068a6:	230c      	movs	r3, #12
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	4638      	mov	r0, r7
 80068ac:	f000 fa52 	bl	8006d54 <__malloc_unlock>
 80068b0:	e7a1      	b.n	80067f6 <_malloc_r+0x22>
 80068b2:	6025      	str	r5, [r4, #0]
 80068b4:	e7de      	b.n	8006874 <_malloc_r+0xa0>
 80068b6:	bf00      	nop
 80068b8:	2000038c 	.word	0x2000038c

080068bc <__sfputc_r>:
 80068bc:	6893      	ldr	r3, [r2, #8]
 80068be:	3b01      	subs	r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	b410      	push	{r4}
 80068c4:	6093      	str	r3, [r2, #8]
 80068c6:	da08      	bge.n	80068da <__sfputc_r+0x1e>
 80068c8:	6994      	ldr	r4, [r2, #24]
 80068ca:	42a3      	cmp	r3, r4
 80068cc:	db01      	blt.n	80068d2 <__sfputc_r+0x16>
 80068ce:	290a      	cmp	r1, #10
 80068d0:	d103      	bne.n	80068da <__sfputc_r+0x1e>
 80068d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068d6:	f7fe ba01 	b.w	8004cdc <__swbuf_r>
 80068da:	6813      	ldr	r3, [r2, #0]
 80068dc:	1c58      	adds	r0, r3, #1
 80068de:	6010      	str	r0, [r2, #0]
 80068e0:	7019      	strb	r1, [r3, #0]
 80068e2:	4608      	mov	r0, r1
 80068e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <__sfputs_r>:
 80068ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ec:	4606      	mov	r6, r0
 80068ee:	460f      	mov	r7, r1
 80068f0:	4614      	mov	r4, r2
 80068f2:	18d5      	adds	r5, r2, r3
 80068f4:	42ac      	cmp	r4, r5
 80068f6:	d101      	bne.n	80068fc <__sfputs_r+0x12>
 80068f8:	2000      	movs	r0, #0
 80068fa:	e007      	b.n	800690c <__sfputs_r+0x22>
 80068fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006900:	463a      	mov	r2, r7
 8006902:	4630      	mov	r0, r6
 8006904:	f7ff ffda 	bl	80068bc <__sfputc_r>
 8006908:	1c43      	adds	r3, r0, #1
 800690a:	d1f3      	bne.n	80068f4 <__sfputs_r+0xa>
 800690c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006910 <_vfiprintf_r>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	460d      	mov	r5, r1
 8006916:	b09d      	sub	sp, #116	; 0x74
 8006918:	4614      	mov	r4, r2
 800691a:	4698      	mov	r8, r3
 800691c:	4606      	mov	r6, r0
 800691e:	b118      	cbz	r0, 8006928 <_vfiprintf_r+0x18>
 8006920:	6983      	ldr	r3, [r0, #24]
 8006922:	b90b      	cbnz	r3, 8006928 <_vfiprintf_r+0x18>
 8006924:	f7ff fa30 	bl	8005d88 <__sinit>
 8006928:	4b89      	ldr	r3, [pc, #548]	; (8006b50 <_vfiprintf_r+0x240>)
 800692a:	429d      	cmp	r5, r3
 800692c:	d11b      	bne.n	8006966 <_vfiprintf_r+0x56>
 800692e:	6875      	ldr	r5, [r6, #4]
 8006930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006932:	07d9      	lsls	r1, r3, #31
 8006934:	d405      	bmi.n	8006942 <_vfiprintf_r+0x32>
 8006936:	89ab      	ldrh	r3, [r5, #12]
 8006938:	059a      	lsls	r2, r3, #22
 800693a:	d402      	bmi.n	8006942 <_vfiprintf_r+0x32>
 800693c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800693e:	f7ff fac6 	bl	8005ece <__retarget_lock_acquire_recursive>
 8006942:	89ab      	ldrh	r3, [r5, #12]
 8006944:	071b      	lsls	r3, r3, #28
 8006946:	d501      	bpl.n	800694c <_vfiprintf_r+0x3c>
 8006948:	692b      	ldr	r3, [r5, #16]
 800694a:	b9eb      	cbnz	r3, 8006988 <_vfiprintf_r+0x78>
 800694c:	4629      	mov	r1, r5
 800694e:	4630      	mov	r0, r6
 8006950:	f7fe fa16 	bl	8004d80 <__swsetup_r>
 8006954:	b1c0      	cbz	r0, 8006988 <_vfiprintf_r+0x78>
 8006956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006958:	07dc      	lsls	r4, r3, #31
 800695a:	d50e      	bpl.n	800697a <_vfiprintf_r+0x6a>
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	b01d      	add	sp, #116	; 0x74
 8006962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006966:	4b7b      	ldr	r3, [pc, #492]	; (8006b54 <_vfiprintf_r+0x244>)
 8006968:	429d      	cmp	r5, r3
 800696a:	d101      	bne.n	8006970 <_vfiprintf_r+0x60>
 800696c:	68b5      	ldr	r5, [r6, #8]
 800696e:	e7df      	b.n	8006930 <_vfiprintf_r+0x20>
 8006970:	4b79      	ldr	r3, [pc, #484]	; (8006b58 <_vfiprintf_r+0x248>)
 8006972:	429d      	cmp	r5, r3
 8006974:	bf08      	it	eq
 8006976:	68f5      	ldreq	r5, [r6, #12]
 8006978:	e7da      	b.n	8006930 <_vfiprintf_r+0x20>
 800697a:	89ab      	ldrh	r3, [r5, #12]
 800697c:	0598      	lsls	r0, r3, #22
 800697e:	d4ed      	bmi.n	800695c <_vfiprintf_r+0x4c>
 8006980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006982:	f7ff faa5 	bl	8005ed0 <__retarget_lock_release_recursive>
 8006986:	e7e9      	b.n	800695c <_vfiprintf_r+0x4c>
 8006988:	2300      	movs	r3, #0
 800698a:	9309      	str	r3, [sp, #36]	; 0x24
 800698c:	2320      	movs	r3, #32
 800698e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006992:	f8cd 800c 	str.w	r8, [sp, #12]
 8006996:	2330      	movs	r3, #48	; 0x30
 8006998:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b5c <_vfiprintf_r+0x24c>
 800699c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069a0:	f04f 0901 	mov.w	r9, #1
 80069a4:	4623      	mov	r3, r4
 80069a6:	469a      	mov	sl, r3
 80069a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069ac:	b10a      	cbz	r2, 80069b2 <_vfiprintf_r+0xa2>
 80069ae:	2a25      	cmp	r2, #37	; 0x25
 80069b0:	d1f9      	bne.n	80069a6 <_vfiprintf_r+0x96>
 80069b2:	ebba 0b04 	subs.w	fp, sl, r4
 80069b6:	d00b      	beq.n	80069d0 <_vfiprintf_r+0xc0>
 80069b8:	465b      	mov	r3, fp
 80069ba:	4622      	mov	r2, r4
 80069bc:	4629      	mov	r1, r5
 80069be:	4630      	mov	r0, r6
 80069c0:	f7ff ff93 	bl	80068ea <__sfputs_r>
 80069c4:	3001      	adds	r0, #1
 80069c6:	f000 80aa 	beq.w	8006b1e <_vfiprintf_r+0x20e>
 80069ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069cc:	445a      	add	r2, fp
 80069ce:	9209      	str	r2, [sp, #36]	; 0x24
 80069d0:	f89a 3000 	ldrb.w	r3, [sl]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f000 80a2 	beq.w	8006b1e <_vfiprintf_r+0x20e>
 80069da:	2300      	movs	r3, #0
 80069dc:	f04f 32ff 	mov.w	r2, #4294967295
 80069e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069e4:	f10a 0a01 	add.w	sl, sl, #1
 80069e8:	9304      	str	r3, [sp, #16]
 80069ea:	9307      	str	r3, [sp, #28]
 80069ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069f0:	931a      	str	r3, [sp, #104]	; 0x68
 80069f2:	4654      	mov	r4, sl
 80069f4:	2205      	movs	r2, #5
 80069f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069fa:	4858      	ldr	r0, [pc, #352]	; (8006b5c <_vfiprintf_r+0x24c>)
 80069fc:	f7f9 fc10 	bl	8000220 <memchr>
 8006a00:	9a04      	ldr	r2, [sp, #16]
 8006a02:	b9d8      	cbnz	r0, 8006a3c <_vfiprintf_r+0x12c>
 8006a04:	06d1      	lsls	r1, r2, #27
 8006a06:	bf44      	itt	mi
 8006a08:	2320      	movmi	r3, #32
 8006a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a0e:	0713      	lsls	r3, r2, #28
 8006a10:	bf44      	itt	mi
 8006a12:	232b      	movmi	r3, #43	; 0x2b
 8006a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a18:	f89a 3000 	ldrb.w	r3, [sl]
 8006a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1e:	d015      	beq.n	8006a4c <_vfiprintf_r+0x13c>
 8006a20:	9a07      	ldr	r2, [sp, #28]
 8006a22:	4654      	mov	r4, sl
 8006a24:	2000      	movs	r0, #0
 8006a26:	f04f 0c0a 	mov.w	ip, #10
 8006a2a:	4621      	mov	r1, r4
 8006a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a30:	3b30      	subs	r3, #48	; 0x30
 8006a32:	2b09      	cmp	r3, #9
 8006a34:	d94e      	bls.n	8006ad4 <_vfiprintf_r+0x1c4>
 8006a36:	b1b0      	cbz	r0, 8006a66 <_vfiprintf_r+0x156>
 8006a38:	9207      	str	r2, [sp, #28]
 8006a3a:	e014      	b.n	8006a66 <_vfiprintf_r+0x156>
 8006a3c:	eba0 0308 	sub.w	r3, r0, r8
 8006a40:	fa09 f303 	lsl.w	r3, r9, r3
 8006a44:	4313      	orrs	r3, r2
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	46a2      	mov	sl, r4
 8006a4a:	e7d2      	b.n	80069f2 <_vfiprintf_r+0xe2>
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	1d19      	adds	r1, r3, #4
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	9103      	str	r1, [sp, #12]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	bfbb      	ittet	lt
 8006a58:	425b      	neglt	r3, r3
 8006a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a5e:	9307      	strge	r3, [sp, #28]
 8006a60:	9307      	strlt	r3, [sp, #28]
 8006a62:	bfb8      	it	lt
 8006a64:	9204      	strlt	r2, [sp, #16]
 8006a66:	7823      	ldrb	r3, [r4, #0]
 8006a68:	2b2e      	cmp	r3, #46	; 0x2e
 8006a6a:	d10c      	bne.n	8006a86 <_vfiprintf_r+0x176>
 8006a6c:	7863      	ldrb	r3, [r4, #1]
 8006a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a70:	d135      	bne.n	8006ade <_vfiprintf_r+0x1ce>
 8006a72:	9b03      	ldr	r3, [sp, #12]
 8006a74:	1d1a      	adds	r2, r3, #4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	9203      	str	r2, [sp, #12]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	bfb8      	it	lt
 8006a7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a82:	3402      	adds	r4, #2
 8006a84:	9305      	str	r3, [sp, #20]
 8006a86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b6c <_vfiprintf_r+0x25c>
 8006a8a:	7821      	ldrb	r1, [r4, #0]
 8006a8c:	2203      	movs	r2, #3
 8006a8e:	4650      	mov	r0, sl
 8006a90:	f7f9 fbc6 	bl	8000220 <memchr>
 8006a94:	b140      	cbz	r0, 8006aa8 <_vfiprintf_r+0x198>
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	eba0 000a 	sub.w	r0, r0, sl
 8006a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8006aa0:	9b04      	ldr	r3, [sp, #16]
 8006aa2:	4303      	orrs	r3, r0
 8006aa4:	3401      	adds	r4, #1
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aac:	482c      	ldr	r0, [pc, #176]	; (8006b60 <_vfiprintf_r+0x250>)
 8006aae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ab2:	2206      	movs	r2, #6
 8006ab4:	f7f9 fbb4 	bl	8000220 <memchr>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d03f      	beq.n	8006b3c <_vfiprintf_r+0x22c>
 8006abc:	4b29      	ldr	r3, [pc, #164]	; (8006b64 <_vfiprintf_r+0x254>)
 8006abe:	bb1b      	cbnz	r3, 8006b08 <_vfiprintf_r+0x1f8>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	3307      	adds	r3, #7
 8006ac4:	f023 0307 	bic.w	r3, r3, #7
 8006ac8:	3308      	adds	r3, #8
 8006aca:	9303      	str	r3, [sp, #12]
 8006acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ace:	443b      	add	r3, r7
 8006ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ad2:	e767      	b.n	80069a4 <_vfiprintf_r+0x94>
 8006ad4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ad8:	460c      	mov	r4, r1
 8006ada:	2001      	movs	r0, #1
 8006adc:	e7a5      	b.n	8006a2a <_vfiprintf_r+0x11a>
 8006ade:	2300      	movs	r3, #0
 8006ae0:	3401      	adds	r4, #1
 8006ae2:	9305      	str	r3, [sp, #20]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f04f 0c0a 	mov.w	ip, #10
 8006aea:	4620      	mov	r0, r4
 8006aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006af0:	3a30      	subs	r2, #48	; 0x30
 8006af2:	2a09      	cmp	r2, #9
 8006af4:	d903      	bls.n	8006afe <_vfiprintf_r+0x1ee>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0c5      	beq.n	8006a86 <_vfiprintf_r+0x176>
 8006afa:	9105      	str	r1, [sp, #20]
 8006afc:	e7c3      	b.n	8006a86 <_vfiprintf_r+0x176>
 8006afe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b02:	4604      	mov	r4, r0
 8006b04:	2301      	movs	r3, #1
 8006b06:	e7f0      	b.n	8006aea <_vfiprintf_r+0x1da>
 8006b08:	ab03      	add	r3, sp, #12
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	462a      	mov	r2, r5
 8006b0e:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <_vfiprintf_r+0x258>)
 8006b10:	a904      	add	r1, sp, #16
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7fd fc8a 	bl	800442c <_printf_float>
 8006b18:	4607      	mov	r7, r0
 8006b1a:	1c78      	adds	r0, r7, #1
 8006b1c:	d1d6      	bne.n	8006acc <_vfiprintf_r+0x1bc>
 8006b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b20:	07d9      	lsls	r1, r3, #31
 8006b22:	d405      	bmi.n	8006b30 <_vfiprintf_r+0x220>
 8006b24:	89ab      	ldrh	r3, [r5, #12]
 8006b26:	059a      	lsls	r2, r3, #22
 8006b28:	d402      	bmi.n	8006b30 <_vfiprintf_r+0x220>
 8006b2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b2c:	f7ff f9d0 	bl	8005ed0 <__retarget_lock_release_recursive>
 8006b30:	89ab      	ldrh	r3, [r5, #12]
 8006b32:	065b      	lsls	r3, r3, #25
 8006b34:	f53f af12 	bmi.w	800695c <_vfiprintf_r+0x4c>
 8006b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b3a:	e711      	b.n	8006960 <_vfiprintf_r+0x50>
 8006b3c:	ab03      	add	r3, sp, #12
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	462a      	mov	r2, r5
 8006b42:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <_vfiprintf_r+0x258>)
 8006b44:	a904      	add	r1, sp, #16
 8006b46:	4630      	mov	r0, r6
 8006b48:	f7fd ff14 	bl	8004974 <_printf_i>
 8006b4c:	e7e4      	b.n	8006b18 <_vfiprintf_r+0x208>
 8006b4e:	bf00      	nop
 8006b50:	08006f84 	.word	0x08006f84
 8006b54:	08006fa4 	.word	0x08006fa4
 8006b58:	08006f64 	.word	0x08006f64
 8006b5c:	0800711c 	.word	0x0800711c
 8006b60:	08007126 	.word	0x08007126
 8006b64:	0800442d 	.word	0x0800442d
 8006b68:	080068eb 	.word	0x080068eb
 8006b6c:	08007122 	.word	0x08007122

08006b70 <_sbrk_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4d06      	ldr	r5, [pc, #24]	; (8006b8c <_sbrk_r+0x1c>)
 8006b74:	2300      	movs	r3, #0
 8006b76:	4604      	mov	r4, r0
 8006b78:	4608      	mov	r0, r1
 8006b7a:	602b      	str	r3, [r5, #0]
 8006b7c:	f7fb f8d2 	bl	8001d24 <_sbrk>
 8006b80:	1c43      	adds	r3, r0, #1
 8006b82:	d102      	bne.n	8006b8a <_sbrk_r+0x1a>
 8006b84:	682b      	ldr	r3, [r5, #0]
 8006b86:	b103      	cbz	r3, 8006b8a <_sbrk_r+0x1a>
 8006b88:	6023      	str	r3, [r4, #0]
 8006b8a:	bd38      	pop	{r3, r4, r5, pc}
 8006b8c:	20000394 	.word	0x20000394

08006b90 <__sread>:
 8006b90:	b510      	push	{r4, lr}
 8006b92:	460c      	mov	r4, r1
 8006b94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b98:	f000 f8e2 	bl	8006d60 <_read_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	bfab      	itete	ge
 8006ba0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ba2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ba4:	181b      	addge	r3, r3, r0
 8006ba6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006baa:	bfac      	ite	ge
 8006bac:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bae:	81a3      	strhlt	r3, [r4, #12]
 8006bb0:	bd10      	pop	{r4, pc}

08006bb2 <__swrite>:
 8006bb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb6:	461f      	mov	r7, r3
 8006bb8:	898b      	ldrh	r3, [r1, #12]
 8006bba:	05db      	lsls	r3, r3, #23
 8006bbc:	4605      	mov	r5, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	4616      	mov	r6, r2
 8006bc2:	d505      	bpl.n	8006bd0 <__swrite+0x1e>
 8006bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc8:	2302      	movs	r3, #2
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f000 f898 	bl	8006d00 <_lseek_r>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	4632      	mov	r2, r6
 8006bde:	463b      	mov	r3, r7
 8006be0:	4628      	mov	r0, r5
 8006be2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006be6:	f000 b817 	b.w	8006c18 <_write_r>

08006bea <__sseek>:
 8006bea:	b510      	push	{r4, lr}
 8006bec:	460c      	mov	r4, r1
 8006bee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bf2:	f000 f885 	bl	8006d00 <_lseek_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	89a3      	ldrh	r3, [r4, #12]
 8006bfa:	bf15      	itete	ne
 8006bfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006bfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c06:	81a3      	strheq	r3, [r4, #12]
 8006c08:	bf18      	it	ne
 8006c0a:	81a3      	strhne	r3, [r4, #12]
 8006c0c:	bd10      	pop	{r4, pc}

08006c0e <__sclose>:
 8006c0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c12:	f000 b831 	b.w	8006c78 <_close_r>
	...

08006c18 <_write_r>:
 8006c18:	b538      	push	{r3, r4, r5, lr}
 8006c1a:	4d07      	ldr	r5, [pc, #28]	; (8006c38 <_write_r+0x20>)
 8006c1c:	4604      	mov	r4, r0
 8006c1e:	4608      	mov	r0, r1
 8006c20:	4611      	mov	r1, r2
 8006c22:	2200      	movs	r2, #0
 8006c24:	602a      	str	r2, [r5, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f7fa f9d7 	bl	8000fda <_write>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d102      	bne.n	8006c36 <_write_r+0x1e>
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	b103      	cbz	r3, 8006c36 <_write_r+0x1e>
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	bd38      	pop	{r3, r4, r5, pc}
 8006c38:	20000394 	.word	0x20000394

08006c3c <__assert_func>:
 8006c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c3e:	4614      	mov	r4, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <__assert_func+0x2c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4605      	mov	r5, r0
 8006c48:	68d8      	ldr	r0, [r3, #12]
 8006c4a:	b14c      	cbz	r4, 8006c60 <__assert_func+0x24>
 8006c4c:	4b07      	ldr	r3, [pc, #28]	; (8006c6c <__assert_func+0x30>)
 8006c4e:	9100      	str	r1, [sp, #0]
 8006c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c54:	4906      	ldr	r1, [pc, #24]	; (8006c70 <__assert_func+0x34>)
 8006c56:	462b      	mov	r3, r5
 8006c58:	f000 f81e 	bl	8006c98 <fiprintf>
 8006c5c:	f000 f89f 	bl	8006d9e <abort>
 8006c60:	4b04      	ldr	r3, [pc, #16]	; (8006c74 <__assert_func+0x38>)
 8006c62:	461c      	mov	r4, r3
 8006c64:	e7f3      	b.n	8006c4e <__assert_func+0x12>
 8006c66:	bf00      	nop
 8006c68:	2000000c 	.word	0x2000000c
 8006c6c:	0800712d 	.word	0x0800712d
 8006c70:	0800713a 	.word	0x0800713a
 8006c74:	08007168 	.word	0x08007168

08006c78 <_close_r>:
 8006c78:	b538      	push	{r3, r4, r5, lr}
 8006c7a:	4d06      	ldr	r5, [pc, #24]	; (8006c94 <_close_r+0x1c>)
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	4604      	mov	r4, r0
 8006c80:	4608      	mov	r0, r1
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	f7fb f819 	bl	8001cba <_close>
 8006c88:	1c43      	adds	r3, r0, #1
 8006c8a:	d102      	bne.n	8006c92 <_close_r+0x1a>
 8006c8c:	682b      	ldr	r3, [r5, #0]
 8006c8e:	b103      	cbz	r3, 8006c92 <_close_r+0x1a>
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	bd38      	pop	{r3, r4, r5, pc}
 8006c94:	20000394 	.word	0x20000394

08006c98 <fiprintf>:
 8006c98:	b40e      	push	{r1, r2, r3}
 8006c9a:	b503      	push	{r0, r1, lr}
 8006c9c:	4601      	mov	r1, r0
 8006c9e:	ab03      	add	r3, sp, #12
 8006ca0:	4805      	ldr	r0, [pc, #20]	; (8006cb8 <fiprintf+0x20>)
 8006ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca6:	6800      	ldr	r0, [r0, #0]
 8006ca8:	9301      	str	r3, [sp, #4]
 8006caa:	f7ff fe31 	bl	8006910 <_vfiprintf_r>
 8006cae:	b002      	add	sp, #8
 8006cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb4:	b003      	add	sp, #12
 8006cb6:	4770      	bx	lr
 8006cb8:	2000000c 	.word	0x2000000c

08006cbc <_fstat_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4d07      	ldr	r5, [pc, #28]	; (8006cdc <_fstat_r+0x20>)
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4608      	mov	r0, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	602b      	str	r3, [r5, #0]
 8006cca:	f7fb f802 	bl	8001cd2 <_fstat>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d102      	bne.n	8006cd8 <_fstat_r+0x1c>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	b103      	cbz	r3, 8006cd8 <_fstat_r+0x1c>
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	bd38      	pop	{r3, r4, r5, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000394 	.word	0x20000394

08006ce0 <_isatty_r>:
 8006ce0:	b538      	push	{r3, r4, r5, lr}
 8006ce2:	4d06      	ldr	r5, [pc, #24]	; (8006cfc <_isatty_r+0x1c>)
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	4608      	mov	r0, r1
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	f7fb f801 	bl	8001cf2 <_isatty>
 8006cf0:	1c43      	adds	r3, r0, #1
 8006cf2:	d102      	bne.n	8006cfa <_isatty_r+0x1a>
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	b103      	cbz	r3, 8006cfa <_isatty_r+0x1a>
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	bd38      	pop	{r3, r4, r5, pc}
 8006cfc:	20000394 	.word	0x20000394

08006d00 <_lseek_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	4d07      	ldr	r5, [pc, #28]	; (8006d20 <_lseek_r+0x20>)
 8006d04:	4604      	mov	r4, r0
 8006d06:	4608      	mov	r0, r1
 8006d08:	4611      	mov	r1, r2
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	602a      	str	r2, [r5, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	f7fa fffa 	bl	8001d08 <_lseek>
 8006d14:	1c43      	adds	r3, r0, #1
 8006d16:	d102      	bne.n	8006d1e <_lseek_r+0x1e>
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	b103      	cbz	r3, 8006d1e <_lseek_r+0x1e>
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	bd38      	pop	{r3, r4, r5, pc}
 8006d20:	20000394 	.word	0x20000394

08006d24 <__ascii_mbtowc>:
 8006d24:	b082      	sub	sp, #8
 8006d26:	b901      	cbnz	r1, 8006d2a <__ascii_mbtowc+0x6>
 8006d28:	a901      	add	r1, sp, #4
 8006d2a:	b142      	cbz	r2, 8006d3e <__ascii_mbtowc+0x1a>
 8006d2c:	b14b      	cbz	r3, 8006d42 <__ascii_mbtowc+0x1e>
 8006d2e:	7813      	ldrb	r3, [r2, #0]
 8006d30:	600b      	str	r3, [r1, #0]
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	1e10      	subs	r0, r2, #0
 8006d36:	bf18      	it	ne
 8006d38:	2001      	movne	r0, #1
 8006d3a:	b002      	add	sp, #8
 8006d3c:	4770      	bx	lr
 8006d3e:	4610      	mov	r0, r2
 8006d40:	e7fb      	b.n	8006d3a <__ascii_mbtowc+0x16>
 8006d42:	f06f 0001 	mvn.w	r0, #1
 8006d46:	e7f8      	b.n	8006d3a <__ascii_mbtowc+0x16>

08006d48 <__malloc_lock>:
 8006d48:	4801      	ldr	r0, [pc, #4]	; (8006d50 <__malloc_lock+0x8>)
 8006d4a:	f7ff b8c0 	b.w	8005ece <__retarget_lock_acquire_recursive>
 8006d4e:	bf00      	nop
 8006d50:	20000388 	.word	0x20000388

08006d54 <__malloc_unlock>:
 8006d54:	4801      	ldr	r0, [pc, #4]	; (8006d5c <__malloc_unlock+0x8>)
 8006d56:	f7ff b8bb 	b.w	8005ed0 <__retarget_lock_release_recursive>
 8006d5a:	bf00      	nop
 8006d5c:	20000388 	.word	0x20000388

08006d60 <_read_r>:
 8006d60:	b538      	push	{r3, r4, r5, lr}
 8006d62:	4d07      	ldr	r5, [pc, #28]	; (8006d80 <_read_r+0x20>)
 8006d64:	4604      	mov	r4, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	4611      	mov	r1, r2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	602a      	str	r2, [r5, #0]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	f7fa ff86 	bl	8001c80 <_read>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_read_r+0x1e>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_read_r+0x1e>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	20000394 	.word	0x20000394

08006d84 <__ascii_wctomb>:
 8006d84:	b149      	cbz	r1, 8006d9a <__ascii_wctomb+0x16>
 8006d86:	2aff      	cmp	r2, #255	; 0xff
 8006d88:	bf85      	ittet	hi
 8006d8a:	238a      	movhi	r3, #138	; 0x8a
 8006d8c:	6003      	strhi	r3, [r0, #0]
 8006d8e:	700a      	strbls	r2, [r1, #0]
 8006d90:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d94:	bf98      	it	ls
 8006d96:	2001      	movls	r0, #1
 8006d98:	4770      	bx	lr
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	4770      	bx	lr

08006d9e <abort>:
 8006d9e:	b508      	push	{r3, lr}
 8006da0:	2006      	movs	r0, #6
 8006da2:	f000 f82b 	bl	8006dfc <raise>
 8006da6:	2001      	movs	r0, #1
 8006da8:	f7fa ff60 	bl	8001c6c <_exit>

08006dac <_raise_r>:
 8006dac:	291f      	cmp	r1, #31
 8006dae:	b538      	push	{r3, r4, r5, lr}
 8006db0:	4604      	mov	r4, r0
 8006db2:	460d      	mov	r5, r1
 8006db4:	d904      	bls.n	8006dc0 <_raise_r+0x14>
 8006db6:	2316      	movs	r3, #22
 8006db8:	6003      	str	r3, [r0, #0]
 8006dba:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006dc2:	b112      	cbz	r2, 8006dca <_raise_r+0x1e>
 8006dc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006dc8:	b94b      	cbnz	r3, 8006dde <_raise_r+0x32>
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f000 f830 	bl	8006e30 <_getpid_r>
 8006dd0:	462a      	mov	r2, r5
 8006dd2:	4601      	mov	r1, r0
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dda:	f000 b817 	b.w	8006e0c <_kill_r>
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d00a      	beq.n	8006df8 <_raise_r+0x4c>
 8006de2:	1c59      	adds	r1, r3, #1
 8006de4:	d103      	bne.n	8006dee <_raise_r+0x42>
 8006de6:	2316      	movs	r3, #22
 8006de8:	6003      	str	r3, [r0, #0]
 8006dea:	2001      	movs	r0, #1
 8006dec:	e7e7      	b.n	8006dbe <_raise_r+0x12>
 8006dee:	2400      	movs	r4, #0
 8006df0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006df4:	4628      	mov	r0, r5
 8006df6:	4798      	blx	r3
 8006df8:	2000      	movs	r0, #0
 8006dfa:	e7e0      	b.n	8006dbe <_raise_r+0x12>

08006dfc <raise>:
 8006dfc:	4b02      	ldr	r3, [pc, #8]	; (8006e08 <raise+0xc>)
 8006dfe:	4601      	mov	r1, r0
 8006e00:	6818      	ldr	r0, [r3, #0]
 8006e02:	f7ff bfd3 	b.w	8006dac <_raise_r>
 8006e06:	bf00      	nop
 8006e08:	2000000c 	.word	0x2000000c

08006e0c <_kill_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d07      	ldr	r5, [pc, #28]	; (8006e2c <_kill_r+0x20>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	4611      	mov	r1, r2
 8006e18:	602b      	str	r3, [r5, #0]
 8006e1a:	f7fa ff17 	bl	8001c4c <_kill>
 8006e1e:	1c43      	adds	r3, r0, #1
 8006e20:	d102      	bne.n	8006e28 <_kill_r+0x1c>
 8006e22:	682b      	ldr	r3, [r5, #0]
 8006e24:	b103      	cbz	r3, 8006e28 <_kill_r+0x1c>
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	bd38      	pop	{r3, r4, r5, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000394 	.word	0x20000394

08006e30 <_getpid_r>:
 8006e30:	f7fa bf04 	b.w	8001c3c <_getpid>

08006e34 <_init>:
 8006e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e36:	bf00      	nop
 8006e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e3a:	bc08      	pop	{r3}
 8006e3c:	469e      	mov	lr, r3
 8006e3e:	4770      	bx	lr

08006e40 <_fini>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	bf00      	nop
 8006e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e46:	bc08      	pop	{r3}
 8006e48:	469e      	mov	lr, r3
 8006e4a:	4770      	bx	lr
