
motor_sys_id_f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000816c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08008340  08008340  00018340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008940  08008940  00018940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00018948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800894c  0800894c  0001894c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001e8  08008b34  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f0  08008b34  000203f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce23  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002076  00000000  00000000  0002d037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  0002f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af0  00000000  00000000  0002fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022af7  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dc66  00000000  00000000  0005324f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0507  00000000  00000000  00060eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001313bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d4  00000000  00000000  0013140c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008324 	.word	0x08008324

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08008324 	.word	0x08008324

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f9c:	f003 0301 	and.w	r3, r3, #1
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d013      	beq.n	8000fcc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb4:	e000      	b.n	8000fb8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fb6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d0f9      	beq.n	8000fb6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fc2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_write>:
float random_input[] = {10.8284,10.5706,11.5183,11.5189,11.902,11.0753,11.2791,11.7464,10.5519,10.5802,11.2946,11.5067,10.5115,11.0751,10.6003,11.1262,11.5302,11.3835,11.8957,11.7693,11.2904,10.6379,11.4809,11.124,11.5518,11.8655,11.6433,10.8937,10.5712,11.6041,10.9924,11.449,11.6346,11.9866,11.048,10.8706,11.9738,11.584,11.63,11.4773,10.609,11.4475,11.8271,10.9091,11.1546,11.6497,11.2166,10.8567,10.9124,11.0389,10.7498,11.2298,11.8465,11.8638,10.5908,11.857,11.2568,11.2744,10.9785,11.98,11.241,10.8992,10.6361,11.9216,10.6106,11.2511,11.0762,10.9156,11.8707,11.2946,11.1967,11.9115,10.5751,11.6423,11.6553,11.7417,10.688,10.5238,11.5327,11.8024,11.4443,11.6043,11.5881,11.9992,11.8329,10.8498,10.9595,11.0265,11.2699,11.3867,11.769,11.1181,11.7623,10.904,11.1231,11.306,11.2019,10.9308,10.7675,10.7306,11.3575,11.7036,10.5496,11.3017,11.2477,11.933,11.6224,11.3319,11.8361,11.4373,11.7631,10.7397,10.8191,11.5721,10.6956,10.6365,10.9119,10.5045,11.1214,10.5403,11.5647,11.9068,10.8599,10.7713,10.9763,11.8305,11.4781,10.7255,11.522,11.0787,11.0816,11.2496,10.7213,11.3808,11.7684,11.3852,11.9331,11.3342,10.7222,11.975,11.1132,10.7127,11.3473,10.8782,11.2328,11.196,11.9416,10.689,10.7996,10.9789,11.4439,10.6901,11.4769,11.4325,11.7046,10.8718,11.2146,11.084,10.8049,10.5426,11.8525,11.1397,10.713,11.9212,11.1155,10.6968,11.8285,10.6383,10.7433,10.6066,11.048,10.8796,10.7027,11.6747,11.183,11.0243,11.1785,11.7134,11.8975,11.4775,10.8229,11.5194,11.8634,10.8752,11.7913,11.2069,11.2589,11.4006,11.7263,11.6338,11.1934,11.9271,11.4491,11.159,11.737,11.5335,11.5533,11.9807,11.9316,11.7769,10.934,11.3061,11.2717,10.6552,11.121,11.3651,11.8148,11.1601,11.5946,11.8039,11.5735,11.7011,11.5598,11.6126,10.5286,11.829,11.2875,11.195,10.5978,11.5701,11.2334,11.5015,11.5231,10.7993,11.875,11.7988,11.835,11.3159,10.7088,11.1755,11.984,10.8233,11.169,10.9736,11.272,11.8223,11.1596,11.2013,11.71,11.0477,10.8173,11.9987,10.7304,11.4457,11.4245,10.5009,10.5013,11.66,11.591,10.9788,11.1266,11.5237,11.5208,10.8079,11.7546,11.5634,11.7431,10.6418,10.6226,11.646,11.4444,10.8208,10.8203,10.6216,11.0832,11.9282,11.9213,11.0848,10.9038,11.5383,10.9261,11.6653,11.6758,11.1337,10.9232,10.791,10.517,10.7877,11.9749,10.8661,11.7296,10.7047,11.0972,11.4015,10.7653,11.7425,10.7366,11.9819,10.8858,10.8504,10.6525,10.8291,11.4521,11.544,11.6922,11.5444,11.6294,11.5043,11.4501,10.5847,11.3973,10.8405,10.9782,11.5498,10.6762,11.6439,11.2892,11.3309,11.382,10.9945,11.5545,10.7146,10.7425,11.228,11.7903,11.7199,11.3353,11.6085,10.974,10.703,11.2928,10.9661,11.3822,11.2771,11.1463,10.8883,11.0553,11.0895,11.1703,11.2138,11.0817,10.9189,10.6174,11.0546,10.8809,11.5077,11.5144,11.2709,11.5929,11.5812,11.9171,11.191,11.9102,10.9823,11.1907,11.2757,11.492,11.1027,11.4085,11.9798,10.7256,11.5051,11.0157,11.3126,11.2842,11.7439,10.5224,10.9113,11.4645,11.3192,11.8768,10.8999,11.9551,10.8701,11.766,11.541,11.1836,11.7257,10.5331,10.7411,11.5604,11.5617,11.155,11.3736,11.6276,11.9873,11.5435,10.9193,11.6308,10.7568,10.5064,11.2435,10.6199,10.7446,11.855,11.6745,11.62,11.1546,10.5095,11.3772,11.2777,10.6003,11.316,11.0846,10.8237,11.0787,11.4403,11.4886,11.564,11.308,10.9204};
//float random_ref[] = {-12.3287,10.9452,5.2206,-8.0576,9.5509,-2.1198,-6.9697,-8.9396,6.2012,-11.2513,-3.0082};
float random_ref[] = {-9.4836,8.4194,4.0158,-6.1982,7.3468,-1.6306,-5.3613,-6.8766,4.7701,-8.6549,-2.314};


int _write(int file, char *ptr, int len){
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i ++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
		ITM_SendChar((*ptr++));
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffc9 	bl	8000f8c <ITM_SendChar>
	for(int i = 0; i < len; i ++){
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
	}
	return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <logger_setup>:
void logger_setup(Logger *logger){
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	logger->time_stamp = 0;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
	logger->sample_size = sizeof(random_input)/sizeof(float);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f240 1291 	movw	r2, #401	; 0x191
 8001028:	605a      	str	r2, [r3, #4]
	logger->sample_iter_idx = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
	logger->finished_logging = 0;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <log_motor_state>:

void log_motor_state(motor *motor, float time_stamp){
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af04      	add	r7, sp, #16
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	ed87 0a00 	vstr	s0, [r7]
	printf("%f, %f, %f\n", time_stamp, motor->driver.pwm_duty, motor->angular_vel);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff fa99 	bl	8000588 <__aeabi_f2d>
 8001056:	4604      	mov	r4, r0
 8001058:	460d      	mov	r5, r1
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fa92 	bl	8000588 <__aeabi_f2d>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800106a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800106e:	e9cd 0100 	strd	r0, r1, [sp]
 8001072:	4622      	mov	r2, r4
 8001074:	462b      	mov	r3, r5
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <log_motor_state+0x40>)
 8001078:	f003 ffce 	bl	8005018 <iprintf>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bdb0      	pop	{r4, r5, r7, pc}
 8001084:	08008340 	.word	0x08008340

08001088 <HAL_TIM_PeriodElapsedCallback>:
float output_duty = 0;
int sample_idx = 0;
float sine_freq = 132;
float sine_amplitude = 6;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001088:	b5b0      	push	{r4, r5, r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
	if (htim == &htim5){
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a31      	ldr	r2, [pc, #196]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d15a      	bne.n	800114e <HAL_TIM_PeriodElapsedCallback+0xc6>
		motor_encoder_update(&motor_1);
 8001098:	4830      	ldr	r0, [pc, #192]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800109a:	f000 fd01 	bl	8001aa0 <motor_encoder_update>

		if (tim_cnt == 0){
 800109e:	4b30      	ldr	r3, [pc, #192]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d102      	bne.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x24>
			printf("timestamp, output_voltage, angular_velocity \n");
 80010a6:	482f      	ldr	r0, [pc, #188]	; (8001164 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80010a8:	f004 f83c 	bl	8005124 <puts>

//     if (sec == 1)
//    	 motor_1.controller.command_vel = 6.0;
//    	 motor_duty_output(&motor_1, 0.5);

	motor_1.controller.command_vel = sine_amplitude * sin(sine_freq * sec);
 80010ac:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fa69 	bl	8000588 <__aeabi_f2d>
 80010b6:	4604      	mov	r4, r0
 80010b8:	460d      	mov	r5, r1
 80010ba:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80010bc:	ed93 7a00 	vldr	s14, [r3]
 80010c0:	4b2b      	ldr	r3, [pc, #172]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80010c2:	edd3 7a00 	vldr	s15, [r3]
 80010c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ca:	ee17 0a90 	vmov	r0, s15
 80010ce:	f7ff fa5b 	bl	8000588 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	ec43 2b10 	vmov	d0, r2, r3
 80010da:	f006 f8d9 	bl	8007290 <sin>
 80010de:	ec53 2b10 	vmov	r2, r3, d0
 80010e2:	4620      	mov	r0, r4
 80010e4:	4629      	mov	r1, r5
 80010e6:	f7ff faa7 	bl	8000638 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	491b      	ldr	r1, [pc, #108]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010f0:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

    motor_command_tracking(&motor_1);
 80010f4:	4819      	ldr	r0, [pc, #100]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010f6:	f000 fd83 	bl	8001c00 <motor_command_tracking>

     if (tim_cnt % 4 == 0 && sec <= 5)
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0303 	and.w	r3, r3, #3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d111      	bne.n	800112a <HAL_TIM_PeriodElapsedCallback+0xa2>
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001110:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	d807      	bhi.n	800112a <HAL_TIM_PeriodElapsedCallback+0xa2>
       log_motor_state(&motor_1, sec);
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	eeb0 0a67 	vmov.f32	s0, s15
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001126:	f7ff ff8d 	bl	8001044 <log_motor_state>

		tim_cnt ++;
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a0b      	ldr	r2, [pc, #44]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001132:	6013      	str	r3, [r2, #0]
		sec = (float)tim_cnt/1000;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001140:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001174 <HAL_TIM_PeriodElapsedCallback+0xec>
 8001144:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bdb0      	pop	{r4, r5, r7, pc}
 8001156:	bf00      	nop
 8001158:	20000294 	.word	0x20000294
 800115c:	20000328 	.word	0x20000328
 8001160:	200003d0 	.word	0x200003d0
 8001164:	0800834c 	.word	0x0800834c
 8001168:	20000004 	.word	0x20000004
 800116c:	20000000 	.word	0x20000000
 8001170:	200003d4 	.word	0x200003d4
 8001174:	447a0000 	.word	0x447a0000

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f001 f81e 	bl	80021bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f81e 	bl	80011c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 fa46 	bl	8001614 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001188:	f000 f88c 	bl	80012a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800118c:	f000 f8de 	bl	800134c <MX_TIM4_Init>
  MX_TIM5_Init();
 8001190:	f000 f952 	bl	8001438 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001194:	f000 f99e 	bl	80014d4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  motor_hardware_setup(&motor_1);
 8001198:	4806      	ldr	r0, [pc, #24]	; (80011b4 <main+0x3c>)
 800119a:	f000 fa95 	bl	80016c8 <motor_hardware_setup>
  motor_driver_initialize(&motor_1);
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <main+0x3c>)
 80011a0:	f000 fb14 	bl	80017cc <motor_driver_initialize>
  logger_setup(&logger);
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <main+0x40>)
 80011a6:	f7ff ff34 	bl	8001012 <logger_setup>
  HAL_TIM_Base_Start_IT(&htim5);
 80011aa:	4804      	ldr	r0, [pc, #16]	; (80011bc <main+0x44>)
 80011ac:	f002 f906 	bl	80033bc <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <main+0x38>
 80011b2:	bf00      	nop
 80011b4:	20000328 	.word	0x20000328
 80011b8:	200003c0 	.word	0x200003c0
 80011bc:	20000294 	.word	0x20000294

080011c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b094      	sub	sp, #80	; 0x50
 80011c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011c6:	f107 031c 	add.w	r3, r7, #28
 80011ca:	2234      	movs	r2, #52	; 0x34
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f003 fab0 	bl	8004734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b2c      	ldr	r3, [pc, #176]	; (800129c <SystemClock_Config+0xdc>)
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	4a2b      	ldr	r2, [pc, #172]	; (800129c <SystemClock_Config+0xdc>)
 80011ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f2:	6413      	str	r3, [r2, #64]	; 0x40
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <SystemClock_Config+0xdc>)
 80011f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	4b26      	ldr	r3, [pc, #152]	; (80012a0 <SystemClock_Config+0xe0>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a25      	ldr	r2, [pc, #148]	; (80012a0 <SystemClock_Config+0xe0>)
 800120a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b23      	ldr	r3, [pc, #140]	; (80012a0 <SystemClock_Config+0xe0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001218:	603b      	str	r3, [r7, #0]
 800121a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800121c:	2302      	movs	r3, #2
 800121e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001220:	2301      	movs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001224:	2310      	movs	r3, #16
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001228:	2302      	movs	r3, #2
 800122a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122c:	2300      	movs	r3, #0
 800122e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001230:	2308      	movs	r3, #8
 8001232:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001234:	23b4      	movs	r3, #180	; 0xb4
 8001236:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001238:	2302      	movs	r3, #2
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001240:	2302      	movs	r3, #2
 8001242:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4618      	mov	r0, r3
 800124a:	f001 fdc9 	bl	8002de0 <HAL_RCC_OscConfig>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001254:	f000 fa30 	bl	80016b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001258:	f001 fae2 	bl	8002820 <HAL_PWREx_EnableOverDrive>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001262:	f000 fa29 	bl	80016b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001266:	230f      	movs	r3, #15
 8001268:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2302      	movs	r3, #2
 800126c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001272:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001276:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800127e:	f107 0308 	add.w	r3, r7, #8
 8001282:	2105      	movs	r1, #5
 8001284:	4618      	mov	r0, r3
 8001286:	f001 fb1b 	bl	80028c0 <HAL_RCC_ClockConfig>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001290:	f000 fa12 	bl	80016b8 <Error_Handler>
  }
}
 8001294:	bf00      	nop
 8001296:	3750      	adds	r7, #80	; 0x50
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40023800 	.word	0x40023800
 80012a0:	40007000 	.word	0x40007000

080012a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fa3e 	bl	8004734 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012c0:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012c2:	4a21      	ldr	r2, [pc, #132]	; (8001348 <MX_TIM3_Init+0xa4>)
 80012c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1a      	ldr	r3, [pc, #104]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM3_Init+0xa0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e6:	2303      	movs	r3, #3
 80012e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ee:	2301      	movs	r3, #1
 80012f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012fe:	2301      	movs	r3, #1
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800130a:	f107 030c 	add.w	r3, r7, #12
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM3_Init+0xa0>)
 8001312:	f002 f9e5 	bl	80036e0 <HAL_TIM_Encoder_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800131c:	f000 f9cc 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM3_Init+0xa0>)
 800132e:	f003 f8f5 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001338:	f000 f9be 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3730      	adds	r7, #48	; 0x30
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000204 	.word	0x20000204
 8001348:	40000400 	.word	0x40000400

0800134c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08e      	sub	sp, #56	; 0x38
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
 8001378:	615a      	str	r2, [r3, #20]
 800137a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <MX_TIM4_Init+0xe4>)
 800137e:	4a2d      	ldr	r2, [pc, #180]	; (8001434 <MX_TIM4_Init+0xe8>)
 8001380:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <MX_TIM4_Init+0xe4>)
 8001384:	2208      	movs	r2, #8
 8001386:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <MX_TIM4_Init+0xe4>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 800138e:	4b28      	ldr	r3, [pc, #160]	; (8001430 <MX_TIM4_Init+0xe4>)
 8001390:	f242 720f 	movw	r2, #9999	; 0x270f
 8001394:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <MX_TIM4_Init+0xe4>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139c:	4b24      	ldr	r3, [pc, #144]	; (8001430 <MX_TIM4_Init+0xe4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80013a2:	4823      	ldr	r0, [pc, #140]	; (8001430 <MX_TIM4_Init+0xe4>)
 80013a4:	f001 ffba 	bl	800331c <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80013ae:	f000 f983 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013bc:	4619      	mov	r1, r3
 80013be:	481c      	ldr	r0, [pc, #112]	; (8001430 <MX_TIM4_Init+0xe4>)
 80013c0:	f002 fcac 	bl	8003d1c <HAL_TIM_ConfigClockSource>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013ca:	f000 f975 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013ce:	4818      	ldr	r0, [pc, #96]	; (8001430 <MX_TIM4_Init+0xe4>)
 80013d0:	f002 f864 	bl	800349c <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013da:	f000 f96d 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	4619      	mov	r1, r3
 80013ec:	4810      	ldr	r0, [pc, #64]	; (8001430 <MX_TIM4_Init+0xe4>)
 80013ee:	f003 f895 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013f8:	f000 f95e 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013fc:	2360      	movs	r3, #96	; 0x60
 80013fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	2200      	movs	r2, #0
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_TIM4_Init+0xe4>)
 8001414:	f002 fbc0 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800141e:	f000 f94b 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001422:	4803      	ldr	r0, [pc, #12]	; (8001430 <MX_TIM4_Init+0xe4>)
 8001424:	f000 fd3a 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001428:	bf00      	nop
 800142a:	3738      	adds	r7, #56	; 0x38
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000024c 	.word	0x2000024c
 8001434:	40000800 	.word	0x40000800

08001438 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <MX_TIM5_Init+0x94>)
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <MX_TIM5_Init+0x98>)
 8001458:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9-1;
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_TIM5_Init+0x94>)
 800145c:	2208      	movs	r2, #8
 800145e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b1a      	ldr	r3, [pc, #104]	; (80014cc <MX_TIM5_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 10000-1;
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_TIM5_Init+0x94>)
 8001468:	f242 720f 	movw	r2, #9999	; 0x270f
 800146c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <MX_TIM5_Init+0x94>)
 8001470:	2200      	movs	r2, #0
 8001472:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_TIM5_Init+0x94>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM5_Init+0x94>)
 800147c:	f001 ff4e 	bl	800331c <HAL_TIM_Base_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 f917 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800148a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001490:	f107 0308 	add.w	r3, r7, #8
 8001494:	4619      	mov	r1, r3
 8001496:	480d      	ldr	r0, [pc, #52]	; (80014cc <MX_TIM5_Init+0x94>)
 8001498:	f002 fc40 	bl	8003d1c <HAL_TIM_ConfigClockSource>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f000 f909 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	4619      	mov	r1, r3
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <MX_TIM5_Init+0x94>)
 80014b4:	f003 f832 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80014be:	f000 f8fb 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000294 	.word	0x20000294
 80014d0:	40000c00 	.word	0x40000c00

080014d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b096      	sub	sp, #88	; 0x58
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]
 8001502:	615a      	str	r2, [r3, #20]
 8001504:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2220      	movs	r2, #32
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f003 f911 	bl	8004734 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001512:	4b3e      	ldr	r3, [pc, #248]	; (800160c <MX_TIM8_Init+0x138>)
 8001514:	4a3e      	ldr	r2, [pc, #248]	; (8001610 <MX_TIM8_Init+0x13c>)
 8001516:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 9-1;
 8001518:	4b3c      	ldr	r3, [pc, #240]	; (800160c <MX_TIM8_Init+0x138>)
 800151a:	2208      	movs	r2, #8
 800151c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <MX_TIM8_Init+0x138>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 8001524:	4b39      	ldr	r3, [pc, #228]	; (800160c <MX_TIM8_Init+0x138>)
 8001526:	f242 720f 	movw	r2, #9999	; 0x270f
 800152a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b37      	ldr	r3, [pc, #220]	; (800160c <MX_TIM8_Init+0x138>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <MX_TIM8_Init+0x138>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001538:	4b34      	ldr	r3, [pc, #208]	; (800160c <MX_TIM8_Init+0x138>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800153e:	4833      	ldr	r0, [pc, #204]	; (800160c <MX_TIM8_Init+0x138>)
 8001540:	f001 feec 	bl	800331c <HAL_TIM_Base_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800154a:	f000 f8b5 	bl	80016b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001552:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001554:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001558:	4619      	mov	r1, r3
 800155a:	482c      	ldr	r0, [pc, #176]	; (800160c <MX_TIM8_Init+0x138>)
 800155c:	f002 fbde 	bl	8003d1c <HAL_TIM_ConfigClockSource>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001566:	f000 f8a7 	bl	80016b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800156a:	4828      	ldr	r0, [pc, #160]	; (800160c <MX_TIM8_Init+0x138>)
 800156c:	f001 ff96 	bl	800349c <HAL_TIM_PWM_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001576:	f000 f89f 	bl	80016b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157a:	2300      	movs	r3, #0
 800157c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001586:	4619      	mov	r1, r3
 8001588:	4820      	ldr	r0, [pc, #128]	; (800160c <MX_TIM8_Init+0x138>)
 800158a:	f002 ffc7 	bl	800451c <HAL_TIMEx_MasterConfigSynchronization>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001594:	f000 f890 	bl	80016b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001598:	2360      	movs	r3, #96	; 0x60
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	2204      	movs	r2, #4
 80015ba:	4619      	mov	r1, r3
 80015bc:	4813      	ldr	r0, [pc, #76]	; (800160c <MX_TIM8_Init+0x138>)
 80015be:	f002 faeb 	bl	8003b98 <HAL_TIM_PWM_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80015c8:	f000 f876 	bl	80016b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	4619      	mov	r1, r3
 80015ee:	4807      	ldr	r0, [pc, #28]	; (800160c <MX_TIM8_Init+0x138>)
 80015f0:	f003 f810 	bl	8004614 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80015fa:	f000 f85d 	bl	80016b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80015fe:	4803      	ldr	r0, [pc, #12]	; (800160c <MX_TIM8_Init+0x138>)
 8001600:	f000 fc4c 	bl	8001e9c <HAL_TIM_MspPostInit>

}
 8001604:	bf00      	nop
 8001606:	3758      	adds	r7, #88	; 0x58
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002dc 	.word	0x200002dc
 8001610:	40010400 	.word	0x40010400

08001614 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	f107 030c 	add.w	r3, r7, #12
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_GPIO_Init+0x9c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
 800164a:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <MX_GPIO_Init+0x9c>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a11      	ldr	r2, [pc, #68]	; (80016b0 <MX_GPIO_Init+0x9c>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_GPIO_Init+0x9c>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <MX_GPIO_Init+0xa0>)
 8001686:	f001 f8b1 	bl	80027ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800168a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_GPIO_Init+0xa0>)
 80016a4:	f000 ff0e 	bl	80024c4 <HAL_GPIO_Init>

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020000 	.word	0x40020000

080016b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016bc:	b672      	cpsid	i
}
 80016be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <Error_Handler+0x8>
 80016c2:	0000      	movs	r0, r0
 80016c4:	0000      	movs	r0, r0
	...

080016c8 <motor_hardware_setup>:
# include <motor.h>

void motor_hardware_setup(motor *motor){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	// L298N motor driver setup
    // ENA IN2 (GPIO) = PA9 PC7; IN1 IN2(PWM) = PB6(tim4_ch1), PC7(tim8_ch2)
	motor->driver.ENA_port = GPIOA;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a39      	ldr	r2, [pc, #228]	; (80017b8 <motor_hardware_setup+0xf0>)
 80016d4:	601a      	str	r2, [r3, #0]
    motor->driver.ENA_pin = GPIO_PIN_9;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016dc:	809a      	strh	r2, [r3, #4]

	motor->driver.IN1_pwm_timer = &htim4;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a36      	ldr	r2, [pc, #216]	; (80017bc <motor_hardware_setup+0xf4>)
 80016e2:	619a      	str	r2, [r3, #24]
	motor->driver.IN1_pwm_channel = TIM_CHANNEL_1;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
	motor->driver.IN1_pwm_counter = 0;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	621a      	str	r2, [r3, #32]
	
	motor->driver.IN2_pwm_timer = &htim8;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <motor_hardware_setup+0xf8>)
 80016f6:	625a      	str	r2, [r3, #36]	; 0x24
	motor->driver.IN2_pwm_channel = TIM_CHANNEL_2;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	629a      	str	r2, [r3, #40]	; 0x28
	motor->driver.IN2_pwm_counter = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	62da      	str	r2, [r3, #44]	; 0x2c

	motor->driver.pwm_duty = 0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	631a      	str	r2, [r3, #48]	; 0x30

	motor->driver.max_voltage = 12.0;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a2c      	ldr	r2, [pc, #176]	; (80017c4 <motor_hardware_setup+0xfc>)
 8001712:	635a      	str	r2, [r3, #52]	; 0x34

    // encoder parameter setup
    motor->encoder.enc_timer = &htim3;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a2c      	ldr	r2, [pc, #176]	; (80017c8 <motor_hardware_setup+0x100>)
 8001718:	64da      	str	r2, [r3, #76]	; 0x4c
    motor->encoder.current_counter = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	645a      	str	r2, [r3, #68]	; 0x44
    motor->encoder.previous_counter = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	641a      	str	r2, [r3, #64]	; 0x40
    motor->encoder.count_per_rev = 500;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800172c:	639a      	str	r2, [r3, #56]	; 0x38
    motor->encoder.reduction_ratio = 16;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2210      	movs	r2, #16
 8001732:	63da      	str	r2, [r3, #60]	; 0x3c

	// controller parameter setup
    motor->controller.control_frequency = 1000;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800173a:	651a      	str	r2, [r3, #80]	; 0x50
	motor->controller.command_vel = 0;
 800173c:	6879      	ldr	r1, [r7, #4]
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	motor->controller.tracking_error = 0;
 800174a:	6879      	ldr	r1, [r7, #4]
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	motor->controller.tracking_tolerance = 0.08;
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	a311      	add	r3, pc, #68	; (adr r3, 80017a0 <motor_hardware_setup+0xd8>)
 800175c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001760:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	motor->controller.p_gain = 0.17070489113648;
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	a310      	add	r3, pc, #64	; (adr r3, 80017a8 <motor_hardware_setup+0xe0>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	motor->controller.i_gain = 8.64438286598949;
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	a30f      	add	r3, pc, #60	; (adr r3, 80017b0 <motor_hardware_setup+0xe8>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80
//	motor->controller.p_gain = 0.68;
//	motor->controller.i_gain = 21.65;
//	motor->controller.p_gain = 0.307;
//	motor->controller.i_gain = 12.59;
	motor->controller.d_gain = 0;
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88

    HAL_TIM_Encoder_Start_IT(motor->encoder.enc_timer, TIM_CHANNEL_ALL);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	213c      	movs	r1, #60	; 0x3c
 8001790:	4618      	mov	r0, r3
 8001792:	f002 f84b 	bl	800382c <HAL_TIM_Encoder_Start_IT>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	47ae147b 	.word	0x47ae147b
 80017a4:	3fb47ae1 	.word	0x3fb47ae1
 80017a8:	6a5965e3 	.word	0x6a5965e3
 80017ac:	3fc5d9a8 	.word	0x3fc5d9a8
 80017b0:	8d0f0e23 	.word	0x8d0f0e23
 80017b4:	402149ec 	.word	0x402149ec
 80017b8:	40020000 	.word	0x40020000
 80017bc:	2000024c 	.word	0x2000024c
 80017c0:	200002dc 	.word	0x200002dc
 80017c4:	41400000 	.word	0x41400000
 80017c8:	20000204 	.word	0x20000204

080017cc <motor_driver_initialize>:

void motor_driver_initialize(motor *motor){
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(motor->driver.IN1_pwm_timer, motor->driver.IN1_pwm_channel);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	699a      	ldr	r2, [r3, #24]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69db      	ldr	r3, [r3, #28]
 80017dc:	4619      	mov	r1, r3
 80017de:	4610      	mov	r0, r2
 80017e0:	f001 feb6 	bl	8003550 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ec:	4619      	mov	r1, r3
 80017ee:	4610      	mov	r0, r2
 80017f0:	f001 feae 	bl	8003550 <HAL_TIM_PWM_Start>
	// initialize as slow decay mode
	HAL_GPIO_WritePin(motor->driver.ENA_port, motor->driver.ENA_pin, GPIO_PIN_SET);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6818      	ldr	r0, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	889b      	ldrh	r3, [r3, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	4619      	mov	r1, r3
 8001800:	f000 fff4 	bl	80027ec <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->driver.IN1_pwm_timer, motor->driver.IN1_pwm_channel,0);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <motor_driver_initialize+0x4c>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
 8001816:	e018      	b.n	800184a <motor_driver_initialize+0x7e>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d105      	bne.n	800182c <motor_driver_initialize+0x60>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	2300      	movs	r3, #0
 8001828:	6393      	str	r3, [r2, #56]	; 0x38
 800182a:	e00e      	b.n	800184a <motor_driver_initialize+0x7e>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	69db      	ldr	r3, [r3, #28]
 8001830:	2b08      	cmp	r3, #8
 8001832:	d105      	bne.n	8001840 <motor_driver_initialize+0x74>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2300      	movs	r3, #0
 800183c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800183e:	e004      	b.n	800184a <motor_driver_initialize+0x7e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	2300      	movs	r3, #0
 8001848:	6413      	str	r3, [r2, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,0);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <motor_driver_initialize+0x92>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2200      	movs	r2, #0
 800185a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800185c:	e018      	b.n	8001890 <motor_driver_initialize+0xc4>
	__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,0);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001862:	2b04      	cmp	r3, #4
 8001864:	d105      	bne.n	8001872 <motor_driver_initialize+0xa6>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001870:	e00e      	b.n	8001890 <motor_driver_initialize+0xc4>
	__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,0);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001876:	2b08      	cmp	r3, #8
 8001878:	d105      	bne.n	8001886 <motor_driver_initialize+0xba>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	2300      	movs	r3, #0
 8001882:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001884:	e004      	b.n	8001890 <motor_driver_initialize+0xc4>
	__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,0);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <motor_duty_output>:

void motor_duty_output(motor *motor, float duty_cycle){
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]

	if (duty_cycle >= 0){
 80018a4:	edd7 7a00 	vldr	s15, [r7]
 80018a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b0:	db73      	blt.n	800199a <motor_duty_output+0x102>
		int timer_counter_period = motor->driver.IN1_pwm_timer->Instance->ARR + 1;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	3301      	adds	r3, #1
 80018bc:	60bb      	str	r3, [r7, #8]
		motor->driver.IN1_pwm_counter = (float)timer_counter_period * duty_cycle;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c8:	edd7 7a00 	vldr	s15, [r7]
 80018cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edc3 7a08 	vstr	s15, [r3, #32]
		motor->driver.pwm_duty = duty_cycle;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	631a      	str	r2, [r3, #48]	; 0x30
		__HAL_TIM_SET_COMPARE(motor->driver.IN1_pwm_timer, motor->driver.IN1_pwm_channel,motor->driver.IN1_pwm_counter);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d10b      	bne.n	80018fc <motor_duty_output+0x64>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	edd3 7a08 	vldr	s15, [r3, #32]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018f4:	ee17 2a90 	vmov	r2, s15
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
 80018fa:	e02a      	b.n	8001952 <motor_duty_output+0xba>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d10b      	bne.n	800191c <motor_duty_output+0x84>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edd3 7a08 	vldr	s15, [r3, #32]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001914:	ee17 3a90 	vmov	r3, s15
 8001918:	6393      	str	r3, [r2, #56]	; 0x38
 800191a:	e01a      	b.n	8001952 <motor_duty_output+0xba>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	69db      	ldr	r3, [r3, #28]
 8001920:	2b08      	cmp	r3, #8
 8001922:	d10b      	bne.n	800193c <motor_duty_output+0xa4>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	edd3 7a08 	vldr	s15, [r3, #32]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001934:	ee17 3a90 	vmov	r3, s15
 8001938:	63d3      	str	r3, [r2, #60]	; 0x3c
 800193a:	e00a      	b.n	8001952 <motor_duty_output+0xba>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800194c:	ee17 3a90 	vmov	r3, s15
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,0);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <motor_duty_output+0xce>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	635a      	str	r2, [r3, #52]	; 0x34
		motor->driver.IN2_pwm_counter = (float)timer_counter_period * duty_cycle;
		motor->driver.pwm_duty = duty_cycle;
		__HAL_TIM_SET_COMPARE(motor->driver.IN1_pwm_timer, motor->driver.IN1_pwm_channel,0);
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,motor->driver.IN2_pwm_counter);
	}
}
 8001964:	e093      	b.n	8001a8e <motor_duty_output+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,0);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196a:	2b04      	cmp	r3, #4
 800196c:	d105      	bne.n	800197a <motor_duty_output+0xe2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	2300      	movs	r3, #0
 8001976:	6393      	str	r3, [r2, #56]	; 0x38
 8001978:	e089      	b.n	8001a8e <motor_duty_output+0x1f6>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197e:	2b08      	cmp	r3, #8
 8001980:	d105      	bne.n	800198e <motor_duty_output+0xf6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800198c:	e07f      	b.n	8001a8e <motor_duty_output+0x1f6>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001998:	e079      	b.n	8001a8e <motor_duty_output+0x1f6>
		duty_cycle = fabs(duty_cycle);
 800199a:	edd7 7a00 	vldr	s15, [r7]
 800199e:	eef0 7ae7 	vabs.f32	s15, s15
 80019a2:	edc7 7a00 	vstr	s15, [r7]
		int timer_counter_period = motor->driver.IN2_pwm_timer->Instance->ARR + 1;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	3301      	adds	r3, #1
 80019b0:	60fb      	str	r3, [r7, #12]
		motor->driver.IN2_pwm_counter = (float)timer_counter_period * duty_cycle;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	edd7 7a00 	vldr	s15, [r7]
 80019c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		motor->driver.pwm_duty = duty_cycle;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
		__HAL_TIM_SET_COMPARE(motor->driver.IN1_pwm_timer, motor->driver.IN1_pwm_channel,0);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d105      	bne.n	80019e4 <motor_duty_output+0x14c>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	635a      	str	r2, [r3, #52]	; 0x34
 80019e2:	e018      	b.n	8001a16 <motor_duty_output+0x17e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d105      	bne.n	80019f8 <motor_duty_output+0x160>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	6393      	str	r3, [r2, #56]	; 0x38
 80019f6:	e00e      	b.n	8001a16 <motor_duty_output+0x17e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	2b08      	cmp	r3, #8
 80019fe:	d105      	bne.n	8001a0c <motor_duty_output+0x174>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2300      	movs	r3, #0
 8001a08:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a0a:	e004      	b.n	8001a16 <motor_duty_output+0x17e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,motor->driver.IN2_pwm_counter);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10b      	bne.n	8001a36 <motor_duty_output+0x19e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2e:	ee17 2a90 	vmov	r2, s15
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a34:	e02b      	b.n	8001a8e <motor_duty_output+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,motor->driver.IN2_pwm_counter);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d10b      	bne.n	8001a56 <motor_duty_output+0x1be>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a4e:	ee17 3a90 	vmov	r3, s15
 8001a52:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a54:	e01b      	b.n	8001a8e <motor_duty_output+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,motor->driver.IN2_pwm_counter);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d10b      	bne.n	8001a76 <motor_duty_output+0x1de>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6e:	ee17 3a90 	vmov	r3, s15
 8001a72:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001a74:	e00b      	b.n	8001a8e <motor_duty_output+0x1f6>
		__HAL_TIM_SET_COMPARE(motor->driver.IN2_pwm_timer, motor->driver.IN2_pwm_channel,motor->driver.IN2_pwm_counter);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a86:	ee17 3a90 	vmov	r3, s15
 8001a8a:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001a8c:	e7ff      	b.n	8001a8e <motor_duty_output+0x1f6>
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	0000      	movs	r0, r0
 8001a9c:	0000      	movs	r0, r0
	...

08001aa0 <motor_encoder_update>:

void motor_encoder_update(motor *motor){
 8001aa0:	b5b0      	push	{r4, r5, r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
    double rad_per_cnt = ((2*M_PI) / (motor->encoder.count_per_rev * motor->encoder.reduction_ratio * 4));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ab0:	fb02 f303 	mul.w	r3, r2, r3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7fe fd54 	bl	8000564 <__aeabi_i2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	a14d      	add	r1, pc, #308	; (adr r1, 8001bf8 <motor_encoder_update+0x158>)
 8001ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ac6:	f7fe fee1 	bl	800088c <__aeabi_ddiv>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	e9c7 2302 	strd	r2, r3, [r7, #8]

    motor->encoder.current_counter = motor->encoder.enc_timer->Instance->CNT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	; 0x44
    motor->encoder.delta_counter = (double)motor->encoder.current_counter - motor->encoder.previous_counter;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd3d 	bl	8000564 <__aeabi_i2d>
 8001aea:	4604      	mov	r4, r0
 8001aec:	460d      	mov	r5, r1
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd36 	bl	8000564 <__aeabi_i2d>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4620      	mov	r0, r4
 8001afe:	4629      	mov	r1, r5
 8001b00:	f7fe fbe2 	bl	80002c8 <__aeabi_dsub>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7ff f844 	bl	8000b98 <__aeabi_d2iz>
 8001b10:	4602      	mov	r2, r0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	649a      	str	r2, [r3, #72]	; 0x48


	if (motor->encoder.delta_counter < -32768)   //32768 = 65535 / 2
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001b1e:	da1f      	bge.n	8001b60 <motor_encoder_update+0xc0>
		motor->angular_vel = (65536 + motor->encoder.delta_counter) * rad_per_cnt * motor->controller.control_frequency;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b24:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd1b 	bl	8000564 <__aeabi_i2d>
 8001b2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b32:	f7fe fd81 	bl	8000638 <__aeabi_dmul>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	461d      	mov	r5, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe fd0e 	bl	8000564 <__aeabi_i2d>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fd72 	bl	8000638 <__aeabi_dmul>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8001b5e:	e041      	b.n	8001be4 <motor_encoder_update+0x144>
	else if (motor->encoder.delta_counter > 32768)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b68:	dd1f      	ble.n	8001baa <motor_encoder_update+0x10a>
		motor->angular_vel = (motor->encoder.delta_counter - 65536) * rad_per_cnt * motor->controller.control_frequency;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b6e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7fe fcf6 	bl	8000564 <__aeabi_i2d>
 8001b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b7c:	f7fe fd5c 	bl	8000638 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	461d      	mov	r5, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fce9 	bl	8000564 <__aeabi_i2d>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4620      	mov	r0, r4
 8001b98:	4629      	mov	r1, r5
 8001b9a:	f7fe fd4d 	bl	8000638 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8001ba8:	e01c      	b.n	8001be4 <motor_encoder_update+0x144>
	else
		motor->angular_vel = motor->encoder.delta_counter * rad_per_cnt * motor->controller.control_frequency;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcd8 	bl	8000564 <__aeabi_i2d>
 8001bb4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bb8:	f7fe fd3e 	bl	8000638 <__aeabi_dmul>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	461d      	mov	r5, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fccb 	bl	8000564 <__aeabi_i2d>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	f7fe fd2f 	bl	8000638 <__aeabi_dmul>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90


    motor->encoder.previous_counter = motor->encoder.current_counter;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	54442d18 	.word	0x54442d18
 8001bfc:	401921fb 	.word	0x401921fb

08001c00 <motor_command_tracking>:

void motor_command_tracking(motor *motor){
 8001c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	float output_duty;
	motor->controller.tracking_error = motor->controller.command_vel - motor->angular_vel;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001c16:	f7fe fb57 	bl	80002c8 <__aeabi_dsub>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	motor->controller.tracking_error_sum += motor->controller.tracking_error / (float)motor->controller.control_frequency;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3c:	ee17 0a90 	vmov	r0, s15
 8001c40:	f7fe fca2 	bl	8000588 <__aeabi_f2d>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4640      	mov	r0, r8
 8001c4a:	4649      	mov	r1, r9
 8001c4c:	f7fe fe1e 	bl	800088c <__aeabi_ddiv>
 8001c50:	4602      	mov	r2, r0
 8001c52:	460b      	mov	r3, r1
 8001c54:	4620      	mov	r0, r4
 8001c56:	4629      	mov	r1, r5
 8001c58:	f7fe fb38 	bl	80002cc <__adddf3>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	output_duty = motor->controller.p_gain * motor->controller.tracking_error + motor->controller.i_gain * motor->controller.tracking_error_sum;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8001c72:	f7fe fce1 	bl	8000638 <__aeabi_dmul>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4614      	mov	r4, r2
 8001c7c:	461d      	mov	r5, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8001c8a:	f7fe fcd5 	bl	8000638 <__aeabi_dmul>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	4620      	mov	r0, r4
 8001c94:	4629      	mov	r1, r5
 8001c96:	f7fe fb19 	bl	80002cc <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7fe ffa1 	bl	8000be8 <__aeabi_d2f>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	60fb      	str	r3, [r7, #12]

	if (output_duty >= 1)
 8001caa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	db03      	blt.n	8001cc4 <motor_command_tracking+0xc4>
		output_duty = 1;
 8001cbc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	e00a      	b.n	8001cda <motor_command_tracking+0xda>
	else if (output_duty <= -1)
 8001cc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001ccc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d801      	bhi.n	8001cda <motor_command_tracking+0xda>
		output_duty = -1;
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <motor_command_tracking+0xf0>)
 8001cd8:	60fb      	str	r3, [r7, #12]
//	}
//	else{
//		output_duty = motor->driver.pwm_duty;
//	}

	motor_duty_output(motor, output_duty);
 8001cda:	ed97 0a03 	vldr	s0, [r7, #12]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f7ff fdda 	bl	8001898 <motor_duty_output>
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cee:	bf00      	nop
 8001cf0:	bf800000 	.word	0xbf800000

08001cf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d133      	bne.n	8001dce <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_TIM_Encoder_MspInit+0x98>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d9e:	23c0      	movs	r3, #192	; 0xc0
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dae:	2302      	movs	r3, #2
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001dba:	f000 fb83 	bl	80024c4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	201d      	movs	r0, #29
 8001dc4:	f000 fb47 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001dc8:	201d      	movs	r0, #29
 8001dca:	f000 fb60 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dce:	bf00      	nop
 8001dd0:	3728      	adds	r7, #40	; 0x28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40000400 	.word	0x40000400
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_TIM_Base_MspInit+0xa8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d116      	bne.n	8001e24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	4b25      	ldr	r3, [pc, #148]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	4a24      	ldr	r2, [pc, #144]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	6413      	str	r3, [r2, #64]	; 0x40
 8001e06:	4b22      	ldr	r3, [pc, #136]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	201e      	movs	r0, #30
 8001e18:	f000 fb1d 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e1c:	201e      	movs	r0, #30
 8001e1e:	f000 fb36 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001e22:	e02e      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1a      	ldr	r2, [pc, #104]	; (8001e94 <HAL_TIM_Base_MspInit+0xb0>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d116      	bne.n	8001e5c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a16      	ldr	r2, [pc, #88]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e38:	f043 0308 	orr.w	r3, r3, #8
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2032      	movs	r0, #50	; 0x32
 8001e50:	f000 fb01 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e54:	2032      	movs	r0, #50	; 0x32
 8001e56:	f000 fb1a 	bl	800248e <HAL_NVIC_EnableIRQ>
}
 8001e5a:	e012      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0d      	ldr	r2, [pc, #52]	; (8001e98 <HAL_TIM_Base_MspInit+0xb4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10d      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4a08      	ldr	r2, [pc, #32]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6453      	str	r3, [r2, #68]	; 0x44
 8001e76:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_TIM_Base_MspInit+0xac>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40000c00 	.word	0x40000c00
 8001e98:	40010400 	.word	0x40010400

08001e9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	; 0x28
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a24      	ldr	r2, [pc, #144]	; (8001f4c <HAL_TIM_MspPostInit+0xb0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d11e      	bne.n	8001efc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b23      	ldr	r3, [pc, #140]	; (8001f50 <HAL_TIM_MspPostInit+0xb4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a22      	ldr	r2, [pc, #136]	; (8001f50 <HAL_TIM_MspPostInit+0xb4>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b20      	ldr	r3, [pc, #128]	; (8001f50 <HAL_TIM_MspPostInit+0xb4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001eda:	2340      	movs	r3, #64	; 0x40
 8001edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001eea:	2302      	movs	r3, #2
 8001eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eee:	f107 0314 	add.w	r3, r7, #20
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4817      	ldr	r0, [pc, #92]	; (8001f54 <HAL_TIM_MspPostInit+0xb8>)
 8001ef6:	f000 fae5 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001efa:	e022      	b.n	8001f42 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM8)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a15      	ldr	r2, [pc, #84]	; (8001f58 <HAL_TIM_MspPostInit+0xbc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d11d      	bne.n	8001f42 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <HAL_TIM_MspPostInit+0xb4>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a10      	ldr	r2, [pc, #64]	; (8001f50 <HAL_TIM_MspPostInit+0xb4>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_TIM_MspPostInit+0xb4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001f32:	2303      	movs	r3, #3
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f36:	f107 0314 	add.w	r3, r7, #20
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4807      	ldr	r0, [pc, #28]	; (8001f5c <HAL_TIM_MspPostInit+0xc0>)
 8001f3e:	f000 fac1 	bl	80024c4 <HAL_GPIO_Init>
}
 8001f42:	bf00      	nop
 8001f44:	3728      	adds	r7, #40	; 0x28
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40000800 	.word	0x40000800
 8001f50:	40023800 	.word	0x40023800
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40010400 	.word	0x40010400
 8001f5c:	40020800 	.word	0x40020800

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <NMI_Handler+0x4>

08001f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <HardFault_Handler+0x4>

08001f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <MemManage_Handler+0x4>

08001f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f76:	e7fe      	b.n	8001f76 <BusFault_Handler+0x4>

08001f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <UsageFault_Handler+0x4>

08001f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fac:	f000 f958 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM3_IRQHandler+0x10>)
 8001fba:	f001 fce5 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	20000204 	.word	0x20000204

08001fc8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fcc:	4802      	ldr	r0, [pc, #8]	; (8001fd8 <TIM4_IRQHandler+0x10>)
 8001fce:	f001 fcdb 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	2000024c 	.word	0x2000024c

08001fdc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fe0:	4802      	ldr	r0, [pc, #8]	; (8001fec <TIM5_IRQHandler+0x10>)
 8001fe2:	f001 fcd1 	bl	8003988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000294 	.word	0x20000294

08001ff0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
	return 1;
 8001ff4:	2301      	movs	r3, #1
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_kill>:

int _kill(int pid, int sig)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800200a:	f002 fb69 	bl	80046e0 <__errno>
 800200e:	4603      	mov	r3, r0
 8002010:	2216      	movs	r2, #22
 8002012:	601a      	str	r2, [r3, #0]
	return -1;
 8002014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_exit>:

void _exit (int status)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002028:	f04f 31ff 	mov.w	r1, #4294967295
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff ffe7 	bl	8002000 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002032:	e7fe      	b.n	8002032 <_exit+0x12>

08002034 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002040:	2300      	movs	r3, #0
 8002042:	617b      	str	r3, [r7, #20]
 8002044:	e00a      	b.n	800205c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002046:	f3af 8000 	nop.w
 800204a:	4601      	mov	r1, r0
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	60ba      	str	r2, [r7, #8]
 8002052:	b2ca      	uxtb	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3301      	adds	r3, #1
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	429a      	cmp	r2, r3
 8002062:	dbf0      	blt.n	8002046 <_read+0x12>
	}

return len;
 8002064:	687b      	ldr	r3, [r7, #4]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3718      	adds	r7, #24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <_close>:
	}
	return len;
}

int _close(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
	return -1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207a:	4618      	mov	r0, r3
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
 800208e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002096:	605a      	str	r2, [r3, #4]
	return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr

080020a6 <_isatty>:

int _isatty(int file)
{
 80020a6:	b480      	push	{r7}
 80020a8:	b083      	sub	sp, #12
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
	return 1;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020e0:	4a14      	ldr	r2, [pc, #80]	; (8002134 <_sbrk+0x5c>)
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <_sbrk+0x60>)
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020ec:	4b13      	ldr	r3, [pc, #76]	; (800213c <_sbrk+0x64>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x64>)
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <_sbrk+0x68>)
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	429a      	cmp	r2, r3
 8002106:	d207      	bcs.n	8002118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002108:	f002 faea 	bl	80046e0 <__errno>
 800210c:	4603      	mov	r3, r0
 800210e:	220c      	movs	r2, #12
 8002110:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002112:	f04f 33ff 	mov.w	r3, #4294967295
 8002116:	e009      	b.n	800212c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <_sbrk+0x64>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4413      	add	r3, r2
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <_sbrk+0x64>)
 8002128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20020000 	.word	0x20020000
 8002138:	00000400 	.word	0x00000400
 800213c:	200003d8 	.word	0x200003d8
 8002140:	200003f0 	.word	0x200003f0

08002144 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <SystemInit+0x20>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a05      	ldr	r2, [pc, #20]	; (8002164 <SystemInit+0x20>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	e000ed00 	.word	0xe000ed00

08002168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002168:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800216c:	480d      	ldr	r0, [pc, #52]	; (80021a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800216e:	490e      	ldr	r1, [pc, #56]	; (80021a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002170:	4a0e      	ldr	r2, [pc, #56]	; (80021ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002184:	4c0b      	ldr	r4, [pc, #44]	; (80021b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002192:	f7ff ffd7 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002196:	f002 faa9 	bl	80046ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800219a:	f7fe ffed 	bl	8001178 <main>
  bx  lr    
 800219e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80021ac:	08008950 	.word	0x08008950
  ldr r2, =_sbss
 80021b0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80021b4:	200003f0 	.word	0x200003f0

080021b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021b8:	e7fe      	b.n	80021b8 <ADC_IRQHandler>
	...

080021bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0d      	ldr	r2, [pc, #52]	; (80021fc <HAL_Init+0x40>)
 80021c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021cc:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HAL_Init+0x40>)
 80021d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a07      	ldr	r2, [pc, #28]	; (80021fc <HAL_Init+0x40>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021e4:	2003      	movs	r0, #3
 80021e6:	f000 f92b 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ea:	200f      	movs	r0, #15
 80021ec:	f000 f808 	bl	8002200 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021f0:	f7ff fd80 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023c00 	.word	0x40023c00

08002200 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_InitTick+0x54>)
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <HAL_InitTick+0x58>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	4619      	mov	r1, r3
 8002212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002216:	fbb3 f3f1 	udiv	r3, r3, r1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f943 	bl	80024aa <HAL_SYSTICK_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e00e      	b.n	800224c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0f      	cmp	r3, #15
 8002232:	d80a      	bhi.n	800224a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f000 f90b 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <HAL_InitTick+0x5c>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	e000      	b.n	800224c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	20000008 	.word	0x20000008
 8002258:	20000010 	.word	0x20000010
 800225c:	2000000c 	.word	0x2000000c

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000010 	.word	0x20000010
 8002284:	200003dc 	.word	0x200003dc

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	200003dc 	.word	0x200003dc

080022a0 <__NVIC_SetPriorityGrouping>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4b0c      	ldr	r3, [pc, #48]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022d2:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	60d3      	str	r3, [r2, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <__NVIC_GetPriorityGrouping>:
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_EnableIRQ>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	db0b      	blt.n	800232e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <__NVIC_EnableIRQ+0x38>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2001      	movs	r0, #1
 8002326:	fa00 f202 	lsl.w	r2, r0, r2
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <NVIC_EncodePriority>:
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f1c3 0307 	rsb	r3, r3, #7
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf28      	it	cs
 80023b2:	2304      	movcs	r3, #4
 80023b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d902      	bls.n	80023c4 <NVIC_EncodePriority+0x30>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	e000      	b.n	80023c6 <NVIC_EncodePriority+0x32>
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	4313      	orrs	r3, r2
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <SysTick_Config>:
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff8e 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff29 	bl	80022a0 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff3e 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff8e 	bl	8002394 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5d 	bl	8002340 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff31 	bl	8002304 <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
 80024de:	e165      	b.n	80027ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	4013      	ands	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f040 8154 	bne.w	80027a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d005      	beq.n	8002516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002512:	2b02      	cmp	r3, #2
 8002514:	d130      	bne.n	8002578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	2203      	movs	r2, #3
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	4013      	ands	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	68da      	ldr	r2, [r3, #12]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4313      	orrs	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800254c:	2201      	movs	r2, #1
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4013      	ands	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 0201 	and.w	r2, r3, #1
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	2b03      	cmp	r3, #3
 8002582:	d017      	beq.n	80025b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	2203      	movs	r2, #3
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d123      	bne.n	8002608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	08da      	lsrs	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3208      	adds	r2, #8
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	08da      	lsrs	r2, r3, #3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3208      	adds	r2, #8
 8002602:	69b9      	ldr	r1, [r7, #24]
 8002604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	2203      	movs	r2, #3
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f003 0203 	and.w	r2, r3, #3
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80ae 	beq.w	80027a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_GPIO_Init+0x300>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a5c      	ldr	r2, [pc, #368]	; (80027c4 <HAL_GPIO_Init+0x300>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b5a      	ldr	r3, [pc, #360]	; (80027c4 <HAL_GPIO_Init+0x300>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002666:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_GPIO_Init+0x304>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4f      	ldr	r2, [pc, #316]	; (80027cc <HAL_GPIO_Init+0x308>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d025      	beq.n	80026de <HAL_GPIO_Init+0x21a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a4e      	ldr	r2, [pc, #312]	; (80027d0 <HAL_GPIO_Init+0x30c>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d01f      	beq.n	80026da <HAL_GPIO_Init+0x216>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_GPIO_Init+0x310>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d019      	beq.n	80026d6 <HAL_GPIO_Init+0x212>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a4c      	ldr	r2, [pc, #304]	; (80027d8 <HAL_GPIO_Init+0x314>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d013      	beq.n	80026d2 <HAL_GPIO_Init+0x20e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4b      	ldr	r2, [pc, #300]	; (80027dc <HAL_GPIO_Init+0x318>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d00d      	beq.n	80026ce <HAL_GPIO_Init+0x20a>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4a      	ldr	r2, [pc, #296]	; (80027e0 <HAL_GPIO_Init+0x31c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <HAL_GPIO_Init+0x206>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a49      	ldr	r2, [pc, #292]	; (80027e4 <HAL_GPIO_Init+0x320>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_GPIO_Init+0x202>
 80026c2:	2306      	movs	r3, #6
 80026c4:	e00c      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026c6:	2307      	movs	r3, #7
 80026c8:	e00a      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026ca:	2305      	movs	r3, #5
 80026cc:	e008      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026ce:	2304      	movs	r3, #4
 80026d0:	e006      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026d2:	2303      	movs	r3, #3
 80026d4:	e004      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_GPIO_Init+0x21c>
 80026de:	2300      	movs	r3, #0
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f002 0203 	and.w	r2, r2, #3
 80026e6:	0092      	lsls	r2, r2, #2
 80026e8:	4093      	lsls	r3, r2
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_GPIO_Init+0x304>)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026fe:	4b3a      	ldr	r3, [pc, #232]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002722:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002728:	4b2f      	ldr	r3, [pc, #188]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	43db      	mvns	r3, r3
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	4013      	ands	r3, r2
 8002736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800274c:	4a26      	ldr	r2, [pc, #152]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002752:	4b25      	ldr	r3, [pc, #148]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	43db      	mvns	r3, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4013      	ands	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	4313      	orrs	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002776:	4a1c      	ldr	r2, [pc, #112]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800277c:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027a0:	4a11      	ldr	r2, [pc, #68]	; (80027e8 <HAL_GPIO_Init+0x324>)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3301      	adds	r3, #1
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	2b0f      	cmp	r3, #15
 80027b0:	f67f ae96 	bls.w	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3724      	adds	r7, #36	; 0x24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40013800 	.word	0x40013800
 80027cc:	40020000 	.word	0x40020000
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40020800 	.word	0x40020800
 80027d8:	40020c00 	.word	0x40020c00
 80027dc:	40021000 	.word	0x40021000
 80027e0:	40021400 	.word	0x40021400
 80027e4:	40021800 	.word	0x40021800
 80027e8:	40013c00 	.word	0x40013c00

080027ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	460b      	mov	r3, r1
 80027f6:	807b      	strh	r3, [r7, #2]
 80027f8:	4613      	mov	r3, r2
 80027fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027fc:	787b      	ldrb	r3, [r7, #1]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002802:	887a      	ldrh	r2, [r7, #2]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002808:	e003      	b.n	8002812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800280a:	887b      	ldrh	r3, [r7, #2]
 800280c:	041a      	lsls	r2, r3, #16
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	619a      	str	r2, [r3, #24]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a1f      	ldr	r2, [pc, #124]	; (80028b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b1d      	ldr	r3, [pc, #116]	; (80028b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002846:	4b1b      	ldr	r3, [pc, #108]	; (80028b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002848:	2201      	movs	r2, #1
 800284a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800284c:	f7ff fd1c 	bl	8002288 <HAL_GetTick>
 8002850:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002852:	e009      	b.n	8002868 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002854:	f7ff fd18 	bl	8002288 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002862:	d901      	bls.n	8002868 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e01f      	b.n	80028a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002874:	d1ee      	bne.n	8002854 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800287c:	f7ff fd04 	bl	8002288 <HAL_GetTick>
 8002880:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002882:	e009      	b.n	8002898 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002884:	f7ff fd00 	bl	8002288 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002892:	d901      	bls.n	8002898 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e007      	b.n	80028a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028a4:	d1ee      	bne.n	8002884 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3708      	adds	r7, #8
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	40023800 	.word	0x40023800
 80028b4:	420e0040 	.word	0x420e0040
 80028b8:	40007000 	.word	0x40007000
 80028bc:	420e0044 	.word	0x420e0044

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7ff fc6a 	bl	8002288 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7ff fc66 	bl	8002288 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 030f 	and.w	r3, r3, #15
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f821 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fbca 	bl	8002200 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	0800837c 	.word	0x0800837c
 8002a84:	20000008 	.word	0x20000008
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a90:	b0a6      	sub	sp, #152	; 0x98
 8002a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ab2:	4bc8      	ldr	r3, [pc, #800]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 030c 	and.w	r3, r3, #12
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	f200 817e 	bhi.w	8002dbc <HAL_RCC_GetSysClockFreq+0x330>
 8002ac0:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac6:	bf00      	nop
 8002ac8:	08002afd 	.word	0x08002afd
 8002acc:	08002dbd 	.word	0x08002dbd
 8002ad0:	08002dbd 	.word	0x08002dbd
 8002ad4:	08002dbd 	.word	0x08002dbd
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002dbd 	.word	0x08002dbd
 8002ae0:	08002dbd 	.word	0x08002dbd
 8002ae4:	08002dbd 	.word	0x08002dbd
 8002ae8:	08002b0d 	.word	0x08002b0d
 8002aec:	08002dbd 	.word	0x08002dbd
 8002af0:	08002dbd 	.word	0x08002dbd
 8002af4:	08002dbd 	.word	0x08002dbd
 8002af8:	08002c77 	.word	0x08002c77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002afc:	4bb6      	ldr	r3, [pc, #728]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8002b02:	e15f      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4bb5      	ldr	r3, [pc, #724]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x350>)
 8002b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002b0a:	e15b      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b0c:	4bb1      	ldr	r3, [pc, #708]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b18:	4bae      	ldr	r3, [pc, #696]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d031      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b24:	4bab      	ldr	r3, [pc, #684]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	099b      	lsrs	r3, r3, #6
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b2e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b36:	663b      	str	r3, [r7, #96]	; 0x60
 8002b38:	2300      	movs	r3, #0
 8002b3a:	667b      	str	r3, [r7, #100]	; 0x64
 8002b3c:	4ba7      	ldr	r3, [pc, #668]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x350>)
 8002b3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002b42:	462a      	mov	r2, r5
 8002b44:	fb03 f202 	mul.w	r2, r3, r2
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	fb01 f303 	mul.w	r3, r1, r3
 8002b50:	4413      	add	r3, r2
 8002b52:	4aa2      	ldr	r2, [pc, #648]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x350>)
 8002b54:	4621      	mov	r1, r4
 8002b56:	fba1 1202 	umull	r1, r2, r1, r2
 8002b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b5c:	460a      	mov	r2, r1
 8002b5e:	67ba      	str	r2, [r7, #120]	; 0x78
 8002b60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002b62:	4413      	add	r3, r2
 8002b64:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b6e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002b70:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002b74:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002b78:	f7fe f886 	bl	8000c88 <__aeabi_uldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4613      	mov	r3, r2
 8002b82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b86:	e064      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b88:	4b92      	ldr	r3, [pc, #584]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	099b      	lsrs	r3, r3, #6
 8002b8e:	2200      	movs	r2, #0
 8002b90:	653b      	str	r3, [r7, #80]	; 0x50
 8002b92:	657a      	str	r2, [r7, #84]	; 0x54
 8002b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ba0:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	462b      	mov	r3, r5
 8002ba8:	f04f 0000 	mov.w	r0, #0
 8002bac:	f04f 0100 	mov.w	r1, #0
 8002bb0:	0159      	lsls	r1, r3, #5
 8002bb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb6:	0150      	lsls	r0, r2, #5
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	1a51      	subs	r1, r2, r1
 8002bc0:	6139      	str	r1, [r7, #16]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc8:	617b      	str	r3, [r7, #20]
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	018b      	lsls	r3, r1, #6
 8002bda:	4651      	mov	r1, sl
 8002bdc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002be0:	4651      	mov	r1, sl
 8002be2:	018a      	lsls	r2, r1, #6
 8002be4:	4651      	mov	r1, sl
 8002be6:	ebb2 0801 	subs.w	r8, r2, r1
 8002bea:	4659      	mov	r1, fp
 8002bec:	eb63 0901 	sbc.w	r9, r3, r1
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c00:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c04:	4690      	mov	r8, r2
 8002c06:	4699      	mov	r9, r3
 8002c08:	4623      	mov	r3, r4
 8002c0a:	eb18 0303 	adds.w	r3, r8, r3
 8002c0e:	60bb      	str	r3, [r7, #8]
 8002c10:	462b      	mov	r3, r5
 8002c12:	eb49 0303 	adc.w	r3, r9, r3
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	f04f 0200 	mov.w	r2, #0
 8002c1c:	f04f 0300 	mov.w	r3, #0
 8002c20:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c24:	4629      	mov	r1, r5
 8002c26:	028b      	lsls	r3, r1, #10
 8002c28:	4621      	mov	r1, r4
 8002c2a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c2e:	4621      	mov	r1, r4
 8002c30:	028a      	lsls	r2, r1, #10
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002c40:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002c44:	f7fe f820 	bl	8000c88 <__aeabi_uldivmod>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c52:	4b60      	ldr	r3, [pc, #384]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	0c1b      	lsrs	r3, r3, #16
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8002c64:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002c74:	e0a6      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c76:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c82:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d02a      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c8e:	4b51      	ldr	r3, [pc, #324]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	099b      	lsrs	r3, r3, #6
 8002c94:	2200      	movs	r2, #0
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c98:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4b4e      	ldr	r3, [pc, #312]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x350>)
 8002ca4:	fb03 f201 	mul.w	r2, r3, r1
 8002ca8:	2300      	movs	r3, #0
 8002caa:	fb00 f303 	mul.w	r3, r0, r3
 8002cae:	4413      	add	r3, r2
 8002cb0:	4a4a      	ldr	r2, [pc, #296]	; (8002ddc <HAL_RCC_GetSysClockFreq+0x350>)
 8002cb2:	fba0 1202 	umull	r1, r2, r0, r2
 8002cb6:	677a      	str	r2, [r7, #116]	; 0x74
 8002cb8:	460a      	mov	r2, r1
 8002cba:	673a      	str	r2, [r7, #112]	; 0x70
 8002cbc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002cbe:	4413      	add	r3, r2
 8002cc0:	677b      	str	r3, [r7, #116]	; 0x74
 8002cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	633b      	str	r3, [r7, #48]	; 0x30
 8002cca:	637a      	str	r2, [r7, #52]	; 0x34
 8002ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cd0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8002cd4:	f7fd ffd8 	bl	8000c88 <__aeabi_uldivmod>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4613      	mov	r3, r2
 8002cde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002ce2:	e05b      	b.n	8002d9c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	099b      	lsrs	r3, r3, #6
 8002cea:	2200      	movs	r2, #0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf6:	623b      	str	r3, [r7, #32]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	0159      	lsls	r1, r3, #5
 8002d0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d12:	0150      	lsls	r0, r2, #5
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4641      	mov	r1, r8
 8002d1a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d1e:	4649      	mov	r1, r9
 8002d20:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	f04f 0300 	mov.w	r3, #0
 8002d2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002d30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002d34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002d38:	ebb2 040a 	subs.w	r4, r2, sl
 8002d3c:	eb63 050b 	sbc.w	r5, r3, fp
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	00eb      	lsls	r3, r5, #3
 8002d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d4e:	00e2      	lsls	r2, r4, #3
 8002d50:	4614      	mov	r4, r2
 8002d52:	461d      	mov	r5, r3
 8002d54:	4643      	mov	r3, r8
 8002d56:	18e3      	adds	r3, r4, r3
 8002d58:	603b      	str	r3, [r7, #0]
 8002d5a:	464b      	mov	r3, r9
 8002d5c:	eb45 0303 	adc.w	r3, r5, r3
 8002d60:	607b      	str	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d6e:	4629      	mov	r1, r5
 8002d70:	028b      	lsls	r3, r1, #10
 8002d72:	4621      	mov	r1, r4
 8002d74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d78:	4621      	mov	r1, r4
 8002d7a:	028a      	lsls	r2, r1, #10
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d84:	2200      	movs	r2, #0
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	61fa      	str	r2, [r7, #28]
 8002d8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d8e:	f7fd ff7b 	bl	8000c88 <__aeabi_uldivmod>
 8002d92:	4602      	mov	r2, r0
 8002d94:	460b      	mov	r3, r1
 8002d96:	4613      	mov	r3, r2
 8002d98:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCC_GetSysClockFreq+0x348>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	0f1b      	lsrs	r3, r3, #28
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002dba:	e003      	b.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002dbc:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002dc2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3798      	adds	r7, #152	; 0x98
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	017d7840 	.word	0x017d7840

08002de0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e28d      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8083 	beq.w	8002f06 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e00:	4b94      	ldr	r3, [pc, #592]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f003 030c 	and.w	r3, r3, #12
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d019      	beq.n	8002e40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e0c:	4b91      	ldr	r3, [pc, #580]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d106      	bne.n	8002e26 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e18:	4b8e      	ldr	r3, [pc, #568]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e24:	d00c      	beq.n	8002e40 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e26:	4b8b      	ldr	r3, [pc, #556]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e2e:	2b0c      	cmp	r3, #12
 8002e30:	d112      	bne.n	8002e58 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e32:	4b88      	ldr	r3, [pc, #544]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3e:	d10b      	bne.n	8002e58 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e40:	4b84      	ldr	r3, [pc, #528]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d05b      	beq.n	8002f04 <HAL_RCC_OscConfig+0x124>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d157      	bne.n	8002f04 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e25a      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e60:	d106      	bne.n	8002e70 <HAL_RCC_OscConfig+0x90>
 8002e62:	4b7c      	ldr	r3, [pc, #496]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a7b      	ldr	r2, [pc, #492]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6c:	6013      	str	r3, [r2, #0]
 8002e6e:	e01d      	b.n	8002eac <HAL_RCC_OscConfig+0xcc>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0xb4>
 8002e7a:	4b76      	ldr	r3, [pc, #472]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a75      	ldr	r2, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	4b73      	ldr	r3, [pc, #460]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a72      	ldr	r2, [pc, #456]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0xcc>
 8002e94:	4b6f      	ldr	r3, [pc, #444]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a6e      	ldr	r2, [pc, #440]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b6c      	ldr	r3, [pc, #432]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a6b      	ldr	r2, [pc, #428]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d013      	beq.n	8002edc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7ff f9e8 	bl	8002288 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7ff f9e4 	bl	8002288 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e21f      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ece:	4b61      	ldr	r3, [pc, #388]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0xdc>
 8002eda:	e014      	b.n	8002f06 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7ff f9d4 	bl	8002288 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7ff f9d0 	bl	8002288 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e20b      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef6:	4b57      	ldr	r3, [pc, #348]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1f0      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x104>
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d06f      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f12:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d017      	beq.n	8002f4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f1e:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d105      	bne.n	8002f36 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f2a:	4b4a      	ldr	r3, [pc, #296]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00b      	beq.n	8002f4e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f36:	4b47      	ldr	r3, [pc, #284]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	d11c      	bne.n	8002f7c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b44      	ldr	r3, [pc, #272]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d116      	bne.n	8002f7c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f4e:	4b41      	ldr	r3, [pc, #260]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_RCC_OscConfig+0x186>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d001      	beq.n	8002f66 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e1d3      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4937      	ldr	r1, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f7a:	e03a      	b.n	8002ff2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d020      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f84:	4b34      	ldr	r3, [pc, #208]	; (8003058 <HAL_RCC_OscConfig+0x278>)
 8002f86:	2201      	movs	r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8a:	f7ff f97d 	bl	8002288 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f90:	e008      	b.n	8002fa4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f92:	f7ff f979 	bl	8002288 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d901      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e1b4      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	4b2b      	ldr	r3, [pc, #172]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb0:	4b28      	ldr	r3, [pc, #160]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4925      	ldr	r1, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	600b      	str	r3, [r1, #0]
 8002fc4:	e015      	b.n	8002ff2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fc6:	4b24      	ldr	r3, [pc, #144]	; (8003058 <HAL_RCC_OscConfig+0x278>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7ff f95c 	bl	8002288 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7ff f958 	bl	8002288 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e193      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1f0      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d036      	beq.n	800306c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d016      	beq.n	8003034 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <HAL_RCC_OscConfig+0x27c>)
 8003008:	2201      	movs	r2, #1
 800300a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7ff f93c 	bl	8002288 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003012:	e008      	b.n	8003026 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003014:	f7ff f938 	bl	8002288 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e173      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_RCC_OscConfig+0x274>)
 8003028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d0f0      	beq.n	8003014 <HAL_RCC_OscConfig+0x234>
 8003032:	e01b      	b.n	800306c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003034:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_RCC_OscConfig+0x27c>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7ff f925 	bl	8002288 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003040:	e00e      	b.n	8003060 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003042:	f7ff f921 	bl	8002288 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d907      	bls.n	8003060 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e15c      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
 8003054:	40023800 	.word	0x40023800
 8003058:	42470000 	.word	0x42470000
 800305c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	4b8a      	ldr	r3, [pc, #552]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1ea      	bne.n	8003042 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8097 	beq.w	80031a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800307e:	4b83      	ldr	r3, [pc, #524]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d10f      	bne.n	80030aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	4b7f      	ldr	r3, [pc, #508]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a7e      	ldr	r2, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60bb      	str	r3, [r7, #8]
 80030a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030aa:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_RCC_OscConfig+0x4b0>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x4b0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x4b0>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7ff f8e1 	bl	8002288 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7ff f8dd 	bl	8002288 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e118      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x4b0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d106      	bne.n	80030fe <HAL_RCC_OscConfig+0x31e>
 80030f0:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 80030f6:	f043 0301 	orr.w	r3, r3, #1
 80030fa:	6713      	str	r3, [r2, #112]	; 0x70
 80030fc:	e01c      	b.n	8003138 <HAL_RCC_OscConfig+0x358>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2b05      	cmp	r3, #5
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x340>
 8003106:	4b61      	ldr	r3, [pc, #388]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310a:	4a60      	ldr	r2, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6713      	str	r3, [r2, #112]	; 0x70
 8003112:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	4a5d      	ldr	r2, [pc, #372]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6713      	str	r3, [r2, #112]	; 0x70
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0x358>
 8003120:	4b5a      	ldr	r3, [pc, #360]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003124:	4a59      	ldr	r2, [pc, #356]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003130:	4a56      	ldr	r2, [pc, #344]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d015      	beq.n	800316c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003140:	f7ff f8a2 	bl	8002288 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003146:	e00a      	b.n	800315e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003148:	f7ff f89e 	bl	8002288 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	f241 3288 	movw	r2, #5000	; 0x1388
 8003156:	4293      	cmp	r3, r2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e0d7      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800315e:	4b4b      	ldr	r3, [pc, #300]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0ee      	beq.n	8003148 <HAL_RCC_OscConfig+0x368>
 800316a:	e014      	b.n	8003196 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800316c:	f7ff f88c 	bl	8002288 <HAL_GetTick>
 8003170:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003172:	e00a      	b.n	800318a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003174:	f7ff f888 	bl	8002288 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003182:	4293      	cmp	r3, r2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e0c1      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 800318c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ee      	bne.n	8003174 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003196:	7dfb      	ldrb	r3, [r7, #23]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d105      	bne.n	80031a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800319c:	4b3b      	ldr	r3, [pc, #236]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	4a3a      	ldr	r2, [pc, #232]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 80031a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80ad 	beq.w	800330c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031b2:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d060      	beq.n	8003280 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d145      	bne.n	8003252 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c6:	4b33      	ldr	r3, [pc, #204]	; (8003294 <HAL_RCC_OscConfig+0x4b4>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7ff f85c 	bl	8002288 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031d4:	f7ff f858 	bl	8002288 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e093      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69da      	ldr	r2, [r3, #28]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	3b01      	subs	r3, #1
 800320c:	041b      	lsls	r3, r3, #16
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321c:	071b      	lsls	r3, r3, #28
 800321e:	491b      	ldr	r1, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003224:	4b1b      	ldr	r3, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x4b4>)
 8003226:	2201      	movs	r2, #1
 8003228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7ff f82d 	bl	8002288 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003232:	f7ff f829 	bl	8002288 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e064      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	4b11      	ldr	r3, [pc, #68]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0f0      	beq.n	8003232 <HAL_RCC_OscConfig+0x452>
 8003250:	e05c      	b.n	800330c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <HAL_RCC_OscConfig+0x4b4>)
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003258:	f7ff f816 	bl	8002288 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003260:	f7ff f812 	bl	8002288 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e04d      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x4ac>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x480>
 800327e:	e045      	b.n	800330c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d107      	bne.n	8003298 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e040      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
 800328c:	40023800 	.word	0x40023800
 8003290:	40007000 	.word	0x40007000
 8003294:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCC_OscConfig+0x538>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d030      	beq.n	8003308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d129      	bne.n	8003308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d122      	bne.n	8003308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032c8:	4013      	ands	r3, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d119      	bne.n	8003308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	085b      	lsrs	r3, r3, #1
 80032e0:	3b01      	subs	r3, #1
 80032e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d10f      	bne.n	8003308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003302:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d001      	beq.n	800330c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3718      	adds	r7, #24
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800

0800331c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e041      	b.n	80033b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fe fd4e 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3304      	adds	r3, #4
 8003358:	4619      	mov	r1, r3
 800335a:	4610      	mov	r0, r2
 800335c:	f000 fdce 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d001      	beq.n	80033d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e04e      	b.n	8003472 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f042 0201 	orr.w	r2, r2, #1
 80033ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a23      	ldr	r2, [pc, #140]	; (8003480 <HAL_TIM_Base_Start_IT+0xc4>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d022      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033fe:	d01d      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_TIM_Base_Start_IT+0xc8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d018      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_TIM_Base_Start_IT+0xcc>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d013      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1c      	ldr	r2, [pc, #112]	; (800348c <HAL_TIM_Base_Start_IT+0xd0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d00e      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1b      	ldr	r2, [pc, #108]	; (8003490 <HAL_TIM_Base_Start_IT+0xd4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d009      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a19      	ldr	r2, [pc, #100]	; (8003494 <HAL_TIM_Base_Start_IT+0xd8>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d004      	beq.n	800343c <HAL_TIM_Base_Start_IT+0x80>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <HAL_TIM_Base_Start_IT+0xdc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b06      	cmp	r3, #6
 800344c:	d010      	beq.n	8003470 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f042 0201 	orr.w	r2, r2, #1
 800345c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800345e:	e007      	b.n	8003470 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0201 	orr.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3714      	adds	r7, #20
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40010000 	.word	0x40010000
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40010400 	.word	0x40010400
 8003494:	40014000 	.word	0x40014000
 8003498:	40001800 	.word	0x40001800

0800349c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e041      	b.n	8003532 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f839 	bl	800353a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	4619      	mov	r1, r3
 80034da:	4610      	mov	r0, r2
 80034dc:	f000 fd0e 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d109      	bne.n	8003574 <HAL_TIM_PWM_Start+0x24>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	bf14      	ite	ne
 800356c:	2301      	movne	r3, #1
 800356e:	2300      	moveq	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	e022      	b.n	80035ba <HAL_TIM_PWM_Start+0x6a>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d109      	bne.n	800358e <HAL_TIM_PWM_Start+0x3e>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	bf14      	ite	ne
 8003586:	2301      	movne	r3, #1
 8003588:	2300      	moveq	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	e015      	b.n	80035ba <HAL_TIM_PWM_Start+0x6a>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	2b08      	cmp	r3, #8
 8003592:	d109      	bne.n	80035a8 <HAL_TIM_PWM_Start+0x58>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	e008      	b.n	80035ba <HAL_TIM_PWM_Start+0x6a>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	bf14      	ite	ne
 80035b4:	2301      	movne	r3, #1
 80035b6:	2300      	moveq	r3, #0
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e07c      	b.n	80036bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <HAL_TIM_PWM_Start+0x82>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035d0:	e013      	b.n	80035fa <HAL_TIM_PWM_Start+0xaa>
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d104      	bne.n	80035e2 <HAL_TIM_PWM_Start+0x92>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2202      	movs	r2, #2
 80035dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035e0:	e00b      	b.n	80035fa <HAL_TIM_PWM_Start+0xaa>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d104      	bne.n	80035f2 <HAL_TIM_PWM_Start+0xa2>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035f0:	e003      	b.n	80035fa <HAL_TIM_PWM_Start+0xaa>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2202      	movs	r2, #2
 80035f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2201      	movs	r2, #1
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 ff64 	bl	80044d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2d      	ldr	r2, [pc, #180]	; (80036c4 <HAL_TIM_PWM_Start+0x174>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d004      	beq.n	800361c <HAL_TIM_PWM_Start+0xcc>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	; (80036c8 <HAL_TIM_PWM_Start+0x178>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d101      	bne.n	8003620 <HAL_TIM_PWM_Start+0xd0>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_TIM_PWM_Start+0xd2>
 8003620:	2300      	movs	r3, #0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <HAL_TIM_PWM_Start+0x174>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d022      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d01d      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1f      	ldr	r2, [pc, #124]	; (80036cc <HAL_TIM_PWM_Start+0x17c>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d018      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <HAL_TIM_PWM_Start+0x180>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d013      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1c      	ldr	r2, [pc, #112]	; (80036d4 <HAL_TIM_PWM_Start+0x184>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00e      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	; (80036c8 <HAL_TIM_PWM_Start+0x178>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d009      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a18      	ldr	r2, [pc, #96]	; (80036d8 <HAL_TIM_PWM_Start+0x188>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_TIM_PWM_Start+0x136>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a16      	ldr	r2, [pc, #88]	; (80036dc <HAL_TIM_PWM_Start+0x18c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d111      	bne.n	80036aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 0307 	and.w	r3, r3, #7
 8003690:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2b06      	cmp	r3, #6
 8003696:	d010      	beq.n	80036ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036a8:	e007      	b.n	80036ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f042 0201 	orr.w	r2, r2, #1
 80036b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	40010000 	.word	0x40010000
 80036c8:	40010400 	.word	0x40010400
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40014000 	.word	0x40014000
 80036dc:	40001800 	.word	0x40001800

080036e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e097      	b.n	8003824 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d106      	bne.n	800370e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7fe fb1b 	bl	8001d44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003724:	f023 0307 	bic.w	r3, r3, #7
 8003728:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	3304      	adds	r3, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4610      	mov	r0, r2
 8003736:	f000 fbe1 	bl	8003efc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4313      	orrs	r3, r2
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003780:	f023 030c 	bic.w	r3, r3, #12
 8003784:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800378c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003790:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	021b      	lsls	r3, r3, #8
 800379c:	4313      	orrs	r3, r2
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	011a      	lsls	r2, r3, #4
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	031b      	lsls	r3, r3, #12
 80037b0:	4313      	orrs	r3, r2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	695b      	ldr	r3, [r3, #20]
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	4313      	orrs	r3, r2
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800383c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003844:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800384c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003854:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d110      	bne.n	800387e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003862:	7b7b      	ldrb	r3, [r7, #13]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d001      	beq.n	800386c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e089      	b.n	8003980 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2202      	movs	r2, #2
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387c:	e031      	b.n	80038e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b04      	cmp	r3, #4
 8003882:	d110      	bne.n	80038a6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003884:	7bbb      	ldrb	r3, [r7, #14]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d102      	bne.n	8003890 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800388a:	7b3b      	ldrb	r3, [r7, #12]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d001      	beq.n	8003894 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e075      	b.n	8003980 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038a4:	e01d      	b.n	80038e2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d108      	bne.n	80038be <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80038ac:	7bbb      	ldrb	r3, [r7, #14]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d105      	bne.n	80038be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80038b2:	7b7b      	ldrb	r3, [r7, #13]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d102      	bne.n	80038be <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80038b8:	7b3b      	ldrb	r3, [r7, #12]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d001      	beq.n	80038c2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e05e      	b.n	8003980 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2202      	movs	r2, #2
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2202      	movs	r2, #2
 80038ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2202      	movs	r2, #2
 80038d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2202      	movs	r2, #2
 80038de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d010      	beq.n	8003910 <HAL_TIM_Encoder_Start_IT+0xe4>
 80038ee:	e01f      	b.n	8003930 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2201      	movs	r2, #1
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 fde9 	bl	80044d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0202 	orr.w	r2, r2, #2
 800390c:	60da      	str	r2, [r3, #12]
      break;
 800390e:	e02e      	b.n	800396e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2201      	movs	r2, #1
 8003916:	2104      	movs	r1, #4
 8003918:	4618      	mov	r0, r3
 800391a:	f000 fdd9 	bl	80044d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0204 	orr.w	r2, r2, #4
 800392c:	60da      	str	r2, [r3, #12]
      break;
 800392e:	e01e      	b.n	800396e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fdc9 	bl	80044d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2201      	movs	r2, #1
 8003944:	2104      	movs	r1, #4
 8003946:	4618      	mov	r0, r3
 8003948:	f000 fdc2 	bl	80044d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0202 	orr.w	r2, r2, #2
 800395a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0204 	orr.w	r2, r2, #4
 800396a:	60da      	str	r2, [r3, #12]
      break;
 800396c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f042 0201 	orr.w	r2, r2, #1
 800397c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b02      	cmp	r3, #2
 800399c:	d122      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d11b      	bne.n	80039e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0202 	mvn.w	r2, #2
 80039b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2201      	movs	r2, #1
 80039ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fa77 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fa69 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fa7a 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d122      	bne.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d11b      	bne.n	8003a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f06f 0204 	mvn.w	r2, #4
 8003a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2202      	movs	r2, #2
 8003a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa4d 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 8003a24:	e005      	b.n	8003a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fa3f 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 fa50 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d122      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0308 	and.w	r3, r3, #8
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d11b      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f06f 0208 	mvn.w	r2, #8
 8003a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2204      	movs	r2, #4
 8003a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d003      	beq.n	8003a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa23 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 8003a78:	e005      	b.n	8003a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fa15 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fa26 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b10      	cmp	r3, #16
 8003a98:	d122      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b10      	cmp	r3, #16
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0210 	mvn.w	r2, #16
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f9f9 	bl	8003ebe <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f9eb 	bl	8003eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f9fc 	bl	8003ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10e      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f06f 0201 	mvn.w	r2, #1
 8003b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f7fd fabe 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b16:	2b80      	cmp	r3, #128	; 0x80
 8003b18:	d10e      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d107      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fdca 	bl	80046cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b42:	2b40      	cmp	r3, #64	; 0x40
 8003b44:	d10e      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b50:	2b40      	cmp	r3, #64	; 0x40
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f9c1 	bl	8003ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f003 0320 	and.w	r3, r3, #32
 8003b6e:	2b20      	cmp	r3, #32
 8003b70:	d10e      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d107      	bne.n	8003b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f06f 0220 	mvn.w	r2, #32
 8003b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fd94 	bl	80046b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	e0ae      	b.n	8003d14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b0c      	cmp	r3, #12
 8003bc2:	f200 809f 	bhi.w	8003d04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003d05 	.word	0x08003d05
 8003bd4:	08003d05 	.word	0x08003d05
 8003bd8:	08003d05 	.word	0x08003d05
 8003bdc:	08003c41 	.word	0x08003c41
 8003be0:	08003d05 	.word	0x08003d05
 8003be4:	08003d05 	.word	0x08003d05
 8003be8:	08003d05 	.word	0x08003d05
 8003bec:	08003c83 	.word	0x08003c83
 8003bf0:	08003d05 	.word	0x08003d05
 8003bf4:	08003d05 	.word	0x08003d05
 8003bf8:	08003d05 	.word	0x08003d05
 8003bfc:	08003cc3 	.word	0x08003cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f000 fa18 	bl	800403c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0208 	orr.w	r2, r2, #8
 8003c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699a      	ldr	r2, [r3, #24]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f022 0204 	bic.w	r2, r2, #4
 8003c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6999      	ldr	r1, [r3, #24]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	619a      	str	r2, [r3, #24]
      break;
 8003c3e:	e064      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68b9      	ldr	r1, [r7, #8]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fa68 	bl	800411c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699a      	ldr	r2, [r3, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6999      	ldr	r1, [r3, #24]
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	021a      	lsls	r2, r3, #8
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	619a      	str	r2, [r3, #24]
      break;
 8003c80:	e043      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fabd 	bl	8004208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	69da      	ldr	r2, [r3, #28]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0208 	orr.w	r2, r2, #8
 8003c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	69da      	ldr	r2, [r3, #28]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0204 	bic.w	r2, r2, #4
 8003cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	69d9      	ldr	r1, [r3, #28]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	691a      	ldr	r2, [r3, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	61da      	str	r2, [r3, #28]
      break;
 8003cc0:	e023      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68b9      	ldr	r1, [r7, #8]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fb11 	bl	80042f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	69da      	ldr	r2, [r3, #28]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	69da      	ldr	r2, [r3, #28]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	69d9      	ldr	r1, [r3, #28]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	021a      	lsls	r2, r3, #8
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	61da      	str	r2, [r3, #28]
      break;
 8003d02:	e002      	b.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	75fb      	strb	r3, [r7, #23]
      break;
 8003d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_ConfigClockSource+0x1c>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0b4      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x186>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d70:	d03e      	beq.n	8003df0 <HAL_TIM_ConfigClockSource+0xd4>
 8003d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d76:	f200 8087 	bhi.w	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d7e:	f000 8086 	beq.w	8003e8e <HAL_TIM_ConfigClockSource+0x172>
 8003d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d86:	d87f      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003d88:	2b70      	cmp	r3, #112	; 0x70
 8003d8a:	d01a      	beq.n	8003dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8003d8c:	2b70      	cmp	r3, #112	; 0x70
 8003d8e:	d87b      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003d90:	2b60      	cmp	r3, #96	; 0x60
 8003d92:	d050      	beq.n	8003e36 <HAL_TIM_ConfigClockSource+0x11a>
 8003d94:	2b60      	cmp	r3, #96	; 0x60
 8003d96:	d877      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003d98:	2b50      	cmp	r3, #80	; 0x50
 8003d9a:	d03c      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0xfa>
 8003d9c:	2b50      	cmp	r3, #80	; 0x50
 8003d9e:	d873      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b40      	cmp	r3, #64	; 0x40
 8003da2:	d058      	beq.n	8003e56 <HAL_TIM_ConfigClockSource+0x13a>
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d86f      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b30      	cmp	r3, #48	; 0x30
 8003daa:	d064      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	2b30      	cmp	r3, #48	; 0x30
 8003dae:	d86b      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d060      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x15a>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d867      	bhi.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d05c      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x15a>
 8003dbc:	2b10      	cmp	r3, #16
 8003dbe:	d05a      	beq.n	8003e76 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc0:	e062      	b.n	8003e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6818      	ldr	r0, [r3, #0]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6899      	ldr	r1, [r3, #8]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	f000 fb5d 	bl	8004490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	609a      	str	r2, [r3, #8]
      break;
 8003dee:	e04f      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f000 fb46 	bl	8004490 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e12:	609a      	str	r2, [r3, #8]
      break;
 8003e14:	e03c      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6859      	ldr	r1, [r3, #4]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	461a      	mov	r2, r3
 8003e24:	f000 faba 	bl	800439c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2150      	movs	r1, #80	; 0x50
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 fb13 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e34:	e02c      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6818      	ldr	r0, [r3, #0]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	6859      	ldr	r1, [r3, #4]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	461a      	mov	r2, r3
 8003e44:	f000 fad9 	bl	80043fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2160      	movs	r1, #96	; 0x60
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 fb03 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e54:	e01c      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6818      	ldr	r0, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	6859      	ldr	r1, [r3, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	461a      	mov	r2, r3
 8003e64:	f000 fa9a 	bl	800439c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2140      	movs	r1, #64	; 0x40
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 faf3 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e74:	e00c      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4610      	mov	r0, r2
 8003e82:	f000 faea 	bl	800445a <TIM_ITRx_SetConfig>
      break;
 8003e86:	e003      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3710      	adds	r7, #16
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eee:	bf00      	nop
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a40      	ldr	r2, [pc, #256]	; (8004010 <TIM_Base_SetConfig+0x114>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a3d      	ldr	r2, [pc, #244]	; (8004014 <TIM_Base_SetConfig+0x118>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a3c      	ldr	r2, [pc, #240]	; (8004018 <TIM_Base_SetConfig+0x11c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a3b      	ldr	r2, [pc, #236]	; (800401c <TIM_Base_SetConfig+0x120>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3a      	ldr	r2, [pc, #232]	; (8004020 <TIM_Base_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <TIM_Base_SetConfig+0x114>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5c:	d027      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <TIM_Base_SetConfig+0x118>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d023      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a2b      	ldr	r2, [pc, #172]	; (8004018 <TIM_Base_SetConfig+0x11c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2a      	ldr	r2, [pc, #168]	; (800401c <TIM_Base_SetConfig+0x120>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a29      	ldr	r2, [pc, #164]	; (8004020 <TIM_Base_SetConfig+0x124>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d017      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a28      	ldr	r2, [pc, #160]	; (8004024 <TIM_Base_SetConfig+0x128>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a27      	ldr	r2, [pc, #156]	; (8004028 <TIM_Base_SetConfig+0x12c>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a26      	ldr	r2, [pc, #152]	; (800402c <TIM_Base_SetConfig+0x130>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a25      	ldr	r2, [pc, #148]	; (8004030 <TIM_Base_SetConfig+0x134>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a24      	ldr	r2, [pc, #144]	; (8004034 <TIM_Base_SetConfig+0x138>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a23      	ldr	r2, [pc, #140]	; (8004038 <TIM_Base_SetConfig+0x13c>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d108      	bne.n	8003fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <TIM_Base_SetConfig+0x114>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0xf8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a0c      	ldr	r2, [pc, #48]	; (8004020 <TIM_Base_SetConfig+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d103      	bne.n	8003ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	615a      	str	r2, [r3, #20]
}
 8004002:	bf00      	nop
 8004004:	3714      	adds	r7, #20
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40000c00 	.word	0x40000c00
 8004020:	40010400 	.word	0x40010400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800
 8004030:	40001800 	.word	0x40001800
 8004034:	40001c00 	.word	0x40001c00
 8004038:	40002000 	.word	0x40002000

0800403c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800403c:	b480      	push	{r7}
 800403e:	b087      	sub	sp, #28
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	f023 0201 	bic.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	4313      	orrs	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f023 0302 	bic.w	r3, r3, #2
 8004084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a20      	ldr	r2, [pc, #128]	; (8004114 <TIM_OC1_SetConfig+0xd8>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC1_SetConfig+0x64>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <TIM_OC1_SetConfig+0xdc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d10c      	bne.n	80040ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0308 	bic.w	r3, r3, #8
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f023 0304 	bic.w	r3, r3, #4
 80040b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	; (8004114 <TIM_OC1_SetConfig+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d003      	beq.n	80040ca <TIM_OC1_SetConfig+0x8e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a14      	ldr	r2, [pc, #80]	; (8004118 <TIM_OC1_SetConfig+0xdc>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d111      	bne.n	80040ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685a      	ldr	r2, [r3, #4]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	621a      	str	r2, [r3, #32]
}
 8004108:	bf00      	nop
 800410a:	371c      	adds	r7, #28
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	40010000 	.word	0x40010000
 8004118:	40010400 	.word	0x40010400

0800411c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0210 	bic.w	r2, r3, #16
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	021b      	lsls	r3, r3, #8
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f023 0320 	bic.w	r3, r3, #32
 8004166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	011b      	lsls	r3, r3, #4
 800416e:	697a      	ldr	r2, [r7, #20]
 8004170:	4313      	orrs	r3, r2
 8004172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a22      	ldr	r2, [pc, #136]	; (8004200 <TIM_OC2_SetConfig+0xe4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_OC2_SetConfig+0x68>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a21      	ldr	r2, [pc, #132]	; (8004204 <TIM_OC2_SetConfig+0xe8>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d10d      	bne.n	80041a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800418a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	4313      	orrs	r3, r2
 8004196:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800419e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a17      	ldr	r2, [pc, #92]	; (8004200 <TIM_OC2_SetConfig+0xe4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d003      	beq.n	80041b0 <TIM_OC2_SetConfig+0x94>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a16      	ldr	r2, [pc, #88]	; (8004204 <TIM_OC2_SetConfig+0xe8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d113      	bne.n	80041d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	693a      	ldr	r2, [r7, #16]
 80041dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40010400 	.word	0x40010400

08004208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f023 0303 	bic.w	r3, r3, #3
 800423e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	4313      	orrs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a21      	ldr	r2, [pc, #132]	; (80042e8 <TIM_OC3_SetConfig+0xe0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_OC3_SetConfig+0x66>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a20      	ldr	r2, [pc, #128]	; (80042ec <TIM_OC3_SetConfig+0xe4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004274:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a16      	ldr	r2, [pc, #88]	; (80042e8 <TIM_OC3_SetConfig+0xe0>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d003      	beq.n	800429a <TIM_OC3_SetConfig+0x92>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <TIM_OC3_SetConfig+0xe4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d113      	bne.n	80042c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	011b      	lsls	r3, r3, #4
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	697a      	ldr	r2, [r7, #20]
 80042da:	621a      	str	r2, [r3, #32]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	40010000 	.word	0x40010000
 80042ec:	40010400 	.word	0x40010400

080042f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800431e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800433a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	031b      	lsls	r3, r3, #12
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a12      	ldr	r2, [pc, #72]	; (8004394 <TIM_OC4_SetConfig+0xa4>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_OC4_SetConfig+0x68>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a11      	ldr	r2, [pc, #68]	; (8004398 <TIM_OC4_SetConfig+0xa8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d109      	bne.n	800436c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800435e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	019b      	lsls	r3, r3, #6
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685a      	ldr	r2, [r3, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	621a      	str	r2, [r3, #32]
}
 8004386:	bf00      	nop
 8004388:	371c      	adds	r7, #28
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40010400 	.word	0x40010400

0800439c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	f023 0201 	bic.w	r2, r3, #1
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f023 030a 	bic.w	r3, r3, #10
 80043d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	621a      	str	r2, [r3, #32]
}
 80043ee:	bf00      	nop
 80043f0:	371c      	adds	r7, #28
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b087      	sub	sp, #28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	60f8      	str	r0, [r7, #12]
 8004402:	60b9      	str	r1, [r7, #8]
 8004404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a1b      	ldr	r3, [r3, #32]
 800440a:	f023 0210 	bic.w	r2, r3, #16
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	031b      	lsls	r3, r3, #12
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4313      	orrs	r3, r2
 8004440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	621a      	str	r2, [r3, #32]
}
 800444e:	bf00      	nop
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004470:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	f043 0307 	orr.w	r3, r3, #7
 800447c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	021a      	lsls	r2, r3, #8
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	609a      	str	r2, [r3, #8]
}
 80044c4:	bf00      	nop
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b087      	sub	sp, #28
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f003 031f 	and.w	r3, r3, #31
 80044e2:	2201      	movs	r2, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 031f 	and.w	r3, r3, #31
 8004502:	6879      	ldr	r1, [r7, #4]
 8004504:	fa01 f303 	lsl.w	r3, r1, r3
 8004508:	431a      	orrs	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e05a      	b.n	80045ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a21      	ldr	r2, [pc, #132]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d022      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004580:	d01d      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a1d      	ldr	r2, [pc, #116]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d018      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d013      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00e      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a18      	ldr	r2, [pc, #96]	; (8004608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d009      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a17      	ldr	r2, [pc, #92]	; (800460c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d004      	beq.n	80045be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d10c      	bne.n	80045d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68ba      	ldr	r2, [r7, #8]
 80045d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40010400 	.word	0x40010400
 800460c:	40014000 	.word	0x40014000
 8004610:	40001800 	.word	0x40001800

08004614 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004628:	2b01      	cmp	r3, #1
 800462a:	d101      	bne.n	8004630 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800462c:	2302      	movs	r3, #2
 800462e:	e03d      	b.n	80046ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	4313      	orrs	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	4313      	orrs	r3, r2
 8004660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <__errno>:
 80046e0:	4b01      	ldr	r3, [pc, #4]	; (80046e8 <__errno+0x8>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000014 	.word	0x20000014

080046ec <__libc_init_array>:
 80046ec:	b570      	push	{r4, r5, r6, lr}
 80046ee:	4d0d      	ldr	r5, [pc, #52]	; (8004724 <__libc_init_array+0x38>)
 80046f0:	4c0d      	ldr	r4, [pc, #52]	; (8004728 <__libc_init_array+0x3c>)
 80046f2:	1b64      	subs	r4, r4, r5
 80046f4:	10a4      	asrs	r4, r4, #2
 80046f6:	2600      	movs	r6, #0
 80046f8:	42a6      	cmp	r6, r4
 80046fa:	d109      	bne.n	8004710 <__libc_init_array+0x24>
 80046fc:	4d0b      	ldr	r5, [pc, #44]	; (800472c <__libc_init_array+0x40>)
 80046fe:	4c0c      	ldr	r4, [pc, #48]	; (8004730 <__libc_init_array+0x44>)
 8004700:	f003 fe10 	bl	8008324 <_init>
 8004704:	1b64      	subs	r4, r4, r5
 8004706:	10a4      	asrs	r4, r4, #2
 8004708:	2600      	movs	r6, #0
 800470a:	42a6      	cmp	r6, r4
 800470c:	d105      	bne.n	800471a <__libc_init_array+0x2e>
 800470e:	bd70      	pop	{r4, r5, r6, pc}
 8004710:	f855 3b04 	ldr.w	r3, [r5], #4
 8004714:	4798      	blx	r3
 8004716:	3601      	adds	r6, #1
 8004718:	e7ee      	b.n	80046f8 <__libc_init_array+0xc>
 800471a:	f855 3b04 	ldr.w	r3, [r5], #4
 800471e:	4798      	blx	r3
 8004720:	3601      	adds	r6, #1
 8004722:	e7f2      	b.n	800470a <__libc_init_array+0x1e>
 8004724:	08008948 	.word	0x08008948
 8004728:	08008948 	.word	0x08008948
 800472c:	08008948 	.word	0x08008948
 8004730:	0800894c 	.word	0x0800894c

08004734 <memset>:
 8004734:	4402      	add	r2, r0
 8004736:	4603      	mov	r3, r0
 8004738:	4293      	cmp	r3, r2
 800473a:	d100      	bne.n	800473e <memset+0xa>
 800473c:	4770      	bx	lr
 800473e:	f803 1b01 	strb.w	r1, [r3], #1
 8004742:	e7f9      	b.n	8004738 <memset+0x4>

08004744 <__cvt>:
 8004744:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004748:	ec55 4b10 	vmov	r4, r5, d0
 800474c:	2d00      	cmp	r5, #0
 800474e:	460e      	mov	r6, r1
 8004750:	4619      	mov	r1, r3
 8004752:	462b      	mov	r3, r5
 8004754:	bfbb      	ittet	lt
 8004756:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800475a:	461d      	movlt	r5, r3
 800475c:	2300      	movge	r3, #0
 800475e:	232d      	movlt	r3, #45	; 0x2d
 8004760:	700b      	strb	r3, [r1, #0]
 8004762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004764:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004768:	4691      	mov	r9, r2
 800476a:	f023 0820 	bic.w	r8, r3, #32
 800476e:	bfbc      	itt	lt
 8004770:	4622      	movlt	r2, r4
 8004772:	4614      	movlt	r4, r2
 8004774:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004778:	d005      	beq.n	8004786 <__cvt+0x42>
 800477a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800477e:	d100      	bne.n	8004782 <__cvt+0x3e>
 8004780:	3601      	adds	r6, #1
 8004782:	2102      	movs	r1, #2
 8004784:	e000      	b.n	8004788 <__cvt+0x44>
 8004786:	2103      	movs	r1, #3
 8004788:	ab03      	add	r3, sp, #12
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	ab02      	add	r3, sp, #8
 800478e:	9300      	str	r3, [sp, #0]
 8004790:	ec45 4b10 	vmov	d0, r4, r5
 8004794:	4653      	mov	r3, sl
 8004796:	4632      	mov	r2, r6
 8004798:	f000 fe1a 	bl	80053d0 <_dtoa_r>
 800479c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80047a0:	4607      	mov	r7, r0
 80047a2:	d102      	bne.n	80047aa <__cvt+0x66>
 80047a4:	f019 0f01 	tst.w	r9, #1
 80047a8:	d022      	beq.n	80047f0 <__cvt+0xac>
 80047aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80047ae:	eb07 0906 	add.w	r9, r7, r6
 80047b2:	d110      	bne.n	80047d6 <__cvt+0x92>
 80047b4:	783b      	ldrb	r3, [r7, #0]
 80047b6:	2b30      	cmp	r3, #48	; 0x30
 80047b8:	d10a      	bne.n	80047d0 <__cvt+0x8c>
 80047ba:	2200      	movs	r2, #0
 80047bc:	2300      	movs	r3, #0
 80047be:	4620      	mov	r0, r4
 80047c0:	4629      	mov	r1, r5
 80047c2:	f7fc f9a1 	bl	8000b08 <__aeabi_dcmpeq>
 80047c6:	b918      	cbnz	r0, 80047d0 <__cvt+0x8c>
 80047c8:	f1c6 0601 	rsb	r6, r6, #1
 80047cc:	f8ca 6000 	str.w	r6, [sl]
 80047d0:	f8da 3000 	ldr.w	r3, [sl]
 80047d4:	4499      	add	r9, r3
 80047d6:	2200      	movs	r2, #0
 80047d8:	2300      	movs	r3, #0
 80047da:	4620      	mov	r0, r4
 80047dc:	4629      	mov	r1, r5
 80047de:	f7fc f993 	bl	8000b08 <__aeabi_dcmpeq>
 80047e2:	b108      	cbz	r0, 80047e8 <__cvt+0xa4>
 80047e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80047e8:	2230      	movs	r2, #48	; 0x30
 80047ea:	9b03      	ldr	r3, [sp, #12]
 80047ec:	454b      	cmp	r3, r9
 80047ee:	d307      	bcc.n	8004800 <__cvt+0xbc>
 80047f0:	9b03      	ldr	r3, [sp, #12]
 80047f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f4:	1bdb      	subs	r3, r3, r7
 80047f6:	4638      	mov	r0, r7
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	b004      	add	sp, #16
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	9103      	str	r1, [sp, #12]
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	e7f0      	b.n	80047ea <__cvt+0xa6>

08004808 <__exponent>:
 8004808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800480a:	4603      	mov	r3, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	bfb8      	it	lt
 8004810:	4249      	neglt	r1, r1
 8004812:	f803 2b02 	strb.w	r2, [r3], #2
 8004816:	bfb4      	ite	lt
 8004818:	222d      	movlt	r2, #45	; 0x2d
 800481a:	222b      	movge	r2, #43	; 0x2b
 800481c:	2909      	cmp	r1, #9
 800481e:	7042      	strb	r2, [r0, #1]
 8004820:	dd2a      	ble.n	8004878 <__exponent+0x70>
 8004822:	f10d 0407 	add.w	r4, sp, #7
 8004826:	46a4      	mov	ip, r4
 8004828:	270a      	movs	r7, #10
 800482a:	46a6      	mov	lr, r4
 800482c:	460a      	mov	r2, r1
 800482e:	fb91 f6f7 	sdiv	r6, r1, r7
 8004832:	fb07 1516 	mls	r5, r7, r6, r1
 8004836:	3530      	adds	r5, #48	; 0x30
 8004838:	2a63      	cmp	r2, #99	; 0x63
 800483a:	f104 34ff 	add.w	r4, r4, #4294967295
 800483e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004842:	4631      	mov	r1, r6
 8004844:	dcf1      	bgt.n	800482a <__exponent+0x22>
 8004846:	3130      	adds	r1, #48	; 0x30
 8004848:	f1ae 0502 	sub.w	r5, lr, #2
 800484c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004850:	1c44      	adds	r4, r0, #1
 8004852:	4629      	mov	r1, r5
 8004854:	4561      	cmp	r1, ip
 8004856:	d30a      	bcc.n	800486e <__exponent+0x66>
 8004858:	f10d 0209 	add.w	r2, sp, #9
 800485c:	eba2 020e 	sub.w	r2, r2, lr
 8004860:	4565      	cmp	r5, ip
 8004862:	bf88      	it	hi
 8004864:	2200      	movhi	r2, #0
 8004866:	4413      	add	r3, r2
 8004868:	1a18      	subs	r0, r3, r0
 800486a:	b003      	add	sp, #12
 800486c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800486e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004872:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004876:	e7ed      	b.n	8004854 <__exponent+0x4c>
 8004878:	2330      	movs	r3, #48	; 0x30
 800487a:	3130      	adds	r1, #48	; 0x30
 800487c:	7083      	strb	r3, [r0, #2]
 800487e:	70c1      	strb	r1, [r0, #3]
 8004880:	1d03      	adds	r3, r0, #4
 8004882:	e7f1      	b.n	8004868 <__exponent+0x60>

08004884 <_printf_float>:
 8004884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004888:	ed2d 8b02 	vpush	{d8}
 800488c:	b08d      	sub	sp, #52	; 0x34
 800488e:	460c      	mov	r4, r1
 8004890:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004894:	4616      	mov	r6, r2
 8004896:	461f      	mov	r7, r3
 8004898:	4605      	mov	r5, r0
 800489a:	f001 fd3f 	bl	800631c <_localeconv_r>
 800489e:	f8d0 a000 	ldr.w	sl, [r0]
 80048a2:	4650      	mov	r0, sl
 80048a4:	f7fb fcb4 	bl	8000210 <strlen>
 80048a8:	2300      	movs	r3, #0
 80048aa:	930a      	str	r3, [sp, #40]	; 0x28
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	9305      	str	r3, [sp, #20]
 80048b0:	f8d8 3000 	ldr.w	r3, [r8]
 80048b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80048b8:	3307      	adds	r3, #7
 80048ba:	f023 0307 	bic.w	r3, r3, #7
 80048be:	f103 0208 	add.w	r2, r3, #8
 80048c2:	f8c8 2000 	str.w	r2, [r8]
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80048ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80048d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80048d6:	9307      	str	r3, [sp, #28]
 80048d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80048dc:	ee08 0a10 	vmov	s16, r0
 80048e0:	4b9f      	ldr	r3, [pc, #636]	; (8004b60 <_printf_float+0x2dc>)
 80048e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048e6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ea:	f7fc f93f 	bl	8000b6c <__aeabi_dcmpun>
 80048ee:	bb88      	cbnz	r0, 8004954 <_printf_float+0xd0>
 80048f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048f4:	4b9a      	ldr	r3, [pc, #616]	; (8004b60 <_printf_float+0x2dc>)
 80048f6:	f04f 32ff 	mov.w	r2, #4294967295
 80048fa:	f7fc f919 	bl	8000b30 <__aeabi_dcmple>
 80048fe:	bb48      	cbnz	r0, 8004954 <_printf_float+0xd0>
 8004900:	2200      	movs	r2, #0
 8004902:	2300      	movs	r3, #0
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f7fc f908 	bl	8000b1c <__aeabi_dcmplt>
 800490c:	b110      	cbz	r0, 8004914 <_printf_float+0x90>
 800490e:	232d      	movs	r3, #45	; 0x2d
 8004910:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004914:	4b93      	ldr	r3, [pc, #588]	; (8004b64 <_printf_float+0x2e0>)
 8004916:	4894      	ldr	r0, [pc, #592]	; (8004b68 <_printf_float+0x2e4>)
 8004918:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800491c:	bf94      	ite	ls
 800491e:	4698      	movls	r8, r3
 8004920:	4680      	movhi	r8, r0
 8004922:	2303      	movs	r3, #3
 8004924:	6123      	str	r3, [r4, #16]
 8004926:	9b05      	ldr	r3, [sp, #20]
 8004928:	f023 0204 	bic.w	r2, r3, #4
 800492c:	6022      	str	r2, [r4, #0]
 800492e:	f04f 0900 	mov.w	r9, #0
 8004932:	9700      	str	r7, [sp, #0]
 8004934:	4633      	mov	r3, r6
 8004936:	aa0b      	add	r2, sp, #44	; 0x2c
 8004938:	4621      	mov	r1, r4
 800493a:	4628      	mov	r0, r5
 800493c:	f000 f9d8 	bl	8004cf0 <_printf_common>
 8004940:	3001      	adds	r0, #1
 8004942:	f040 8090 	bne.w	8004a66 <_printf_float+0x1e2>
 8004946:	f04f 30ff 	mov.w	r0, #4294967295
 800494a:	b00d      	add	sp, #52	; 0x34
 800494c:	ecbd 8b02 	vpop	{d8}
 8004950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004954:	4642      	mov	r2, r8
 8004956:	464b      	mov	r3, r9
 8004958:	4640      	mov	r0, r8
 800495a:	4649      	mov	r1, r9
 800495c:	f7fc f906 	bl	8000b6c <__aeabi_dcmpun>
 8004960:	b140      	cbz	r0, 8004974 <_printf_float+0xf0>
 8004962:	464b      	mov	r3, r9
 8004964:	2b00      	cmp	r3, #0
 8004966:	bfbc      	itt	lt
 8004968:	232d      	movlt	r3, #45	; 0x2d
 800496a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800496e:	487f      	ldr	r0, [pc, #508]	; (8004b6c <_printf_float+0x2e8>)
 8004970:	4b7f      	ldr	r3, [pc, #508]	; (8004b70 <_printf_float+0x2ec>)
 8004972:	e7d1      	b.n	8004918 <_printf_float+0x94>
 8004974:	6863      	ldr	r3, [r4, #4]
 8004976:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800497a:	9206      	str	r2, [sp, #24]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	d13f      	bne.n	8004a00 <_printf_float+0x17c>
 8004980:	2306      	movs	r3, #6
 8004982:	6063      	str	r3, [r4, #4]
 8004984:	9b05      	ldr	r3, [sp, #20]
 8004986:	6861      	ldr	r1, [r4, #4]
 8004988:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800498c:	2300      	movs	r3, #0
 800498e:	9303      	str	r3, [sp, #12]
 8004990:	ab0a      	add	r3, sp, #40	; 0x28
 8004992:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004996:	ab09      	add	r3, sp, #36	; 0x24
 8004998:	ec49 8b10 	vmov	d0, r8, r9
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	6022      	str	r2, [r4, #0]
 80049a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80049a4:	4628      	mov	r0, r5
 80049a6:	f7ff fecd 	bl	8004744 <__cvt>
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049ae:	2b47      	cmp	r3, #71	; 0x47
 80049b0:	4680      	mov	r8, r0
 80049b2:	d108      	bne.n	80049c6 <_printf_float+0x142>
 80049b4:	1cc8      	adds	r0, r1, #3
 80049b6:	db02      	blt.n	80049be <_printf_float+0x13a>
 80049b8:	6863      	ldr	r3, [r4, #4]
 80049ba:	4299      	cmp	r1, r3
 80049bc:	dd41      	ble.n	8004a42 <_printf_float+0x1be>
 80049be:	f1ab 0b02 	sub.w	fp, fp, #2
 80049c2:	fa5f fb8b 	uxtb.w	fp, fp
 80049c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80049ca:	d820      	bhi.n	8004a0e <_printf_float+0x18a>
 80049cc:	3901      	subs	r1, #1
 80049ce:	465a      	mov	r2, fp
 80049d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80049d4:	9109      	str	r1, [sp, #36]	; 0x24
 80049d6:	f7ff ff17 	bl	8004808 <__exponent>
 80049da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049dc:	1813      	adds	r3, r2, r0
 80049de:	2a01      	cmp	r2, #1
 80049e0:	4681      	mov	r9, r0
 80049e2:	6123      	str	r3, [r4, #16]
 80049e4:	dc02      	bgt.n	80049ec <_printf_float+0x168>
 80049e6:	6822      	ldr	r2, [r4, #0]
 80049e8:	07d2      	lsls	r2, r2, #31
 80049ea:	d501      	bpl.n	80049f0 <_printf_float+0x16c>
 80049ec:	3301      	adds	r3, #1
 80049ee:	6123      	str	r3, [r4, #16]
 80049f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d09c      	beq.n	8004932 <_printf_float+0xae>
 80049f8:	232d      	movs	r3, #45	; 0x2d
 80049fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049fe:	e798      	b.n	8004932 <_printf_float+0xae>
 8004a00:	9a06      	ldr	r2, [sp, #24]
 8004a02:	2a47      	cmp	r2, #71	; 0x47
 8004a04:	d1be      	bne.n	8004984 <_printf_float+0x100>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1bc      	bne.n	8004984 <_printf_float+0x100>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7b9      	b.n	8004982 <_printf_float+0xfe>
 8004a0e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004a12:	d118      	bne.n	8004a46 <_printf_float+0x1c2>
 8004a14:	2900      	cmp	r1, #0
 8004a16:	6863      	ldr	r3, [r4, #4]
 8004a18:	dd0b      	ble.n	8004a32 <_printf_float+0x1ae>
 8004a1a:	6121      	str	r1, [r4, #16]
 8004a1c:	b913      	cbnz	r3, 8004a24 <_printf_float+0x1a0>
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	07d0      	lsls	r0, r2, #31
 8004a22:	d502      	bpl.n	8004a2a <_printf_float+0x1a6>
 8004a24:	3301      	adds	r3, #1
 8004a26:	440b      	add	r3, r1
 8004a28:	6123      	str	r3, [r4, #16]
 8004a2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004a2c:	f04f 0900 	mov.w	r9, #0
 8004a30:	e7de      	b.n	80049f0 <_printf_float+0x16c>
 8004a32:	b913      	cbnz	r3, 8004a3a <_printf_float+0x1b6>
 8004a34:	6822      	ldr	r2, [r4, #0]
 8004a36:	07d2      	lsls	r2, r2, #31
 8004a38:	d501      	bpl.n	8004a3e <_printf_float+0x1ba>
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	e7f4      	b.n	8004a28 <_printf_float+0x1a4>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7f2      	b.n	8004a28 <_printf_float+0x1a4>
 8004a42:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a48:	4299      	cmp	r1, r3
 8004a4a:	db05      	blt.n	8004a58 <_printf_float+0x1d4>
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	6121      	str	r1, [r4, #16]
 8004a50:	07d8      	lsls	r0, r3, #31
 8004a52:	d5ea      	bpl.n	8004a2a <_printf_float+0x1a6>
 8004a54:	1c4b      	adds	r3, r1, #1
 8004a56:	e7e7      	b.n	8004a28 <_printf_float+0x1a4>
 8004a58:	2900      	cmp	r1, #0
 8004a5a:	bfd4      	ite	le
 8004a5c:	f1c1 0202 	rsble	r2, r1, #2
 8004a60:	2201      	movgt	r2, #1
 8004a62:	4413      	add	r3, r2
 8004a64:	e7e0      	b.n	8004a28 <_printf_float+0x1a4>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	055a      	lsls	r2, r3, #21
 8004a6a:	d407      	bmi.n	8004a7c <_printf_float+0x1f8>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	4642      	mov	r2, r8
 8004a70:	4631      	mov	r1, r6
 8004a72:	4628      	mov	r0, r5
 8004a74:	47b8      	blx	r7
 8004a76:	3001      	adds	r0, #1
 8004a78:	d12c      	bne.n	8004ad4 <_printf_float+0x250>
 8004a7a:	e764      	b.n	8004946 <_printf_float+0xc2>
 8004a7c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a80:	f240 80e0 	bls.w	8004c44 <_printf_float+0x3c0>
 8004a84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a88:	2200      	movs	r2, #0
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f7fc f83c 	bl	8000b08 <__aeabi_dcmpeq>
 8004a90:	2800      	cmp	r0, #0
 8004a92:	d034      	beq.n	8004afe <_printf_float+0x27a>
 8004a94:	4a37      	ldr	r2, [pc, #220]	; (8004b74 <_printf_float+0x2f0>)
 8004a96:	2301      	movs	r3, #1
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f af51 	beq.w	8004946 <_printf_float+0xc2>
 8004aa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	db02      	blt.n	8004ab2 <_printf_float+0x22e>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	07d8      	lsls	r0, r3, #31
 8004ab0:	d510      	bpl.n	8004ad4 <_printf_float+0x250>
 8004ab2:	ee18 3a10 	vmov	r3, s16
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f af41 	beq.w	8004946 <_printf_float+0xc2>
 8004ac4:	f04f 0800 	mov.w	r8, #0
 8004ac8:	f104 091a 	add.w	r9, r4, #26
 8004acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	4543      	cmp	r3, r8
 8004ad2:	dc09      	bgt.n	8004ae8 <_printf_float+0x264>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	079b      	lsls	r3, r3, #30
 8004ad8:	f100 8105 	bmi.w	8004ce6 <_printf_float+0x462>
 8004adc:	68e0      	ldr	r0, [r4, #12]
 8004ade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	bfb8      	it	lt
 8004ae4:	4618      	movlt	r0, r3
 8004ae6:	e730      	b.n	800494a <_printf_float+0xc6>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	464a      	mov	r2, r9
 8004aec:	4631      	mov	r1, r6
 8004aee:	4628      	mov	r0, r5
 8004af0:	47b8      	blx	r7
 8004af2:	3001      	adds	r0, #1
 8004af4:	f43f af27 	beq.w	8004946 <_printf_float+0xc2>
 8004af8:	f108 0801 	add.w	r8, r8, #1
 8004afc:	e7e6      	b.n	8004acc <_printf_float+0x248>
 8004afe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dc39      	bgt.n	8004b78 <_printf_float+0x2f4>
 8004b04:	4a1b      	ldr	r2, [pc, #108]	; (8004b74 <_printf_float+0x2f0>)
 8004b06:	2301      	movs	r3, #1
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f af19 	beq.w	8004946 <_printf_float+0xc2>
 8004b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	d102      	bne.n	8004b22 <_printf_float+0x29e>
 8004b1c:	6823      	ldr	r3, [r4, #0]
 8004b1e:	07d9      	lsls	r1, r3, #31
 8004b20:	d5d8      	bpl.n	8004ad4 <_printf_float+0x250>
 8004b22:	ee18 3a10 	vmov	r3, s16
 8004b26:	4652      	mov	r2, sl
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f43f af09 	beq.w	8004946 <_printf_float+0xc2>
 8004b34:	f04f 0900 	mov.w	r9, #0
 8004b38:	f104 0a1a 	add.w	sl, r4, #26
 8004b3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b3e:	425b      	negs	r3, r3
 8004b40:	454b      	cmp	r3, r9
 8004b42:	dc01      	bgt.n	8004b48 <_printf_float+0x2c4>
 8004b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b46:	e792      	b.n	8004a6e <_printf_float+0x1ea>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	4652      	mov	r2, sl
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f aef7 	beq.w	8004946 <_printf_float+0xc2>
 8004b58:	f109 0901 	add.w	r9, r9, #1
 8004b5c:	e7ee      	b.n	8004b3c <_printf_float+0x2b8>
 8004b5e:	bf00      	nop
 8004b60:	7fefffff 	.word	0x7fefffff
 8004b64:	08008390 	.word	0x08008390
 8004b68:	08008394 	.word	0x08008394
 8004b6c:	0800839c 	.word	0x0800839c
 8004b70:	08008398 	.word	0x08008398
 8004b74:	080083a0 	.word	0x080083a0
 8004b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	bfa8      	it	ge
 8004b80:	461a      	movge	r2, r3
 8004b82:	2a00      	cmp	r2, #0
 8004b84:	4691      	mov	r9, r2
 8004b86:	dc37      	bgt.n	8004bf8 <_printf_float+0x374>
 8004b88:	f04f 0b00 	mov.w	fp, #0
 8004b8c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b90:	f104 021a 	add.w	r2, r4, #26
 8004b94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b96:	9305      	str	r3, [sp, #20]
 8004b98:	eba3 0309 	sub.w	r3, r3, r9
 8004b9c:	455b      	cmp	r3, fp
 8004b9e:	dc33      	bgt.n	8004c08 <_printf_float+0x384>
 8004ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	db3b      	blt.n	8004c20 <_printf_float+0x39c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07da      	lsls	r2, r3, #31
 8004bac:	d438      	bmi.n	8004c20 <_printf_float+0x39c>
 8004bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb0:	9a05      	ldr	r2, [sp, #20]
 8004bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004bb4:	1a9a      	subs	r2, r3, r2
 8004bb6:	eba3 0901 	sub.w	r9, r3, r1
 8004bba:	4591      	cmp	r9, r2
 8004bbc:	bfa8      	it	ge
 8004bbe:	4691      	movge	r9, r2
 8004bc0:	f1b9 0f00 	cmp.w	r9, #0
 8004bc4:	dc35      	bgt.n	8004c32 <_printf_float+0x3ae>
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bce:	f104 0a1a 	add.w	sl, r4, #26
 8004bd2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd6:	1a9b      	subs	r3, r3, r2
 8004bd8:	eba3 0309 	sub.w	r3, r3, r9
 8004bdc:	4543      	cmp	r3, r8
 8004bde:	f77f af79 	ble.w	8004ad4 <_printf_float+0x250>
 8004be2:	2301      	movs	r3, #1
 8004be4:	4652      	mov	r2, sl
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	f43f aeaa 	beq.w	8004946 <_printf_float+0xc2>
 8004bf2:	f108 0801 	add.w	r8, r8, #1
 8004bf6:	e7ec      	b.n	8004bd2 <_printf_float+0x34e>
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	4628      	mov	r0, r5
 8004c00:	47b8      	blx	r7
 8004c02:	3001      	adds	r0, #1
 8004c04:	d1c0      	bne.n	8004b88 <_printf_float+0x304>
 8004c06:	e69e      	b.n	8004946 <_printf_float+0xc2>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4628      	mov	r0, r5
 8004c0e:	9205      	str	r2, [sp, #20]
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f ae97 	beq.w	8004946 <_printf_float+0xc2>
 8004c18:	9a05      	ldr	r2, [sp, #20]
 8004c1a:	f10b 0b01 	add.w	fp, fp, #1
 8004c1e:	e7b9      	b.n	8004b94 <_printf_float+0x310>
 8004c20:	ee18 3a10 	vmov	r3, s16
 8004c24:	4652      	mov	r2, sl
 8004c26:	4631      	mov	r1, r6
 8004c28:	4628      	mov	r0, r5
 8004c2a:	47b8      	blx	r7
 8004c2c:	3001      	adds	r0, #1
 8004c2e:	d1be      	bne.n	8004bae <_printf_float+0x32a>
 8004c30:	e689      	b.n	8004946 <_printf_float+0xc2>
 8004c32:	9a05      	ldr	r2, [sp, #20]
 8004c34:	464b      	mov	r3, r9
 8004c36:	4442      	add	r2, r8
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d1c1      	bne.n	8004bc6 <_printf_float+0x342>
 8004c42:	e680      	b.n	8004946 <_printf_float+0xc2>
 8004c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c46:	2a01      	cmp	r2, #1
 8004c48:	dc01      	bgt.n	8004c4e <_printf_float+0x3ca>
 8004c4a:	07db      	lsls	r3, r3, #31
 8004c4c:	d538      	bpl.n	8004cc0 <_printf_float+0x43c>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4642      	mov	r2, r8
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f ae74 	beq.w	8004946 <_printf_float+0xc2>
 8004c5e:	ee18 3a10 	vmov	r3, s16
 8004c62:	4652      	mov	r2, sl
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f ae6b 	beq.w	8004946 <_printf_float+0xc2>
 8004c70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c74:	2200      	movs	r2, #0
 8004c76:	2300      	movs	r3, #0
 8004c78:	f7fb ff46 	bl	8000b08 <__aeabi_dcmpeq>
 8004c7c:	b9d8      	cbnz	r0, 8004cb6 <_printf_float+0x432>
 8004c7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c80:	f108 0201 	add.w	r2, r8, #1
 8004c84:	3b01      	subs	r3, #1
 8004c86:	4631      	mov	r1, r6
 8004c88:	4628      	mov	r0, r5
 8004c8a:	47b8      	blx	r7
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d10e      	bne.n	8004cae <_printf_float+0x42a>
 8004c90:	e659      	b.n	8004946 <_printf_float+0xc2>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	f43f ae52 	beq.w	8004946 <_printf_float+0xc2>
 8004ca2:	f108 0801 	add.w	r8, r8, #1
 8004ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	4543      	cmp	r3, r8
 8004cac:	dcf1      	bgt.n	8004c92 <_printf_float+0x40e>
 8004cae:	464b      	mov	r3, r9
 8004cb0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004cb4:	e6dc      	b.n	8004a70 <_printf_float+0x1ec>
 8004cb6:	f04f 0800 	mov.w	r8, #0
 8004cba:	f104 0a1a 	add.w	sl, r4, #26
 8004cbe:	e7f2      	b.n	8004ca6 <_printf_float+0x422>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	4642      	mov	r2, r8
 8004cc4:	e7df      	b.n	8004c86 <_printf_float+0x402>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	464a      	mov	r2, r9
 8004cca:	4631      	mov	r1, r6
 8004ccc:	4628      	mov	r0, r5
 8004cce:	47b8      	blx	r7
 8004cd0:	3001      	adds	r0, #1
 8004cd2:	f43f ae38 	beq.w	8004946 <_printf_float+0xc2>
 8004cd6:	f108 0801 	add.w	r8, r8, #1
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cde:	1a5b      	subs	r3, r3, r1
 8004ce0:	4543      	cmp	r3, r8
 8004ce2:	dcf0      	bgt.n	8004cc6 <_printf_float+0x442>
 8004ce4:	e6fa      	b.n	8004adc <_printf_float+0x258>
 8004ce6:	f04f 0800 	mov.w	r8, #0
 8004cea:	f104 0919 	add.w	r9, r4, #25
 8004cee:	e7f4      	b.n	8004cda <_printf_float+0x456>

08004cf0 <_printf_common>:
 8004cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf4:	4616      	mov	r6, r2
 8004cf6:	4699      	mov	r9, r3
 8004cf8:	688a      	ldr	r2, [r1, #8]
 8004cfa:	690b      	ldr	r3, [r1, #16]
 8004cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d00:	4293      	cmp	r3, r2
 8004d02:	bfb8      	it	lt
 8004d04:	4613      	movlt	r3, r2
 8004d06:	6033      	str	r3, [r6, #0]
 8004d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d0c:	4607      	mov	r7, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	b10a      	cbz	r2, 8004d16 <_printf_common+0x26>
 8004d12:	3301      	adds	r3, #1
 8004d14:	6033      	str	r3, [r6, #0]
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	0699      	lsls	r1, r3, #26
 8004d1a:	bf42      	ittt	mi
 8004d1c:	6833      	ldrmi	r3, [r6, #0]
 8004d1e:	3302      	addmi	r3, #2
 8004d20:	6033      	strmi	r3, [r6, #0]
 8004d22:	6825      	ldr	r5, [r4, #0]
 8004d24:	f015 0506 	ands.w	r5, r5, #6
 8004d28:	d106      	bne.n	8004d38 <_printf_common+0x48>
 8004d2a:	f104 0a19 	add.w	sl, r4, #25
 8004d2e:	68e3      	ldr	r3, [r4, #12]
 8004d30:	6832      	ldr	r2, [r6, #0]
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	42ab      	cmp	r3, r5
 8004d36:	dc26      	bgt.n	8004d86 <_printf_common+0x96>
 8004d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d3c:	1e13      	subs	r3, r2, #0
 8004d3e:	6822      	ldr	r2, [r4, #0]
 8004d40:	bf18      	it	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	0692      	lsls	r2, r2, #26
 8004d46:	d42b      	bmi.n	8004da0 <_printf_common+0xb0>
 8004d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d4c:	4649      	mov	r1, r9
 8004d4e:	4638      	mov	r0, r7
 8004d50:	47c0      	blx	r8
 8004d52:	3001      	adds	r0, #1
 8004d54:	d01e      	beq.n	8004d94 <_printf_common+0xa4>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	68e5      	ldr	r5, [r4, #12]
 8004d5a:	6832      	ldr	r2, [r6, #0]
 8004d5c:	f003 0306 	and.w	r3, r3, #6
 8004d60:	2b04      	cmp	r3, #4
 8004d62:	bf08      	it	eq
 8004d64:	1aad      	subeq	r5, r5, r2
 8004d66:	68a3      	ldr	r3, [r4, #8]
 8004d68:	6922      	ldr	r2, [r4, #16]
 8004d6a:	bf0c      	ite	eq
 8004d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d70:	2500      	movne	r5, #0
 8004d72:	4293      	cmp	r3, r2
 8004d74:	bfc4      	itt	gt
 8004d76:	1a9b      	subgt	r3, r3, r2
 8004d78:	18ed      	addgt	r5, r5, r3
 8004d7a:	2600      	movs	r6, #0
 8004d7c:	341a      	adds	r4, #26
 8004d7e:	42b5      	cmp	r5, r6
 8004d80:	d11a      	bne.n	8004db8 <_printf_common+0xc8>
 8004d82:	2000      	movs	r0, #0
 8004d84:	e008      	b.n	8004d98 <_printf_common+0xa8>
 8004d86:	2301      	movs	r3, #1
 8004d88:	4652      	mov	r2, sl
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	47c0      	blx	r8
 8004d90:	3001      	adds	r0, #1
 8004d92:	d103      	bne.n	8004d9c <_printf_common+0xac>
 8004d94:	f04f 30ff 	mov.w	r0, #4294967295
 8004d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d9c:	3501      	adds	r5, #1
 8004d9e:	e7c6      	b.n	8004d2e <_printf_common+0x3e>
 8004da0:	18e1      	adds	r1, r4, r3
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	2030      	movs	r0, #48	; 0x30
 8004da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004daa:	4422      	add	r2, r4
 8004dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004db4:	3302      	adds	r3, #2
 8004db6:	e7c7      	b.n	8004d48 <_printf_common+0x58>
 8004db8:	2301      	movs	r3, #1
 8004dba:	4622      	mov	r2, r4
 8004dbc:	4649      	mov	r1, r9
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	47c0      	blx	r8
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	d0e6      	beq.n	8004d94 <_printf_common+0xa4>
 8004dc6:	3601      	adds	r6, #1
 8004dc8:	e7d9      	b.n	8004d7e <_printf_common+0x8e>
	...

08004dcc <_printf_i>:
 8004dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dd0:	7e0f      	ldrb	r7, [r1, #24]
 8004dd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dd4:	2f78      	cmp	r7, #120	; 0x78
 8004dd6:	4691      	mov	r9, r2
 8004dd8:	4680      	mov	r8, r0
 8004dda:	460c      	mov	r4, r1
 8004ddc:	469a      	mov	sl, r3
 8004dde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004de2:	d807      	bhi.n	8004df4 <_printf_i+0x28>
 8004de4:	2f62      	cmp	r7, #98	; 0x62
 8004de6:	d80a      	bhi.n	8004dfe <_printf_i+0x32>
 8004de8:	2f00      	cmp	r7, #0
 8004dea:	f000 80d8 	beq.w	8004f9e <_printf_i+0x1d2>
 8004dee:	2f58      	cmp	r7, #88	; 0x58
 8004df0:	f000 80a3 	beq.w	8004f3a <_printf_i+0x16e>
 8004df4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dfc:	e03a      	b.n	8004e74 <_printf_i+0xa8>
 8004dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e02:	2b15      	cmp	r3, #21
 8004e04:	d8f6      	bhi.n	8004df4 <_printf_i+0x28>
 8004e06:	a101      	add	r1, pc, #4	; (adr r1, 8004e0c <_printf_i+0x40>)
 8004e08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e0c:	08004e65 	.word	0x08004e65
 8004e10:	08004e79 	.word	0x08004e79
 8004e14:	08004df5 	.word	0x08004df5
 8004e18:	08004df5 	.word	0x08004df5
 8004e1c:	08004df5 	.word	0x08004df5
 8004e20:	08004df5 	.word	0x08004df5
 8004e24:	08004e79 	.word	0x08004e79
 8004e28:	08004df5 	.word	0x08004df5
 8004e2c:	08004df5 	.word	0x08004df5
 8004e30:	08004df5 	.word	0x08004df5
 8004e34:	08004df5 	.word	0x08004df5
 8004e38:	08004f85 	.word	0x08004f85
 8004e3c:	08004ea9 	.word	0x08004ea9
 8004e40:	08004f67 	.word	0x08004f67
 8004e44:	08004df5 	.word	0x08004df5
 8004e48:	08004df5 	.word	0x08004df5
 8004e4c:	08004fa7 	.word	0x08004fa7
 8004e50:	08004df5 	.word	0x08004df5
 8004e54:	08004ea9 	.word	0x08004ea9
 8004e58:	08004df5 	.word	0x08004df5
 8004e5c:	08004df5 	.word	0x08004df5
 8004e60:	08004f6f 	.word	0x08004f6f
 8004e64:	682b      	ldr	r3, [r5, #0]
 8004e66:	1d1a      	adds	r2, r3, #4
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	602a      	str	r2, [r5, #0]
 8004e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e74:	2301      	movs	r3, #1
 8004e76:	e0a3      	b.n	8004fc0 <_printf_i+0x1f4>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	6829      	ldr	r1, [r5, #0]
 8004e7c:	0606      	lsls	r6, r0, #24
 8004e7e:	f101 0304 	add.w	r3, r1, #4
 8004e82:	d50a      	bpl.n	8004e9a <_printf_i+0xce>
 8004e84:	680e      	ldr	r6, [r1, #0]
 8004e86:	602b      	str	r3, [r5, #0]
 8004e88:	2e00      	cmp	r6, #0
 8004e8a:	da03      	bge.n	8004e94 <_printf_i+0xc8>
 8004e8c:	232d      	movs	r3, #45	; 0x2d
 8004e8e:	4276      	negs	r6, r6
 8004e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e94:	485e      	ldr	r0, [pc, #376]	; (8005010 <_printf_i+0x244>)
 8004e96:	230a      	movs	r3, #10
 8004e98:	e019      	b.n	8004ece <_printf_i+0x102>
 8004e9a:	680e      	ldr	r6, [r1, #0]
 8004e9c:	602b      	str	r3, [r5, #0]
 8004e9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ea2:	bf18      	it	ne
 8004ea4:	b236      	sxthne	r6, r6
 8004ea6:	e7ef      	b.n	8004e88 <_printf_i+0xbc>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	6820      	ldr	r0, [r4, #0]
 8004eac:	1d19      	adds	r1, r3, #4
 8004eae:	6029      	str	r1, [r5, #0]
 8004eb0:	0601      	lsls	r1, r0, #24
 8004eb2:	d501      	bpl.n	8004eb8 <_printf_i+0xec>
 8004eb4:	681e      	ldr	r6, [r3, #0]
 8004eb6:	e002      	b.n	8004ebe <_printf_i+0xf2>
 8004eb8:	0646      	lsls	r6, r0, #25
 8004eba:	d5fb      	bpl.n	8004eb4 <_printf_i+0xe8>
 8004ebc:	881e      	ldrh	r6, [r3, #0]
 8004ebe:	4854      	ldr	r0, [pc, #336]	; (8005010 <_printf_i+0x244>)
 8004ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2308      	moveq	r3, #8
 8004ec6:	230a      	movne	r3, #10
 8004ec8:	2100      	movs	r1, #0
 8004eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ece:	6865      	ldr	r5, [r4, #4]
 8004ed0:	60a5      	str	r5, [r4, #8]
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	bfa2      	ittt	ge
 8004ed6:	6821      	ldrge	r1, [r4, #0]
 8004ed8:	f021 0104 	bicge.w	r1, r1, #4
 8004edc:	6021      	strge	r1, [r4, #0]
 8004ede:	b90e      	cbnz	r6, 8004ee4 <_printf_i+0x118>
 8004ee0:	2d00      	cmp	r5, #0
 8004ee2:	d04d      	beq.n	8004f80 <_printf_i+0x1b4>
 8004ee4:	4615      	mov	r5, r2
 8004ee6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eea:	fb03 6711 	mls	r7, r3, r1, r6
 8004eee:	5dc7      	ldrb	r7, [r0, r7]
 8004ef0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ef4:	4637      	mov	r7, r6
 8004ef6:	42bb      	cmp	r3, r7
 8004ef8:	460e      	mov	r6, r1
 8004efa:	d9f4      	bls.n	8004ee6 <_printf_i+0x11a>
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d10b      	bne.n	8004f18 <_printf_i+0x14c>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	07de      	lsls	r6, r3, #31
 8004f04:	d508      	bpl.n	8004f18 <_printf_i+0x14c>
 8004f06:	6923      	ldr	r3, [r4, #16]
 8004f08:	6861      	ldr	r1, [r4, #4]
 8004f0a:	4299      	cmp	r1, r3
 8004f0c:	bfde      	ittt	le
 8004f0e:	2330      	movle	r3, #48	; 0x30
 8004f10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f14:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f18:	1b52      	subs	r2, r2, r5
 8004f1a:	6122      	str	r2, [r4, #16]
 8004f1c:	f8cd a000 	str.w	sl, [sp]
 8004f20:	464b      	mov	r3, r9
 8004f22:	aa03      	add	r2, sp, #12
 8004f24:	4621      	mov	r1, r4
 8004f26:	4640      	mov	r0, r8
 8004f28:	f7ff fee2 	bl	8004cf0 <_printf_common>
 8004f2c:	3001      	adds	r0, #1
 8004f2e:	d14c      	bne.n	8004fca <_printf_i+0x1fe>
 8004f30:	f04f 30ff 	mov.w	r0, #4294967295
 8004f34:	b004      	add	sp, #16
 8004f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f3a:	4835      	ldr	r0, [pc, #212]	; (8005010 <_printf_i+0x244>)
 8004f3c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f40:	6829      	ldr	r1, [r5, #0]
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f48:	6029      	str	r1, [r5, #0]
 8004f4a:	061d      	lsls	r5, r3, #24
 8004f4c:	d514      	bpl.n	8004f78 <_printf_i+0x1ac>
 8004f4e:	07df      	lsls	r7, r3, #31
 8004f50:	bf44      	itt	mi
 8004f52:	f043 0320 	orrmi.w	r3, r3, #32
 8004f56:	6023      	strmi	r3, [r4, #0]
 8004f58:	b91e      	cbnz	r6, 8004f62 <_printf_i+0x196>
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	f023 0320 	bic.w	r3, r3, #32
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	2310      	movs	r3, #16
 8004f64:	e7b0      	b.n	8004ec8 <_printf_i+0xfc>
 8004f66:	6823      	ldr	r3, [r4, #0]
 8004f68:	f043 0320 	orr.w	r3, r3, #32
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	2378      	movs	r3, #120	; 0x78
 8004f70:	4828      	ldr	r0, [pc, #160]	; (8005014 <_printf_i+0x248>)
 8004f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f76:	e7e3      	b.n	8004f40 <_printf_i+0x174>
 8004f78:	0659      	lsls	r1, r3, #25
 8004f7a:	bf48      	it	mi
 8004f7c:	b2b6      	uxthmi	r6, r6
 8004f7e:	e7e6      	b.n	8004f4e <_printf_i+0x182>
 8004f80:	4615      	mov	r5, r2
 8004f82:	e7bb      	b.n	8004efc <_printf_i+0x130>
 8004f84:	682b      	ldr	r3, [r5, #0]
 8004f86:	6826      	ldr	r6, [r4, #0]
 8004f88:	6961      	ldr	r1, [r4, #20]
 8004f8a:	1d18      	adds	r0, r3, #4
 8004f8c:	6028      	str	r0, [r5, #0]
 8004f8e:	0635      	lsls	r5, r6, #24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	d501      	bpl.n	8004f98 <_printf_i+0x1cc>
 8004f94:	6019      	str	r1, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <_printf_i+0x1d2>
 8004f98:	0670      	lsls	r0, r6, #25
 8004f9a:	d5fb      	bpl.n	8004f94 <_printf_i+0x1c8>
 8004f9c:	8019      	strh	r1, [r3, #0]
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	6123      	str	r3, [r4, #16]
 8004fa2:	4615      	mov	r5, r2
 8004fa4:	e7ba      	b.n	8004f1c <_printf_i+0x150>
 8004fa6:	682b      	ldr	r3, [r5, #0]
 8004fa8:	1d1a      	adds	r2, r3, #4
 8004faa:	602a      	str	r2, [r5, #0]
 8004fac:	681d      	ldr	r5, [r3, #0]
 8004fae:	6862      	ldr	r2, [r4, #4]
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	f7fb f934 	bl	8000220 <memchr>
 8004fb8:	b108      	cbz	r0, 8004fbe <_printf_i+0x1f2>
 8004fba:	1b40      	subs	r0, r0, r5
 8004fbc:	6060      	str	r0, [r4, #4]
 8004fbe:	6863      	ldr	r3, [r4, #4]
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc8:	e7a8      	b.n	8004f1c <_printf_i+0x150>
 8004fca:	6923      	ldr	r3, [r4, #16]
 8004fcc:	462a      	mov	r2, r5
 8004fce:	4649      	mov	r1, r9
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	47d0      	blx	sl
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	d0ab      	beq.n	8004f30 <_printf_i+0x164>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	079b      	lsls	r3, r3, #30
 8004fdc:	d413      	bmi.n	8005006 <_printf_i+0x23a>
 8004fde:	68e0      	ldr	r0, [r4, #12]
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	bfb8      	it	lt
 8004fe6:	4618      	movlt	r0, r3
 8004fe8:	e7a4      	b.n	8004f34 <_printf_i+0x168>
 8004fea:	2301      	movs	r3, #1
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d09b      	beq.n	8004f30 <_printf_i+0x164>
 8004ff8:	3501      	adds	r5, #1
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	9903      	ldr	r1, [sp, #12]
 8004ffe:	1a5b      	subs	r3, r3, r1
 8005000:	42ab      	cmp	r3, r5
 8005002:	dcf2      	bgt.n	8004fea <_printf_i+0x21e>
 8005004:	e7eb      	b.n	8004fde <_printf_i+0x212>
 8005006:	2500      	movs	r5, #0
 8005008:	f104 0619 	add.w	r6, r4, #25
 800500c:	e7f5      	b.n	8004ffa <_printf_i+0x22e>
 800500e:	bf00      	nop
 8005010:	080083a2 	.word	0x080083a2
 8005014:	080083b3 	.word	0x080083b3

08005018 <iprintf>:
 8005018:	b40f      	push	{r0, r1, r2, r3}
 800501a:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <iprintf+0x2c>)
 800501c:	b513      	push	{r0, r1, r4, lr}
 800501e:	681c      	ldr	r4, [r3, #0]
 8005020:	b124      	cbz	r4, 800502c <iprintf+0x14>
 8005022:	69a3      	ldr	r3, [r4, #24]
 8005024:	b913      	cbnz	r3, 800502c <iprintf+0x14>
 8005026:	4620      	mov	r0, r4
 8005028:	f001 f8da 	bl	80061e0 <__sinit>
 800502c:	ab05      	add	r3, sp, #20
 800502e:	9a04      	ldr	r2, [sp, #16]
 8005030:	68a1      	ldr	r1, [r4, #8]
 8005032:	9301      	str	r3, [sp, #4]
 8005034:	4620      	mov	r0, r4
 8005036:	f001 fe97 	bl	8006d68 <_vfiprintf_r>
 800503a:	b002      	add	sp, #8
 800503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005040:	b004      	add	sp, #16
 8005042:	4770      	bx	lr
 8005044:	20000014 	.word	0x20000014

08005048 <_puts_r>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	460e      	mov	r6, r1
 800504c:	4605      	mov	r5, r0
 800504e:	b118      	cbz	r0, 8005058 <_puts_r+0x10>
 8005050:	6983      	ldr	r3, [r0, #24]
 8005052:	b90b      	cbnz	r3, 8005058 <_puts_r+0x10>
 8005054:	f001 f8c4 	bl	80061e0 <__sinit>
 8005058:	69ab      	ldr	r3, [r5, #24]
 800505a:	68ac      	ldr	r4, [r5, #8]
 800505c:	b913      	cbnz	r3, 8005064 <_puts_r+0x1c>
 800505e:	4628      	mov	r0, r5
 8005060:	f001 f8be 	bl	80061e0 <__sinit>
 8005064:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <_puts_r+0xd0>)
 8005066:	429c      	cmp	r4, r3
 8005068:	d120      	bne.n	80050ac <_puts_r+0x64>
 800506a:	686c      	ldr	r4, [r5, #4]
 800506c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800506e:	07db      	lsls	r3, r3, #31
 8005070:	d405      	bmi.n	800507e <_puts_r+0x36>
 8005072:	89a3      	ldrh	r3, [r4, #12]
 8005074:	0598      	lsls	r0, r3, #22
 8005076:	d402      	bmi.n	800507e <_puts_r+0x36>
 8005078:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800507a:	f001 f954 	bl	8006326 <__retarget_lock_acquire_recursive>
 800507e:	89a3      	ldrh	r3, [r4, #12]
 8005080:	0719      	lsls	r1, r3, #28
 8005082:	d51d      	bpl.n	80050c0 <_puts_r+0x78>
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	b1db      	cbz	r3, 80050c0 <_puts_r+0x78>
 8005088:	3e01      	subs	r6, #1
 800508a:	68a3      	ldr	r3, [r4, #8]
 800508c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005090:	3b01      	subs	r3, #1
 8005092:	60a3      	str	r3, [r4, #8]
 8005094:	bb39      	cbnz	r1, 80050e6 <_puts_r+0x9e>
 8005096:	2b00      	cmp	r3, #0
 8005098:	da38      	bge.n	800510c <_puts_r+0xc4>
 800509a:	4622      	mov	r2, r4
 800509c:	210a      	movs	r1, #10
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 f848 	bl	8005134 <__swbuf_r>
 80050a4:	3001      	adds	r0, #1
 80050a6:	d011      	beq.n	80050cc <_puts_r+0x84>
 80050a8:	250a      	movs	r5, #10
 80050aa:	e011      	b.n	80050d0 <_puts_r+0x88>
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <_puts_r+0xd4>)
 80050ae:	429c      	cmp	r4, r3
 80050b0:	d101      	bne.n	80050b6 <_puts_r+0x6e>
 80050b2:	68ac      	ldr	r4, [r5, #8]
 80050b4:	e7da      	b.n	800506c <_puts_r+0x24>
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <_puts_r+0xd8>)
 80050b8:	429c      	cmp	r4, r3
 80050ba:	bf08      	it	eq
 80050bc:	68ec      	ldreq	r4, [r5, #12]
 80050be:	e7d5      	b.n	800506c <_puts_r+0x24>
 80050c0:	4621      	mov	r1, r4
 80050c2:	4628      	mov	r0, r5
 80050c4:	f000 f888 	bl	80051d8 <__swsetup_r>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d0dd      	beq.n	8005088 <_puts_r+0x40>
 80050cc:	f04f 35ff 	mov.w	r5, #4294967295
 80050d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80050d2:	07da      	lsls	r2, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <_puts_r+0x9a>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	059b      	lsls	r3, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_puts_r+0x9a>
 80050dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050de:	f001 f923 	bl	8006328 <__retarget_lock_release_recursive>
 80050e2:	4628      	mov	r0, r5
 80050e4:	bd70      	pop	{r4, r5, r6, pc}
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da04      	bge.n	80050f4 <_puts_r+0xac>
 80050ea:	69a2      	ldr	r2, [r4, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	dc06      	bgt.n	80050fe <_puts_r+0xb6>
 80050f0:	290a      	cmp	r1, #10
 80050f2:	d004      	beq.n	80050fe <_puts_r+0xb6>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	1c5a      	adds	r2, r3, #1
 80050f8:	6022      	str	r2, [r4, #0]
 80050fa:	7019      	strb	r1, [r3, #0]
 80050fc:	e7c5      	b.n	800508a <_puts_r+0x42>
 80050fe:	4622      	mov	r2, r4
 8005100:	4628      	mov	r0, r5
 8005102:	f000 f817 	bl	8005134 <__swbuf_r>
 8005106:	3001      	adds	r0, #1
 8005108:	d1bf      	bne.n	800508a <_puts_r+0x42>
 800510a:	e7df      	b.n	80050cc <_puts_r+0x84>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	250a      	movs	r5, #10
 8005110:	1c5a      	adds	r2, r3, #1
 8005112:	6022      	str	r2, [r4, #0]
 8005114:	701d      	strb	r5, [r3, #0]
 8005116:	e7db      	b.n	80050d0 <_puts_r+0x88>
 8005118:	08008474 	.word	0x08008474
 800511c:	08008494 	.word	0x08008494
 8005120:	08008454 	.word	0x08008454

08005124 <puts>:
 8005124:	4b02      	ldr	r3, [pc, #8]	; (8005130 <puts+0xc>)
 8005126:	4601      	mov	r1, r0
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	f7ff bf8d 	b.w	8005048 <_puts_r>
 800512e:	bf00      	nop
 8005130:	20000014 	.word	0x20000014

08005134 <__swbuf_r>:
 8005134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005136:	460e      	mov	r6, r1
 8005138:	4614      	mov	r4, r2
 800513a:	4605      	mov	r5, r0
 800513c:	b118      	cbz	r0, 8005146 <__swbuf_r+0x12>
 800513e:	6983      	ldr	r3, [r0, #24]
 8005140:	b90b      	cbnz	r3, 8005146 <__swbuf_r+0x12>
 8005142:	f001 f84d 	bl	80061e0 <__sinit>
 8005146:	4b21      	ldr	r3, [pc, #132]	; (80051cc <__swbuf_r+0x98>)
 8005148:	429c      	cmp	r4, r3
 800514a:	d12b      	bne.n	80051a4 <__swbuf_r+0x70>
 800514c:	686c      	ldr	r4, [r5, #4]
 800514e:	69a3      	ldr	r3, [r4, #24]
 8005150:	60a3      	str	r3, [r4, #8]
 8005152:	89a3      	ldrh	r3, [r4, #12]
 8005154:	071a      	lsls	r2, r3, #28
 8005156:	d52f      	bpl.n	80051b8 <__swbuf_r+0x84>
 8005158:	6923      	ldr	r3, [r4, #16]
 800515a:	b36b      	cbz	r3, 80051b8 <__swbuf_r+0x84>
 800515c:	6923      	ldr	r3, [r4, #16]
 800515e:	6820      	ldr	r0, [r4, #0]
 8005160:	1ac0      	subs	r0, r0, r3
 8005162:	6963      	ldr	r3, [r4, #20]
 8005164:	b2f6      	uxtb	r6, r6
 8005166:	4283      	cmp	r3, r0
 8005168:	4637      	mov	r7, r6
 800516a:	dc04      	bgt.n	8005176 <__swbuf_r+0x42>
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 ffa2 	bl	80060b8 <_fflush_r>
 8005174:	bb30      	cbnz	r0, 80051c4 <__swbuf_r+0x90>
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	3b01      	subs	r3, #1
 800517a:	60a3      	str	r3, [r4, #8]
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	6022      	str	r2, [r4, #0]
 8005182:	701e      	strb	r6, [r3, #0]
 8005184:	6963      	ldr	r3, [r4, #20]
 8005186:	3001      	adds	r0, #1
 8005188:	4283      	cmp	r3, r0
 800518a:	d004      	beq.n	8005196 <__swbuf_r+0x62>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	07db      	lsls	r3, r3, #31
 8005190:	d506      	bpl.n	80051a0 <__swbuf_r+0x6c>
 8005192:	2e0a      	cmp	r6, #10
 8005194:	d104      	bne.n	80051a0 <__swbuf_r+0x6c>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 ff8d 	bl	80060b8 <_fflush_r>
 800519e:	b988      	cbnz	r0, 80051c4 <__swbuf_r+0x90>
 80051a0:	4638      	mov	r0, r7
 80051a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051a4:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <__swbuf_r+0x9c>)
 80051a6:	429c      	cmp	r4, r3
 80051a8:	d101      	bne.n	80051ae <__swbuf_r+0x7a>
 80051aa:	68ac      	ldr	r4, [r5, #8]
 80051ac:	e7cf      	b.n	800514e <__swbuf_r+0x1a>
 80051ae:	4b09      	ldr	r3, [pc, #36]	; (80051d4 <__swbuf_r+0xa0>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	bf08      	it	eq
 80051b4:	68ec      	ldreq	r4, [r5, #12]
 80051b6:	e7ca      	b.n	800514e <__swbuf_r+0x1a>
 80051b8:	4621      	mov	r1, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	f000 f80c 	bl	80051d8 <__swsetup_r>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d0cb      	beq.n	800515c <__swbuf_r+0x28>
 80051c4:	f04f 37ff 	mov.w	r7, #4294967295
 80051c8:	e7ea      	b.n	80051a0 <__swbuf_r+0x6c>
 80051ca:	bf00      	nop
 80051cc:	08008474 	.word	0x08008474
 80051d0:	08008494 	.word	0x08008494
 80051d4:	08008454 	.word	0x08008454

080051d8 <__swsetup_r>:
 80051d8:	4b32      	ldr	r3, [pc, #200]	; (80052a4 <__swsetup_r+0xcc>)
 80051da:	b570      	push	{r4, r5, r6, lr}
 80051dc:	681d      	ldr	r5, [r3, #0]
 80051de:	4606      	mov	r6, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	b125      	cbz	r5, 80051ee <__swsetup_r+0x16>
 80051e4:	69ab      	ldr	r3, [r5, #24]
 80051e6:	b913      	cbnz	r3, 80051ee <__swsetup_r+0x16>
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fff9 	bl	80061e0 <__sinit>
 80051ee:	4b2e      	ldr	r3, [pc, #184]	; (80052a8 <__swsetup_r+0xd0>)
 80051f0:	429c      	cmp	r4, r3
 80051f2:	d10f      	bne.n	8005214 <__swsetup_r+0x3c>
 80051f4:	686c      	ldr	r4, [r5, #4]
 80051f6:	89a3      	ldrh	r3, [r4, #12]
 80051f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051fc:	0719      	lsls	r1, r3, #28
 80051fe:	d42c      	bmi.n	800525a <__swsetup_r+0x82>
 8005200:	06dd      	lsls	r5, r3, #27
 8005202:	d411      	bmi.n	8005228 <__swsetup_r+0x50>
 8005204:	2309      	movs	r3, #9
 8005206:	6033      	str	r3, [r6, #0]
 8005208:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800520c:	81a3      	strh	r3, [r4, #12]
 800520e:	f04f 30ff 	mov.w	r0, #4294967295
 8005212:	e03e      	b.n	8005292 <__swsetup_r+0xba>
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <__swsetup_r+0xd4>)
 8005216:	429c      	cmp	r4, r3
 8005218:	d101      	bne.n	800521e <__swsetup_r+0x46>
 800521a:	68ac      	ldr	r4, [r5, #8]
 800521c:	e7eb      	b.n	80051f6 <__swsetup_r+0x1e>
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <__swsetup_r+0xd8>)
 8005220:	429c      	cmp	r4, r3
 8005222:	bf08      	it	eq
 8005224:	68ec      	ldreq	r4, [r5, #12]
 8005226:	e7e6      	b.n	80051f6 <__swsetup_r+0x1e>
 8005228:	0758      	lsls	r0, r3, #29
 800522a:	d512      	bpl.n	8005252 <__swsetup_r+0x7a>
 800522c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800522e:	b141      	cbz	r1, 8005242 <__swsetup_r+0x6a>
 8005230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005234:	4299      	cmp	r1, r3
 8005236:	d002      	beq.n	800523e <__swsetup_r+0x66>
 8005238:	4630      	mov	r0, r6
 800523a:	f001 fc8b 	bl	8006b54 <_free_r>
 800523e:	2300      	movs	r3, #0
 8005240:	6363      	str	r3, [r4, #52]	; 0x34
 8005242:	89a3      	ldrh	r3, [r4, #12]
 8005244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005248:	81a3      	strh	r3, [r4, #12]
 800524a:	2300      	movs	r3, #0
 800524c:	6063      	str	r3, [r4, #4]
 800524e:	6923      	ldr	r3, [r4, #16]
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f043 0308 	orr.w	r3, r3, #8
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	6923      	ldr	r3, [r4, #16]
 800525c:	b94b      	cbnz	r3, 8005272 <__swsetup_r+0x9a>
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005268:	d003      	beq.n	8005272 <__swsetup_r+0x9a>
 800526a:	4621      	mov	r1, r4
 800526c:	4630      	mov	r0, r6
 800526e:	f001 f881 	bl	8006374 <__smakebuf_r>
 8005272:	89a0      	ldrh	r0, [r4, #12]
 8005274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005278:	f010 0301 	ands.w	r3, r0, #1
 800527c:	d00a      	beq.n	8005294 <__swsetup_r+0xbc>
 800527e:	2300      	movs	r3, #0
 8005280:	60a3      	str	r3, [r4, #8]
 8005282:	6963      	ldr	r3, [r4, #20]
 8005284:	425b      	negs	r3, r3
 8005286:	61a3      	str	r3, [r4, #24]
 8005288:	6923      	ldr	r3, [r4, #16]
 800528a:	b943      	cbnz	r3, 800529e <__swsetup_r+0xc6>
 800528c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005290:	d1ba      	bne.n	8005208 <__swsetup_r+0x30>
 8005292:	bd70      	pop	{r4, r5, r6, pc}
 8005294:	0781      	lsls	r1, r0, #30
 8005296:	bf58      	it	pl
 8005298:	6963      	ldrpl	r3, [r4, #20]
 800529a:	60a3      	str	r3, [r4, #8]
 800529c:	e7f4      	b.n	8005288 <__swsetup_r+0xb0>
 800529e:	2000      	movs	r0, #0
 80052a0:	e7f7      	b.n	8005292 <__swsetup_r+0xba>
 80052a2:	bf00      	nop
 80052a4:	20000014 	.word	0x20000014
 80052a8:	08008474 	.word	0x08008474
 80052ac:	08008494 	.word	0x08008494
 80052b0:	08008454 	.word	0x08008454

080052b4 <quorem>:
 80052b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b8:	6903      	ldr	r3, [r0, #16]
 80052ba:	690c      	ldr	r4, [r1, #16]
 80052bc:	42a3      	cmp	r3, r4
 80052be:	4607      	mov	r7, r0
 80052c0:	f2c0 8081 	blt.w	80053c6 <quorem+0x112>
 80052c4:	3c01      	subs	r4, #1
 80052c6:	f101 0814 	add.w	r8, r1, #20
 80052ca:	f100 0514 	add.w	r5, r0, #20
 80052ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052dc:	3301      	adds	r3, #1
 80052de:	429a      	cmp	r2, r3
 80052e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ec:	d331      	bcc.n	8005352 <quorem+0x9e>
 80052ee:	f04f 0e00 	mov.w	lr, #0
 80052f2:	4640      	mov	r0, r8
 80052f4:	46ac      	mov	ip, r5
 80052f6:	46f2      	mov	sl, lr
 80052f8:	f850 2b04 	ldr.w	r2, [r0], #4
 80052fc:	b293      	uxth	r3, r2
 80052fe:	fb06 e303 	mla	r3, r6, r3, lr
 8005302:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005306:	b29b      	uxth	r3, r3
 8005308:	ebaa 0303 	sub.w	r3, sl, r3
 800530c:	f8dc a000 	ldr.w	sl, [ip]
 8005310:	0c12      	lsrs	r2, r2, #16
 8005312:	fa13 f38a 	uxtah	r3, r3, sl
 8005316:	fb06 e202 	mla	r2, r6, r2, lr
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	9b00      	ldr	r3, [sp, #0]
 800531e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005322:	b292      	uxth	r2, r2
 8005324:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005328:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800532c:	f8bd 3000 	ldrh.w	r3, [sp]
 8005330:	4581      	cmp	r9, r0
 8005332:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005336:	f84c 3b04 	str.w	r3, [ip], #4
 800533a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800533e:	d2db      	bcs.n	80052f8 <quorem+0x44>
 8005340:	f855 300b 	ldr.w	r3, [r5, fp]
 8005344:	b92b      	cbnz	r3, 8005352 <quorem+0x9e>
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	3b04      	subs	r3, #4
 800534a:	429d      	cmp	r5, r3
 800534c:	461a      	mov	r2, r3
 800534e:	d32e      	bcc.n	80053ae <quorem+0xfa>
 8005350:	613c      	str	r4, [r7, #16]
 8005352:	4638      	mov	r0, r7
 8005354:	f001 fae6 	bl	8006924 <__mcmp>
 8005358:	2800      	cmp	r0, #0
 800535a:	db24      	blt.n	80053a6 <quorem+0xf2>
 800535c:	3601      	adds	r6, #1
 800535e:	4628      	mov	r0, r5
 8005360:	f04f 0c00 	mov.w	ip, #0
 8005364:	f858 2b04 	ldr.w	r2, [r8], #4
 8005368:	f8d0 e000 	ldr.w	lr, [r0]
 800536c:	b293      	uxth	r3, r2
 800536e:	ebac 0303 	sub.w	r3, ip, r3
 8005372:	0c12      	lsrs	r2, r2, #16
 8005374:	fa13 f38e 	uxtah	r3, r3, lr
 8005378:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800537c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005380:	b29b      	uxth	r3, r3
 8005382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005386:	45c1      	cmp	r9, r8
 8005388:	f840 3b04 	str.w	r3, [r0], #4
 800538c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005390:	d2e8      	bcs.n	8005364 <quorem+0xb0>
 8005392:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005396:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800539a:	b922      	cbnz	r2, 80053a6 <quorem+0xf2>
 800539c:	3b04      	subs	r3, #4
 800539e:	429d      	cmp	r5, r3
 80053a0:	461a      	mov	r2, r3
 80053a2:	d30a      	bcc.n	80053ba <quorem+0x106>
 80053a4:	613c      	str	r4, [r7, #16]
 80053a6:	4630      	mov	r0, r6
 80053a8:	b003      	add	sp, #12
 80053aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ae:	6812      	ldr	r2, [r2, #0]
 80053b0:	3b04      	subs	r3, #4
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d1cc      	bne.n	8005350 <quorem+0x9c>
 80053b6:	3c01      	subs	r4, #1
 80053b8:	e7c7      	b.n	800534a <quorem+0x96>
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	3b04      	subs	r3, #4
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d1f0      	bne.n	80053a4 <quorem+0xf0>
 80053c2:	3c01      	subs	r4, #1
 80053c4:	e7eb      	b.n	800539e <quorem+0xea>
 80053c6:	2000      	movs	r0, #0
 80053c8:	e7ee      	b.n	80053a8 <quorem+0xf4>
 80053ca:	0000      	movs	r0, r0
 80053cc:	0000      	movs	r0, r0
	...

080053d0 <_dtoa_r>:
 80053d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d4:	ed2d 8b04 	vpush	{d8-d9}
 80053d8:	ec57 6b10 	vmov	r6, r7, d0
 80053dc:	b093      	sub	sp, #76	; 0x4c
 80053de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053e4:	9106      	str	r1, [sp, #24]
 80053e6:	ee10 aa10 	vmov	sl, s0
 80053ea:	4604      	mov	r4, r0
 80053ec:	9209      	str	r2, [sp, #36]	; 0x24
 80053ee:	930c      	str	r3, [sp, #48]	; 0x30
 80053f0:	46bb      	mov	fp, r7
 80053f2:	b975      	cbnz	r5, 8005412 <_dtoa_r+0x42>
 80053f4:	2010      	movs	r0, #16
 80053f6:	f000 fffd 	bl	80063f4 <malloc>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6260      	str	r0, [r4, #36]	; 0x24
 80053fe:	b920      	cbnz	r0, 800540a <_dtoa_r+0x3a>
 8005400:	4ba7      	ldr	r3, [pc, #668]	; (80056a0 <_dtoa_r+0x2d0>)
 8005402:	21ea      	movs	r1, #234	; 0xea
 8005404:	48a7      	ldr	r0, [pc, #668]	; (80056a4 <_dtoa_r+0x2d4>)
 8005406:	f001 fe45 	bl	8007094 <__assert_func>
 800540a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800540e:	6005      	str	r5, [r0, #0]
 8005410:	60c5      	str	r5, [r0, #12]
 8005412:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005414:	6819      	ldr	r1, [r3, #0]
 8005416:	b151      	cbz	r1, 800542e <_dtoa_r+0x5e>
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	604a      	str	r2, [r1, #4]
 800541c:	2301      	movs	r3, #1
 800541e:	4093      	lsls	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
 8005422:	4620      	mov	r0, r4
 8005424:	f001 f83c 	bl	80064a0 <_Bfree>
 8005428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800542a:	2200      	movs	r2, #0
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	1e3b      	subs	r3, r7, #0
 8005430:	bfaa      	itet	ge
 8005432:	2300      	movge	r3, #0
 8005434:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005438:	f8c8 3000 	strge.w	r3, [r8]
 800543c:	4b9a      	ldr	r3, [pc, #616]	; (80056a8 <_dtoa_r+0x2d8>)
 800543e:	bfbc      	itt	lt
 8005440:	2201      	movlt	r2, #1
 8005442:	f8c8 2000 	strlt.w	r2, [r8]
 8005446:	ea33 030b 	bics.w	r3, r3, fp
 800544a:	d11b      	bne.n	8005484 <_dtoa_r+0xb4>
 800544c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800544e:	f242 730f 	movw	r3, #9999	; 0x270f
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005458:	4333      	orrs	r3, r6
 800545a:	f000 8592 	beq.w	8005f82 <_dtoa_r+0xbb2>
 800545e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005460:	b963      	cbnz	r3, 800547c <_dtoa_r+0xac>
 8005462:	4b92      	ldr	r3, [pc, #584]	; (80056ac <_dtoa_r+0x2dc>)
 8005464:	e022      	b.n	80054ac <_dtoa_r+0xdc>
 8005466:	4b92      	ldr	r3, [pc, #584]	; (80056b0 <_dtoa_r+0x2e0>)
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	3308      	adds	r3, #8
 800546c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	9801      	ldr	r0, [sp, #4]
 8005472:	b013      	add	sp, #76	; 0x4c
 8005474:	ecbd 8b04 	vpop	{d8-d9}
 8005478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800547c:	4b8b      	ldr	r3, [pc, #556]	; (80056ac <_dtoa_r+0x2dc>)
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	3303      	adds	r3, #3
 8005482:	e7f3      	b.n	800546c <_dtoa_r+0x9c>
 8005484:	2200      	movs	r2, #0
 8005486:	2300      	movs	r3, #0
 8005488:	4650      	mov	r0, sl
 800548a:	4659      	mov	r1, fp
 800548c:	f7fb fb3c 	bl	8000b08 <__aeabi_dcmpeq>
 8005490:	ec4b ab19 	vmov	d9, sl, fp
 8005494:	4680      	mov	r8, r0
 8005496:	b158      	cbz	r0, 80054b0 <_dtoa_r+0xe0>
 8005498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800549a:	2301      	movs	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 856b 	beq.w	8005f7c <_dtoa_r+0xbac>
 80054a6:	4883      	ldr	r0, [pc, #524]	; (80056b4 <_dtoa_r+0x2e4>)
 80054a8:	6018      	str	r0, [r3, #0]
 80054aa:	1e43      	subs	r3, r0, #1
 80054ac:	9301      	str	r3, [sp, #4]
 80054ae:	e7df      	b.n	8005470 <_dtoa_r+0xa0>
 80054b0:	ec4b ab10 	vmov	d0, sl, fp
 80054b4:	aa10      	add	r2, sp, #64	; 0x40
 80054b6:	a911      	add	r1, sp, #68	; 0x44
 80054b8:	4620      	mov	r0, r4
 80054ba:	f001 fad9 	bl	8006a70 <__d2b>
 80054be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80054c2:	ee08 0a10 	vmov	s16, r0
 80054c6:	2d00      	cmp	r5, #0
 80054c8:	f000 8084 	beq.w	80055d4 <_dtoa_r+0x204>
 80054cc:	ee19 3a90 	vmov	r3, s19
 80054d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054d8:	4656      	mov	r6, sl
 80054da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80054e6:	4b74      	ldr	r3, [pc, #464]	; (80056b8 <_dtoa_r+0x2e8>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	f7fa feeb 	bl	80002c8 <__aeabi_dsub>
 80054f2:	a365      	add	r3, pc, #404	; (adr r3, 8005688 <_dtoa_r+0x2b8>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f89e 	bl	8000638 <__aeabi_dmul>
 80054fc:	a364      	add	r3, pc, #400	; (adr r3, 8005690 <_dtoa_r+0x2c0>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fee3 	bl	80002cc <__adddf3>
 8005506:	4606      	mov	r6, r0
 8005508:	4628      	mov	r0, r5
 800550a:	460f      	mov	r7, r1
 800550c:	f7fb f82a 	bl	8000564 <__aeabi_i2d>
 8005510:	a361      	add	r3, pc, #388	; (adr r3, 8005698 <_dtoa_r+0x2c8>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fb f88f 	bl	8000638 <__aeabi_dmul>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4630      	mov	r0, r6
 8005520:	4639      	mov	r1, r7
 8005522:	f7fa fed3 	bl	80002cc <__adddf3>
 8005526:	4606      	mov	r6, r0
 8005528:	460f      	mov	r7, r1
 800552a:	f7fb fb35 	bl	8000b98 <__aeabi_d2iz>
 800552e:	2200      	movs	r2, #0
 8005530:	9000      	str	r0, [sp, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fb faf0 	bl	8000b1c <__aeabi_dcmplt>
 800553c:	b150      	cbz	r0, 8005554 <_dtoa_r+0x184>
 800553e:	9800      	ldr	r0, [sp, #0]
 8005540:	f7fb f810 	bl	8000564 <__aeabi_i2d>
 8005544:	4632      	mov	r2, r6
 8005546:	463b      	mov	r3, r7
 8005548:	f7fb fade 	bl	8000b08 <__aeabi_dcmpeq>
 800554c:	b910      	cbnz	r0, 8005554 <_dtoa_r+0x184>
 800554e:	9b00      	ldr	r3, [sp, #0]
 8005550:	3b01      	subs	r3, #1
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	9b00      	ldr	r3, [sp, #0]
 8005556:	2b16      	cmp	r3, #22
 8005558:	d85a      	bhi.n	8005610 <_dtoa_r+0x240>
 800555a:	9a00      	ldr	r2, [sp, #0]
 800555c:	4b57      	ldr	r3, [pc, #348]	; (80056bc <_dtoa_r+0x2ec>)
 800555e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005566:	ec51 0b19 	vmov	r0, r1, d9
 800556a:	f7fb fad7 	bl	8000b1c <__aeabi_dcmplt>
 800556e:	2800      	cmp	r0, #0
 8005570:	d050      	beq.n	8005614 <_dtoa_r+0x244>
 8005572:	9b00      	ldr	r3, [sp, #0]
 8005574:	3b01      	subs	r3, #1
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	2300      	movs	r3, #0
 800557a:	930b      	str	r3, [sp, #44]	; 0x2c
 800557c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800557e:	1b5d      	subs	r5, r3, r5
 8005580:	1e6b      	subs	r3, r5, #1
 8005582:	9305      	str	r3, [sp, #20]
 8005584:	bf45      	ittet	mi
 8005586:	f1c5 0301 	rsbmi	r3, r5, #1
 800558a:	9304      	strmi	r3, [sp, #16]
 800558c:	2300      	movpl	r3, #0
 800558e:	2300      	movmi	r3, #0
 8005590:	bf4c      	ite	mi
 8005592:	9305      	strmi	r3, [sp, #20]
 8005594:	9304      	strpl	r3, [sp, #16]
 8005596:	9b00      	ldr	r3, [sp, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	db3d      	blt.n	8005618 <_dtoa_r+0x248>
 800559c:	9b05      	ldr	r3, [sp, #20]
 800559e:	9a00      	ldr	r2, [sp, #0]
 80055a0:	920a      	str	r2, [sp, #40]	; 0x28
 80055a2:	4413      	add	r3, r2
 80055a4:	9305      	str	r3, [sp, #20]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9307      	str	r3, [sp, #28]
 80055aa:	9b06      	ldr	r3, [sp, #24]
 80055ac:	2b09      	cmp	r3, #9
 80055ae:	f200 8089 	bhi.w	80056c4 <_dtoa_r+0x2f4>
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	bfc4      	itt	gt
 80055b6:	3b04      	subgt	r3, #4
 80055b8:	9306      	strgt	r3, [sp, #24]
 80055ba:	9b06      	ldr	r3, [sp, #24]
 80055bc:	f1a3 0302 	sub.w	r3, r3, #2
 80055c0:	bfcc      	ite	gt
 80055c2:	2500      	movgt	r5, #0
 80055c4:	2501      	movle	r5, #1
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	f200 8087 	bhi.w	80056da <_dtoa_r+0x30a>
 80055cc:	e8df f003 	tbb	[pc, r3]
 80055d0:	59383a2d 	.word	0x59383a2d
 80055d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055d8:	441d      	add	r5, r3
 80055da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055de:	2b20      	cmp	r3, #32
 80055e0:	bfc1      	itttt	gt
 80055e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055ea:	fa0b f303 	lslgt.w	r3, fp, r3
 80055ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055f2:	bfda      	itte	le
 80055f4:	f1c3 0320 	rsble	r3, r3, #32
 80055f8:	fa06 f003 	lslle.w	r0, r6, r3
 80055fc:	4318      	orrgt	r0, r3
 80055fe:	f7fa ffa1 	bl	8000544 <__aeabi_ui2d>
 8005602:	2301      	movs	r3, #1
 8005604:	4606      	mov	r6, r0
 8005606:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800560a:	3d01      	subs	r5, #1
 800560c:	930e      	str	r3, [sp, #56]	; 0x38
 800560e:	e76a      	b.n	80054e6 <_dtoa_r+0x116>
 8005610:	2301      	movs	r3, #1
 8005612:	e7b2      	b.n	800557a <_dtoa_r+0x1aa>
 8005614:	900b      	str	r0, [sp, #44]	; 0x2c
 8005616:	e7b1      	b.n	800557c <_dtoa_r+0x1ac>
 8005618:	9b04      	ldr	r3, [sp, #16]
 800561a:	9a00      	ldr	r2, [sp, #0]
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	9304      	str	r3, [sp, #16]
 8005620:	4253      	negs	r3, r2
 8005622:	9307      	str	r3, [sp, #28]
 8005624:	2300      	movs	r3, #0
 8005626:	930a      	str	r3, [sp, #40]	; 0x28
 8005628:	e7bf      	b.n	80055aa <_dtoa_r+0x1da>
 800562a:	2300      	movs	r3, #0
 800562c:	9308      	str	r3, [sp, #32]
 800562e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005630:	2b00      	cmp	r3, #0
 8005632:	dc55      	bgt.n	80056e0 <_dtoa_r+0x310>
 8005634:	2301      	movs	r3, #1
 8005636:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800563a:	461a      	mov	r2, r3
 800563c:	9209      	str	r2, [sp, #36]	; 0x24
 800563e:	e00c      	b.n	800565a <_dtoa_r+0x28a>
 8005640:	2301      	movs	r3, #1
 8005642:	e7f3      	b.n	800562c <_dtoa_r+0x25c>
 8005644:	2300      	movs	r3, #0
 8005646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005648:	9308      	str	r3, [sp, #32]
 800564a:	9b00      	ldr	r3, [sp, #0]
 800564c:	4413      	add	r3, r2
 800564e:	9302      	str	r3, [sp, #8]
 8005650:	3301      	adds	r3, #1
 8005652:	2b01      	cmp	r3, #1
 8005654:	9303      	str	r3, [sp, #12]
 8005656:	bfb8      	it	lt
 8005658:	2301      	movlt	r3, #1
 800565a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800565c:	2200      	movs	r2, #0
 800565e:	6042      	str	r2, [r0, #4]
 8005660:	2204      	movs	r2, #4
 8005662:	f102 0614 	add.w	r6, r2, #20
 8005666:	429e      	cmp	r6, r3
 8005668:	6841      	ldr	r1, [r0, #4]
 800566a:	d93d      	bls.n	80056e8 <_dtoa_r+0x318>
 800566c:	4620      	mov	r0, r4
 800566e:	f000 fed7 	bl	8006420 <_Balloc>
 8005672:	9001      	str	r0, [sp, #4]
 8005674:	2800      	cmp	r0, #0
 8005676:	d13b      	bne.n	80056f0 <_dtoa_r+0x320>
 8005678:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <_dtoa_r+0x2f0>)
 800567a:	4602      	mov	r2, r0
 800567c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005680:	e6c0      	b.n	8005404 <_dtoa_r+0x34>
 8005682:	2301      	movs	r3, #1
 8005684:	e7df      	b.n	8005646 <_dtoa_r+0x276>
 8005686:	bf00      	nop
 8005688:	636f4361 	.word	0x636f4361
 800568c:	3fd287a7 	.word	0x3fd287a7
 8005690:	8b60c8b3 	.word	0x8b60c8b3
 8005694:	3fc68a28 	.word	0x3fc68a28
 8005698:	509f79fb 	.word	0x509f79fb
 800569c:	3fd34413 	.word	0x3fd34413
 80056a0:	080083d1 	.word	0x080083d1
 80056a4:	080083e8 	.word	0x080083e8
 80056a8:	7ff00000 	.word	0x7ff00000
 80056ac:	080083cd 	.word	0x080083cd
 80056b0:	080083c4 	.word	0x080083c4
 80056b4:	080083a1 	.word	0x080083a1
 80056b8:	3ff80000 	.word	0x3ff80000
 80056bc:	08008538 	.word	0x08008538
 80056c0:	08008443 	.word	0x08008443
 80056c4:	2501      	movs	r5, #1
 80056c6:	2300      	movs	r3, #0
 80056c8:	9306      	str	r3, [sp, #24]
 80056ca:	9508      	str	r5, [sp, #32]
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295
 80056d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2312      	movs	r3, #18
 80056d8:	e7b0      	b.n	800563c <_dtoa_r+0x26c>
 80056da:	2301      	movs	r3, #1
 80056dc:	9308      	str	r3, [sp, #32]
 80056de:	e7f5      	b.n	80056cc <_dtoa_r+0x2fc>
 80056e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056e6:	e7b8      	b.n	800565a <_dtoa_r+0x28a>
 80056e8:	3101      	adds	r1, #1
 80056ea:	6041      	str	r1, [r0, #4]
 80056ec:	0052      	lsls	r2, r2, #1
 80056ee:	e7b8      	b.n	8005662 <_dtoa_r+0x292>
 80056f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056f2:	9a01      	ldr	r2, [sp, #4]
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	2b0e      	cmp	r3, #14
 80056fa:	f200 809d 	bhi.w	8005838 <_dtoa_r+0x468>
 80056fe:	2d00      	cmp	r5, #0
 8005700:	f000 809a 	beq.w	8005838 <_dtoa_r+0x468>
 8005704:	9b00      	ldr	r3, [sp, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	dd32      	ble.n	8005770 <_dtoa_r+0x3a0>
 800570a:	4ab7      	ldr	r2, [pc, #732]	; (80059e8 <_dtoa_r+0x618>)
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005718:	9b00      	ldr	r3, [sp, #0]
 800571a:	05d8      	lsls	r0, r3, #23
 800571c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005720:	d516      	bpl.n	8005750 <_dtoa_r+0x380>
 8005722:	4bb2      	ldr	r3, [pc, #712]	; (80059ec <_dtoa_r+0x61c>)
 8005724:	ec51 0b19 	vmov	r0, r1, d9
 8005728:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800572c:	f7fb f8ae 	bl	800088c <__aeabi_ddiv>
 8005730:	f007 070f 	and.w	r7, r7, #15
 8005734:	4682      	mov	sl, r0
 8005736:	468b      	mov	fp, r1
 8005738:	2503      	movs	r5, #3
 800573a:	4eac      	ldr	r6, [pc, #688]	; (80059ec <_dtoa_r+0x61c>)
 800573c:	b957      	cbnz	r7, 8005754 <_dtoa_r+0x384>
 800573e:	4642      	mov	r2, r8
 8005740:	464b      	mov	r3, r9
 8005742:	4650      	mov	r0, sl
 8005744:	4659      	mov	r1, fp
 8005746:	f7fb f8a1 	bl	800088c <__aeabi_ddiv>
 800574a:	4682      	mov	sl, r0
 800574c:	468b      	mov	fp, r1
 800574e:	e028      	b.n	80057a2 <_dtoa_r+0x3d2>
 8005750:	2502      	movs	r5, #2
 8005752:	e7f2      	b.n	800573a <_dtoa_r+0x36a>
 8005754:	07f9      	lsls	r1, r7, #31
 8005756:	d508      	bpl.n	800576a <_dtoa_r+0x39a>
 8005758:	4640      	mov	r0, r8
 800575a:	4649      	mov	r1, r9
 800575c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005760:	f7fa ff6a 	bl	8000638 <__aeabi_dmul>
 8005764:	3501      	adds	r5, #1
 8005766:	4680      	mov	r8, r0
 8005768:	4689      	mov	r9, r1
 800576a:	107f      	asrs	r7, r7, #1
 800576c:	3608      	adds	r6, #8
 800576e:	e7e5      	b.n	800573c <_dtoa_r+0x36c>
 8005770:	f000 809b 	beq.w	80058aa <_dtoa_r+0x4da>
 8005774:	9b00      	ldr	r3, [sp, #0]
 8005776:	4f9d      	ldr	r7, [pc, #628]	; (80059ec <_dtoa_r+0x61c>)
 8005778:	425e      	negs	r6, r3
 800577a:	4b9b      	ldr	r3, [pc, #620]	; (80059e8 <_dtoa_r+0x618>)
 800577c:	f006 020f 	and.w	r2, r6, #15
 8005780:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	ec51 0b19 	vmov	r0, r1, d9
 800578c:	f7fa ff54 	bl	8000638 <__aeabi_dmul>
 8005790:	1136      	asrs	r6, r6, #4
 8005792:	4682      	mov	sl, r0
 8005794:	468b      	mov	fp, r1
 8005796:	2300      	movs	r3, #0
 8005798:	2502      	movs	r5, #2
 800579a:	2e00      	cmp	r6, #0
 800579c:	d17a      	bne.n	8005894 <_dtoa_r+0x4c4>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1d3      	bne.n	800574a <_dtoa_r+0x37a>
 80057a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 8082 	beq.w	80058ae <_dtoa_r+0x4de>
 80057aa:	4b91      	ldr	r3, [pc, #580]	; (80059f0 <_dtoa_r+0x620>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	4650      	mov	r0, sl
 80057b0:	4659      	mov	r1, fp
 80057b2:	f7fb f9b3 	bl	8000b1c <__aeabi_dcmplt>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d079      	beq.n	80058ae <_dtoa_r+0x4de>
 80057ba:	9b03      	ldr	r3, [sp, #12]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d076      	beq.n	80058ae <_dtoa_r+0x4de>
 80057c0:	9b02      	ldr	r3, [sp, #8]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	dd36      	ble.n	8005834 <_dtoa_r+0x464>
 80057c6:	9b00      	ldr	r3, [sp, #0]
 80057c8:	4650      	mov	r0, sl
 80057ca:	4659      	mov	r1, fp
 80057cc:	1e5f      	subs	r7, r3, #1
 80057ce:	2200      	movs	r2, #0
 80057d0:	4b88      	ldr	r3, [pc, #544]	; (80059f4 <_dtoa_r+0x624>)
 80057d2:	f7fa ff31 	bl	8000638 <__aeabi_dmul>
 80057d6:	9e02      	ldr	r6, [sp, #8]
 80057d8:	4682      	mov	sl, r0
 80057da:	468b      	mov	fp, r1
 80057dc:	3501      	adds	r5, #1
 80057de:	4628      	mov	r0, r5
 80057e0:	f7fa fec0 	bl	8000564 <__aeabi_i2d>
 80057e4:	4652      	mov	r2, sl
 80057e6:	465b      	mov	r3, fp
 80057e8:	f7fa ff26 	bl	8000638 <__aeabi_dmul>
 80057ec:	4b82      	ldr	r3, [pc, #520]	; (80059f8 <_dtoa_r+0x628>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	f7fa fd6c 	bl	80002cc <__adddf3>
 80057f4:	46d0      	mov	r8, sl
 80057f6:	46d9      	mov	r9, fp
 80057f8:	4682      	mov	sl, r0
 80057fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80057fe:	2e00      	cmp	r6, #0
 8005800:	d158      	bne.n	80058b4 <_dtoa_r+0x4e4>
 8005802:	4b7e      	ldr	r3, [pc, #504]	; (80059fc <_dtoa_r+0x62c>)
 8005804:	2200      	movs	r2, #0
 8005806:	4640      	mov	r0, r8
 8005808:	4649      	mov	r1, r9
 800580a:	f7fa fd5d 	bl	80002c8 <__aeabi_dsub>
 800580e:	4652      	mov	r2, sl
 8005810:	465b      	mov	r3, fp
 8005812:	4680      	mov	r8, r0
 8005814:	4689      	mov	r9, r1
 8005816:	f7fb f99f 	bl	8000b58 <__aeabi_dcmpgt>
 800581a:	2800      	cmp	r0, #0
 800581c:	f040 8295 	bne.w	8005d4a <_dtoa_r+0x97a>
 8005820:	4652      	mov	r2, sl
 8005822:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005826:	4640      	mov	r0, r8
 8005828:	4649      	mov	r1, r9
 800582a:	f7fb f977 	bl	8000b1c <__aeabi_dcmplt>
 800582e:	2800      	cmp	r0, #0
 8005830:	f040 8289 	bne.w	8005d46 <_dtoa_r+0x976>
 8005834:	ec5b ab19 	vmov	sl, fp, d9
 8005838:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800583a:	2b00      	cmp	r3, #0
 800583c:	f2c0 8148 	blt.w	8005ad0 <_dtoa_r+0x700>
 8005840:	9a00      	ldr	r2, [sp, #0]
 8005842:	2a0e      	cmp	r2, #14
 8005844:	f300 8144 	bgt.w	8005ad0 <_dtoa_r+0x700>
 8005848:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <_dtoa_r+0x618>)
 800584a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800584e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005852:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	f280 80d5 	bge.w	8005a04 <_dtoa_r+0x634>
 800585a:	9b03      	ldr	r3, [sp, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f300 80d1 	bgt.w	8005a04 <_dtoa_r+0x634>
 8005862:	f040 826f 	bne.w	8005d44 <_dtoa_r+0x974>
 8005866:	4b65      	ldr	r3, [pc, #404]	; (80059fc <_dtoa_r+0x62c>)
 8005868:	2200      	movs	r2, #0
 800586a:	4640      	mov	r0, r8
 800586c:	4649      	mov	r1, r9
 800586e:	f7fa fee3 	bl	8000638 <__aeabi_dmul>
 8005872:	4652      	mov	r2, sl
 8005874:	465b      	mov	r3, fp
 8005876:	f7fb f965 	bl	8000b44 <__aeabi_dcmpge>
 800587a:	9e03      	ldr	r6, [sp, #12]
 800587c:	4637      	mov	r7, r6
 800587e:	2800      	cmp	r0, #0
 8005880:	f040 8245 	bne.w	8005d0e <_dtoa_r+0x93e>
 8005884:	9d01      	ldr	r5, [sp, #4]
 8005886:	2331      	movs	r3, #49	; 0x31
 8005888:	f805 3b01 	strb.w	r3, [r5], #1
 800588c:	9b00      	ldr	r3, [sp, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	e240      	b.n	8005d16 <_dtoa_r+0x946>
 8005894:	07f2      	lsls	r2, r6, #31
 8005896:	d505      	bpl.n	80058a4 <_dtoa_r+0x4d4>
 8005898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800589c:	f7fa fecc 	bl	8000638 <__aeabi_dmul>
 80058a0:	3501      	adds	r5, #1
 80058a2:	2301      	movs	r3, #1
 80058a4:	1076      	asrs	r6, r6, #1
 80058a6:	3708      	adds	r7, #8
 80058a8:	e777      	b.n	800579a <_dtoa_r+0x3ca>
 80058aa:	2502      	movs	r5, #2
 80058ac:	e779      	b.n	80057a2 <_dtoa_r+0x3d2>
 80058ae:	9f00      	ldr	r7, [sp, #0]
 80058b0:	9e03      	ldr	r6, [sp, #12]
 80058b2:	e794      	b.n	80057de <_dtoa_r+0x40e>
 80058b4:	9901      	ldr	r1, [sp, #4]
 80058b6:	4b4c      	ldr	r3, [pc, #304]	; (80059e8 <_dtoa_r+0x618>)
 80058b8:	4431      	add	r1, r6
 80058ba:	910d      	str	r1, [sp, #52]	; 0x34
 80058bc:	9908      	ldr	r1, [sp, #32]
 80058be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058c6:	2900      	cmp	r1, #0
 80058c8:	d043      	beq.n	8005952 <_dtoa_r+0x582>
 80058ca:	494d      	ldr	r1, [pc, #308]	; (8005a00 <_dtoa_r+0x630>)
 80058cc:	2000      	movs	r0, #0
 80058ce:	f7fa ffdd 	bl	800088c <__aeabi_ddiv>
 80058d2:	4652      	mov	r2, sl
 80058d4:	465b      	mov	r3, fp
 80058d6:	f7fa fcf7 	bl	80002c8 <__aeabi_dsub>
 80058da:	9d01      	ldr	r5, [sp, #4]
 80058dc:	4682      	mov	sl, r0
 80058de:	468b      	mov	fp, r1
 80058e0:	4649      	mov	r1, r9
 80058e2:	4640      	mov	r0, r8
 80058e4:	f7fb f958 	bl	8000b98 <__aeabi_d2iz>
 80058e8:	4606      	mov	r6, r0
 80058ea:	f7fa fe3b 	bl	8000564 <__aeabi_i2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4640      	mov	r0, r8
 80058f4:	4649      	mov	r1, r9
 80058f6:	f7fa fce7 	bl	80002c8 <__aeabi_dsub>
 80058fa:	3630      	adds	r6, #48	; 0x30
 80058fc:	f805 6b01 	strb.w	r6, [r5], #1
 8005900:	4652      	mov	r2, sl
 8005902:	465b      	mov	r3, fp
 8005904:	4680      	mov	r8, r0
 8005906:	4689      	mov	r9, r1
 8005908:	f7fb f908 	bl	8000b1c <__aeabi_dcmplt>
 800590c:	2800      	cmp	r0, #0
 800590e:	d163      	bne.n	80059d8 <_dtoa_r+0x608>
 8005910:	4642      	mov	r2, r8
 8005912:	464b      	mov	r3, r9
 8005914:	4936      	ldr	r1, [pc, #216]	; (80059f0 <_dtoa_r+0x620>)
 8005916:	2000      	movs	r0, #0
 8005918:	f7fa fcd6 	bl	80002c8 <__aeabi_dsub>
 800591c:	4652      	mov	r2, sl
 800591e:	465b      	mov	r3, fp
 8005920:	f7fb f8fc 	bl	8000b1c <__aeabi_dcmplt>
 8005924:	2800      	cmp	r0, #0
 8005926:	f040 80b5 	bne.w	8005a94 <_dtoa_r+0x6c4>
 800592a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800592c:	429d      	cmp	r5, r3
 800592e:	d081      	beq.n	8005834 <_dtoa_r+0x464>
 8005930:	4b30      	ldr	r3, [pc, #192]	; (80059f4 <_dtoa_r+0x624>)
 8005932:	2200      	movs	r2, #0
 8005934:	4650      	mov	r0, sl
 8005936:	4659      	mov	r1, fp
 8005938:	f7fa fe7e 	bl	8000638 <__aeabi_dmul>
 800593c:	4b2d      	ldr	r3, [pc, #180]	; (80059f4 <_dtoa_r+0x624>)
 800593e:	4682      	mov	sl, r0
 8005940:	468b      	mov	fp, r1
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	2200      	movs	r2, #0
 8005948:	f7fa fe76 	bl	8000638 <__aeabi_dmul>
 800594c:	4680      	mov	r8, r0
 800594e:	4689      	mov	r9, r1
 8005950:	e7c6      	b.n	80058e0 <_dtoa_r+0x510>
 8005952:	4650      	mov	r0, sl
 8005954:	4659      	mov	r1, fp
 8005956:	f7fa fe6f 	bl	8000638 <__aeabi_dmul>
 800595a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800595c:	9d01      	ldr	r5, [sp, #4]
 800595e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005960:	4682      	mov	sl, r0
 8005962:	468b      	mov	fp, r1
 8005964:	4649      	mov	r1, r9
 8005966:	4640      	mov	r0, r8
 8005968:	f7fb f916 	bl	8000b98 <__aeabi_d2iz>
 800596c:	4606      	mov	r6, r0
 800596e:	f7fa fdf9 	bl	8000564 <__aeabi_i2d>
 8005972:	3630      	adds	r6, #48	; 0x30
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4640      	mov	r0, r8
 800597a:	4649      	mov	r1, r9
 800597c:	f7fa fca4 	bl	80002c8 <__aeabi_dsub>
 8005980:	f805 6b01 	strb.w	r6, [r5], #1
 8005984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005986:	429d      	cmp	r5, r3
 8005988:	4680      	mov	r8, r0
 800598a:	4689      	mov	r9, r1
 800598c:	f04f 0200 	mov.w	r2, #0
 8005990:	d124      	bne.n	80059dc <_dtoa_r+0x60c>
 8005992:	4b1b      	ldr	r3, [pc, #108]	; (8005a00 <_dtoa_r+0x630>)
 8005994:	4650      	mov	r0, sl
 8005996:	4659      	mov	r1, fp
 8005998:	f7fa fc98 	bl	80002cc <__adddf3>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4640      	mov	r0, r8
 80059a2:	4649      	mov	r1, r9
 80059a4:	f7fb f8d8 	bl	8000b58 <__aeabi_dcmpgt>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d173      	bne.n	8005a94 <_dtoa_r+0x6c4>
 80059ac:	4652      	mov	r2, sl
 80059ae:	465b      	mov	r3, fp
 80059b0:	4913      	ldr	r1, [pc, #76]	; (8005a00 <_dtoa_r+0x630>)
 80059b2:	2000      	movs	r0, #0
 80059b4:	f7fa fc88 	bl	80002c8 <__aeabi_dsub>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4640      	mov	r0, r8
 80059be:	4649      	mov	r1, r9
 80059c0:	f7fb f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	f43f af35 	beq.w	8005834 <_dtoa_r+0x464>
 80059ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80059cc:	1e6b      	subs	r3, r5, #1
 80059ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80059d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059d4:	2b30      	cmp	r3, #48	; 0x30
 80059d6:	d0f8      	beq.n	80059ca <_dtoa_r+0x5fa>
 80059d8:	9700      	str	r7, [sp, #0]
 80059da:	e049      	b.n	8005a70 <_dtoa_r+0x6a0>
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <_dtoa_r+0x624>)
 80059de:	f7fa fe2b 	bl	8000638 <__aeabi_dmul>
 80059e2:	4680      	mov	r8, r0
 80059e4:	4689      	mov	r9, r1
 80059e6:	e7bd      	b.n	8005964 <_dtoa_r+0x594>
 80059e8:	08008538 	.word	0x08008538
 80059ec:	08008510 	.word	0x08008510
 80059f0:	3ff00000 	.word	0x3ff00000
 80059f4:	40240000 	.word	0x40240000
 80059f8:	401c0000 	.word	0x401c0000
 80059fc:	40140000 	.word	0x40140000
 8005a00:	3fe00000 	.word	0x3fe00000
 8005a04:	9d01      	ldr	r5, [sp, #4]
 8005a06:	4656      	mov	r6, sl
 8005a08:	465f      	mov	r7, fp
 8005a0a:	4642      	mov	r2, r8
 8005a0c:	464b      	mov	r3, r9
 8005a0e:	4630      	mov	r0, r6
 8005a10:	4639      	mov	r1, r7
 8005a12:	f7fa ff3b 	bl	800088c <__aeabi_ddiv>
 8005a16:	f7fb f8bf 	bl	8000b98 <__aeabi_d2iz>
 8005a1a:	4682      	mov	sl, r0
 8005a1c:	f7fa fda2 	bl	8000564 <__aeabi_i2d>
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	f7fa fe08 	bl	8000638 <__aeabi_dmul>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4630      	mov	r0, r6
 8005a2e:	4639      	mov	r1, r7
 8005a30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005a34:	f7fa fc48 	bl	80002c8 <__aeabi_dsub>
 8005a38:	f805 6b01 	strb.w	r6, [r5], #1
 8005a3c:	9e01      	ldr	r6, [sp, #4]
 8005a3e:	9f03      	ldr	r7, [sp, #12]
 8005a40:	1bae      	subs	r6, r5, r6
 8005a42:	42b7      	cmp	r7, r6
 8005a44:	4602      	mov	r2, r0
 8005a46:	460b      	mov	r3, r1
 8005a48:	d135      	bne.n	8005ab6 <_dtoa_r+0x6e6>
 8005a4a:	f7fa fc3f 	bl	80002cc <__adddf3>
 8005a4e:	4642      	mov	r2, r8
 8005a50:	464b      	mov	r3, r9
 8005a52:	4606      	mov	r6, r0
 8005a54:	460f      	mov	r7, r1
 8005a56:	f7fb f87f 	bl	8000b58 <__aeabi_dcmpgt>
 8005a5a:	b9d0      	cbnz	r0, 8005a92 <_dtoa_r+0x6c2>
 8005a5c:	4642      	mov	r2, r8
 8005a5e:	464b      	mov	r3, r9
 8005a60:	4630      	mov	r0, r6
 8005a62:	4639      	mov	r1, r7
 8005a64:	f7fb f850 	bl	8000b08 <__aeabi_dcmpeq>
 8005a68:	b110      	cbz	r0, 8005a70 <_dtoa_r+0x6a0>
 8005a6a:	f01a 0f01 	tst.w	sl, #1
 8005a6e:	d110      	bne.n	8005a92 <_dtoa_r+0x6c2>
 8005a70:	4620      	mov	r0, r4
 8005a72:	ee18 1a10 	vmov	r1, s16
 8005a76:	f000 fd13 	bl	80064a0 <_Bfree>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9800      	ldr	r0, [sp, #0]
 8005a7e:	702b      	strb	r3, [r5, #0]
 8005a80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a82:	3001      	adds	r0, #1
 8005a84:	6018      	str	r0, [r3, #0]
 8005a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f43f acf1 	beq.w	8005470 <_dtoa_r+0xa0>
 8005a8e:	601d      	str	r5, [r3, #0]
 8005a90:	e4ee      	b.n	8005470 <_dtoa_r+0xa0>
 8005a92:	9f00      	ldr	r7, [sp, #0]
 8005a94:	462b      	mov	r3, r5
 8005a96:	461d      	mov	r5, r3
 8005a98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a9c:	2a39      	cmp	r2, #57	; 0x39
 8005a9e:	d106      	bne.n	8005aae <_dtoa_r+0x6de>
 8005aa0:	9a01      	ldr	r2, [sp, #4]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d1f7      	bne.n	8005a96 <_dtoa_r+0x6c6>
 8005aa6:	9901      	ldr	r1, [sp, #4]
 8005aa8:	2230      	movs	r2, #48	; 0x30
 8005aaa:	3701      	adds	r7, #1
 8005aac:	700a      	strb	r2, [r1, #0]
 8005aae:	781a      	ldrb	r2, [r3, #0]
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e790      	b.n	80059d8 <_dtoa_r+0x608>
 8005ab6:	4ba6      	ldr	r3, [pc, #664]	; (8005d50 <_dtoa_r+0x980>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f7fa fdbd 	bl	8000638 <__aeabi_dmul>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	460f      	mov	r7, r1
 8005ac6:	f7fb f81f 	bl	8000b08 <__aeabi_dcmpeq>
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d09d      	beq.n	8005a0a <_dtoa_r+0x63a>
 8005ace:	e7cf      	b.n	8005a70 <_dtoa_r+0x6a0>
 8005ad0:	9a08      	ldr	r2, [sp, #32]
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	f000 80d7 	beq.w	8005c86 <_dtoa_r+0x8b6>
 8005ad8:	9a06      	ldr	r2, [sp, #24]
 8005ada:	2a01      	cmp	r2, #1
 8005adc:	f300 80ba 	bgt.w	8005c54 <_dtoa_r+0x884>
 8005ae0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	f000 80b2 	beq.w	8005c4c <_dtoa_r+0x87c>
 8005ae8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aec:	9e07      	ldr	r6, [sp, #28]
 8005aee:	9d04      	ldr	r5, [sp, #16]
 8005af0:	9a04      	ldr	r2, [sp, #16]
 8005af2:	441a      	add	r2, r3
 8005af4:	9204      	str	r2, [sp, #16]
 8005af6:	9a05      	ldr	r2, [sp, #20]
 8005af8:	2101      	movs	r1, #1
 8005afa:	441a      	add	r2, r3
 8005afc:	4620      	mov	r0, r4
 8005afe:	9205      	str	r2, [sp, #20]
 8005b00:	f000 fd86 	bl	8006610 <__i2b>
 8005b04:	4607      	mov	r7, r0
 8005b06:	2d00      	cmp	r5, #0
 8005b08:	dd0c      	ble.n	8005b24 <_dtoa_r+0x754>
 8005b0a:	9b05      	ldr	r3, [sp, #20]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dd09      	ble.n	8005b24 <_dtoa_r+0x754>
 8005b10:	42ab      	cmp	r3, r5
 8005b12:	9a04      	ldr	r2, [sp, #16]
 8005b14:	bfa8      	it	ge
 8005b16:	462b      	movge	r3, r5
 8005b18:	1ad2      	subs	r2, r2, r3
 8005b1a:	9204      	str	r2, [sp, #16]
 8005b1c:	9a05      	ldr	r2, [sp, #20]
 8005b1e:	1aed      	subs	r5, r5, r3
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	9305      	str	r3, [sp, #20]
 8005b24:	9b07      	ldr	r3, [sp, #28]
 8005b26:	b31b      	cbz	r3, 8005b70 <_dtoa_r+0x7a0>
 8005b28:	9b08      	ldr	r3, [sp, #32]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 80af 	beq.w	8005c8e <_dtoa_r+0x8be>
 8005b30:	2e00      	cmp	r6, #0
 8005b32:	dd13      	ble.n	8005b5c <_dtoa_r+0x78c>
 8005b34:	4639      	mov	r1, r7
 8005b36:	4632      	mov	r2, r6
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 fe29 	bl	8006790 <__pow5mult>
 8005b3e:	ee18 2a10 	vmov	r2, s16
 8005b42:	4601      	mov	r1, r0
 8005b44:	4607      	mov	r7, r0
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 fd78 	bl	800663c <__multiply>
 8005b4c:	ee18 1a10 	vmov	r1, s16
 8005b50:	4680      	mov	r8, r0
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 fca4 	bl	80064a0 <_Bfree>
 8005b58:	ee08 8a10 	vmov	s16, r8
 8005b5c:	9b07      	ldr	r3, [sp, #28]
 8005b5e:	1b9a      	subs	r2, r3, r6
 8005b60:	d006      	beq.n	8005b70 <_dtoa_r+0x7a0>
 8005b62:	ee18 1a10 	vmov	r1, s16
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 fe12 	bl	8006790 <__pow5mult>
 8005b6c:	ee08 0a10 	vmov	s16, r0
 8005b70:	2101      	movs	r1, #1
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 fd4c 	bl	8006610 <__i2b>
 8005b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	4606      	mov	r6, r0
 8005b7e:	f340 8088 	ble.w	8005c92 <_dtoa_r+0x8c2>
 8005b82:	461a      	mov	r2, r3
 8005b84:	4601      	mov	r1, r0
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fe02 	bl	8006790 <__pow5mult>
 8005b8c:	9b06      	ldr	r3, [sp, #24]
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	4606      	mov	r6, r0
 8005b92:	f340 8081 	ble.w	8005c98 <_dtoa_r+0x8c8>
 8005b96:	f04f 0800 	mov.w	r8, #0
 8005b9a:	6933      	ldr	r3, [r6, #16]
 8005b9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ba0:	6918      	ldr	r0, [r3, #16]
 8005ba2:	f000 fce5 	bl	8006570 <__hi0bits>
 8005ba6:	f1c0 0020 	rsb	r0, r0, #32
 8005baa:	9b05      	ldr	r3, [sp, #20]
 8005bac:	4418      	add	r0, r3
 8005bae:	f010 001f 	ands.w	r0, r0, #31
 8005bb2:	f000 8092 	beq.w	8005cda <_dtoa_r+0x90a>
 8005bb6:	f1c0 0320 	rsb	r3, r0, #32
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	f340 808a 	ble.w	8005cd4 <_dtoa_r+0x904>
 8005bc0:	f1c0 001c 	rsb	r0, r0, #28
 8005bc4:	9b04      	ldr	r3, [sp, #16]
 8005bc6:	4403      	add	r3, r0
 8005bc8:	9304      	str	r3, [sp, #16]
 8005bca:	9b05      	ldr	r3, [sp, #20]
 8005bcc:	4403      	add	r3, r0
 8005bce:	4405      	add	r5, r0
 8005bd0:	9305      	str	r3, [sp, #20]
 8005bd2:	9b04      	ldr	r3, [sp, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd07      	ble.n	8005be8 <_dtoa_r+0x818>
 8005bd8:	ee18 1a10 	vmov	r1, s16
 8005bdc:	461a      	mov	r2, r3
 8005bde:	4620      	mov	r0, r4
 8005be0:	f000 fe30 	bl	8006844 <__lshift>
 8005be4:	ee08 0a10 	vmov	s16, r0
 8005be8:	9b05      	ldr	r3, [sp, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dd05      	ble.n	8005bfa <_dtoa_r+0x82a>
 8005bee:	4631      	mov	r1, r6
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fe26 	bl	8006844 <__lshift>
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d06e      	beq.n	8005cde <_dtoa_r+0x90e>
 8005c00:	ee18 0a10 	vmov	r0, s16
 8005c04:	4631      	mov	r1, r6
 8005c06:	f000 fe8d 	bl	8006924 <__mcmp>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	da67      	bge.n	8005cde <_dtoa_r+0x90e>
 8005c0e:	9b00      	ldr	r3, [sp, #0]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	ee18 1a10 	vmov	r1, s16
 8005c16:	9300      	str	r3, [sp, #0]
 8005c18:	220a      	movs	r2, #10
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 fc61 	bl	80064e4 <__multadd>
 8005c22:	9b08      	ldr	r3, [sp, #32]
 8005c24:	ee08 0a10 	vmov	s16, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 81b1 	beq.w	8005f90 <_dtoa_r+0xbc0>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	4639      	mov	r1, r7
 8005c32:	220a      	movs	r2, #10
 8005c34:	4620      	mov	r0, r4
 8005c36:	f000 fc55 	bl	80064e4 <__multadd>
 8005c3a:	9b02      	ldr	r3, [sp, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	4607      	mov	r7, r0
 8005c40:	f300 808e 	bgt.w	8005d60 <_dtoa_r+0x990>
 8005c44:	9b06      	ldr	r3, [sp, #24]
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	dc51      	bgt.n	8005cee <_dtoa_r+0x91e>
 8005c4a:	e089      	b.n	8005d60 <_dtoa_r+0x990>
 8005c4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c52:	e74b      	b.n	8005aec <_dtoa_r+0x71c>
 8005c54:	9b03      	ldr	r3, [sp, #12]
 8005c56:	1e5e      	subs	r6, r3, #1
 8005c58:	9b07      	ldr	r3, [sp, #28]
 8005c5a:	42b3      	cmp	r3, r6
 8005c5c:	bfbf      	itttt	lt
 8005c5e:	9b07      	ldrlt	r3, [sp, #28]
 8005c60:	9607      	strlt	r6, [sp, #28]
 8005c62:	1af2      	sublt	r2, r6, r3
 8005c64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c66:	bfb6      	itet	lt
 8005c68:	189b      	addlt	r3, r3, r2
 8005c6a:	1b9e      	subge	r6, r3, r6
 8005c6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c6e:	9b03      	ldr	r3, [sp, #12]
 8005c70:	bfb8      	it	lt
 8005c72:	2600      	movlt	r6, #0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bfb7      	itett	lt
 8005c78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c80:	1a9d      	sublt	r5, r3, r2
 8005c82:	2300      	movlt	r3, #0
 8005c84:	e734      	b.n	8005af0 <_dtoa_r+0x720>
 8005c86:	9e07      	ldr	r6, [sp, #28]
 8005c88:	9d04      	ldr	r5, [sp, #16]
 8005c8a:	9f08      	ldr	r7, [sp, #32]
 8005c8c:	e73b      	b.n	8005b06 <_dtoa_r+0x736>
 8005c8e:	9a07      	ldr	r2, [sp, #28]
 8005c90:	e767      	b.n	8005b62 <_dtoa_r+0x792>
 8005c92:	9b06      	ldr	r3, [sp, #24]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	dc18      	bgt.n	8005cca <_dtoa_r+0x8fa>
 8005c98:	f1ba 0f00 	cmp.w	sl, #0
 8005c9c:	d115      	bne.n	8005cca <_dtoa_r+0x8fa>
 8005c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ca2:	b993      	cbnz	r3, 8005cca <_dtoa_r+0x8fa>
 8005ca4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ca8:	0d1b      	lsrs	r3, r3, #20
 8005caa:	051b      	lsls	r3, r3, #20
 8005cac:	b183      	cbz	r3, 8005cd0 <_dtoa_r+0x900>
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	9304      	str	r3, [sp, #16]
 8005cb4:	9b05      	ldr	r3, [sp, #20]
 8005cb6:	3301      	adds	r3, #1
 8005cb8:	9305      	str	r3, [sp, #20]
 8005cba:	f04f 0801 	mov.w	r8, #1
 8005cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f47f af6a 	bne.w	8005b9a <_dtoa_r+0x7ca>
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	e76f      	b.n	8005baa <_dtoa_r+0x7da>
 8005cca:	f04f 0800 	mov.w	r8, #0
 8005cce:	e7f6      	b.n	8005cbe <_dtoa_r+0x8ee>
 8005cd0:	4698      	mov	r8, r3
 8005cd2:	e7f4      	b.n	8005cbe <_dtoa_r+0x8ee>
 8005cd4:	f43f af7d 	beq.w	8005bd2 <_dtoa_r+0x802>
 8005cd8:	4618      	mov	r0, r3
 8005cda:	301c      	adds	r0, #28
 8005cdc:	e772      	b.n	8005bc4 <_dtoa_r+0x7f4>
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	dc37      	bgt.n	8005d54 <_dtoa_r+0x984>
 8005ce4:	9b06      	ldr	r3, [sp, #24]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	dd34      	ble.n	8005d54 <_dtoa_r+0x984>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	9302      	str	r3, [sp, #8]
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	b96b      	cbnz	r3, 8005d0e <_dtoa_r+0x93e>
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	2205      	movs	r2, #5
 8005cf6:	4620      	mov	r0, r4
 8005cf8:	f000 fbf4 	bl	80064e4 <__multadd>
 8005cfc:	4601      	mov	r1, r0
 8005cfe:	4606      	mov	r6, r0
 8005d00:	ee18 0a10 	vmov	r0, s16
 8005d04:	f000 fe0e 	bl	8006924 <__mcmp>
 8005d08:	2800      	cmp	r0, #0
 8005d0a:	f73f adbb 	bgt.w	8005884 <_dtoa_r+0x4b4>
 8005d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d10:	9d01      	ldr	r5, [sp, #4]
 8005d12:	43db      	mvns	r3, r3
 8005d14:	9300      	str	r3, [sp, #0]
 8005d16:	f04f 0800 	mov.w	r8, #0
 8005d1a:	4631      	mov	r1, r6
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fbbf 	bl	80064a0 <_Bfree>
 8005d22:	2f00      	cmp	r7, #0
 8005d24:	f43f aea4 	beq.w	8005a70 <_dtoa_r+0x6a0>
 8005d28:	f1b8 0f00 	cmp.w	r8, #0
 8005d2c:	d005      	beq.n	8005d3a <_dtoa_r+0x96a>
 8005d2e:	45b8      	cmp	r8, r7
 8005d30:	d003      	beq.n	8005d3a <_dtoa_r+0x96a>
 8005d32:	4641      	mov	r1, r8
 8005d34:	4620      	mov	r0, r4
 8005d36:	f000 fbb3 	bl	80064a0 <_Bfree>
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f000 fbaf 	bl	80064a0 <_Bfree>
 8005d42:	e695      	b.n	8005a70 <_dtoa_r+0x6a0>
 8005d44:	2600      	movs	r6, #0
 8005d46:	4637      	mov	r7, r6
 8005d48:	e7e1      	b.n	8005d0e <_dtoa_r+0x93e>
 8005d4a:	9700      	str	r7, [sp, #0]
 8005d4c:	4637      	mov	r7, r6
 8005d4e:	e599      	b.n	8005884 <_dtoa_r+0x4b4>
 8005d50:	40240000 	.word	0x40240000
 8005d54:	9b08      	ldr	r3, [sp, #32]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	f000 80ca 	beq.w	8005ef0 <_dtoa_r+0xb20>
 8005d5c:	9b03      	ldr	r3, [sp, #12]
 8005d5e:	9302      	str	r3, [sp, #8]
 8005d60:	2d00      	cmp	r5, #0
 8005d62:	dd05      	ble.n	8005d70 <_dtoa_r+0x9a0>
 8005d64:	4639      	mov	r1, r7
 8005d66:	462a      	mov	r2, r5
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fd6b 	bl	8006844 <__lshift>
 8005d6e:	4607      	mov	r7, r0
 8005d70:	f1b8 0f00 	cmp.w	r8, #0
 8005d74:	d05b      	beq.n	8005e2e <_dtoa_r+0xa5e>
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fb51 	bl	8006420 <_Balloc>
 8005d7e:	4605      	mov	r5, r0
 8005d80:	b928      	cbnz	r0, 8005d8e <_dtoa_r+0x9be>
 8005d82:	4b87      	ldr	r3, [pc, #540]	; (8005fa0 <_dtoa_r+0xbd0>)
 8005d84:	4602      	mov	r2, r0
 8005d86:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d8a:	f7ff bb3b 	b.w	8005404 <_dtoa_r+0x34>
 8005d8e:	693a      	ldr	r2, [r7, #16]
 8005d90:	3202      	adds	r2, #2
 8005d92:	0092      	lsls	r2, r2, #2
 8005d94:	f107 010c 	add.w	r1, r7, #12
 8005d98:	300c      	adds	r0, #12
 8005d9a:	f000 fb33 	bl	8006404 <memcpy>
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4629      	mov	r1, r5
 8005da2:	4620      	mov	r0, r4
 8005da4:	f000 fd4e 	bl	8006844 <__lshift>
 8005da8:	9b01      	ldr	r3, [sp, #4]
 8005daa:	f103 0901 	add.w	r9, r3, #1
 8005dae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005db2:	4413      	add	r3, r2
 8005db4:	9305      	str	r3, [sp, #20]
 8005db6:	f00a 0301 	and.w	r3, sl, #1
 8005dba:	46b8      	mov	r8, r7
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	4607      	mov	r7, r0
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	ee18 0a10 	vmov	r0, s16
 8005dc6:	f7ff fa75 	bl	80052b4 <quorem>
 8005dca:	4641      	mov	r1, r8
 8005dcc:	9002      	str	r0, [sp, #8]
 8005dce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005dd2:	ee18 0a10 	vmov	r0, s16
 8005dd6:	f000 fda5 	bl	8006924 <__mcmp>
 8005dda:	463a      	mov	r2, r7
 8005ddc:	9003      	str	r0, [sp, #12]
 8005dde:	4631      	mov	r1, r6
 8005de0:	4620      	mov	r0, r4
 8005de2:	f000 fdbb 	bl	800695c <__mdiff>
 8005de6:	68c2      	ldr	r2, [r0, #12]
 8005de8:	f109 3bff 	add.w	fp, r9, #4294967295
 8005dec:	4605      	mov	r5, r0
 8005dee:	bb02      	cbnz	r2, 8005e32 <_dtoa_r+0xa62>
 8005df0:	4601      	mov	r1, r0
 8005df2:	ee18 0a10 	vmov	r0, s16
 8005df6:	f000 fd95 	bl	8006924 <__mcmp>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	4620      	mov	r0, r4
 8005e00:	9207      	str	r2, [sp, #28]
 8005e02:	f000 fb4d 	bl	80064a0 <_Bfree>
 8005e06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005e0a:	ea43 0102 	orr.w	r1, r3, r2
 8005e0e:	9b04      	ldr	r3, [sp, #16]
 8005e10:	430b      	orrs	r3, r1
 8005e12:	464d      	mov	r5, r9
 8005e14:	d10f      	bne.n	8005e36 <_dtoa_r+0xa66>
 8005e16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e1a:	d02a      	beq.n	8005e72 <_dtoa_r+0xaa2>
 8005e1c:	9b03      	ldr	r3, [sp, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	dd02      	ble.n	8005e28 <_dtoa_r+0xa58>
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005e28:	f88b a000 	strb.w	sl, [fp]
 8005e2c:	e775      	b.n	8005d1a <_dtoa_r+0x94a>
 8005e2e:	4638      	mov	r0, r7
 8005e30:	e7ba      	b.n	8005da8 <_dtoa_r+0x9d8>
 8005e32:	2201      	movs	r2, #1
 8005e34:	e7e2      	b.n	8005dfc <_dtoa_r+0xa2c>
 8005e36:	9b03      	ldr	r3, [sp, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	db04      	blt.n	8005e46 <_dtoa_r+0xa76>
 8005e3c:	9906      	ldr	r1, [sp, #24]
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	9904      	ldr	r1, [sp, #16]
 8005e42:	430b      	orrs	r3, r1
 8005e44:	d122      	bne.n	8005e8c <_dtoa_r+0xabc>
 8005e46:	2a00      	cmp	r2, #0
 8005e48:	ddee      	ble.n	8005e28 <_dtoa_r+0xa58>
 8005e4a:	ee18 1a10 	vmov	r1, s16
 8005e4e:	2201      	movs	r2, #1
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fcf7 	bl	8006844 <__lshift>
 8005e56:	4631      	mov	r1, r6
 8005e58:	ee08 0a10 	vmov	s16, r0
 8005e5c:	f000 fd62 	bl	8006924 <__mcmp>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	dc03      	bgt.n	8005e6c <_dtoa_r+0xa9c>
 8005e64:	d1e0      	bne.n	8005e28 <_dtoa_r+0xa58>
 8005e66:	f01a 0f01 	tst.w	sl, #1
 8005e6a:	d0dd      	beq.n	8005e28 <_dtoa_r+0xa58>
 8005e6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e70:	d1d7      	bne.n	8005e22 <_dtoa_r+0xa52>
 8005e72:	2339      	movs	r3, #57	; 0x39
 8005e74:	f88b 3000 	strb.w	r3, [fp]
 8005e78:	462b      	mov	r3, r5
 8005e7a:	461d      	mov	r5, r3
 8005e7c:	3b01      	subs	r3, #1
 8005e7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e82:	2a39      	cmp	r2, #57	; 0x39
 8005e84:	d071      	beq.n	8005f6a <_dtoa_r+0xb9a>
 8005e86:	3201      	adds	r2, #1
 8005e88:	701a      	strb	r2, [r3, #0]
 8005e8a:	e746      	b.n	8005d1a <_dtoa_r+0x94a>
 8005e8c:	2a00      	cmp	r2, #0
 8005e8e:	dd07      	ble.n	8005ea0 <_dtoa_r+0xad0>
 8005e90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e94:	d0ed      	beq.n	8005e72 <_dtoa_r+0xaa2>
 8005e96:	f10a 0301 	add.w	r3, sl, #1
 8005e9a:	f88b 3000 	strb.w	r3, [fp]
 8005e9e:	e73c      	b.n	8005d1a <_dtoa_r+0x94a>
 8005ea0:	9b05      	ldr	r3, [sp, #20]
 8005ea2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005ea6:	4599      	cmp	r9, r3
 8005ea8:	d047      	beq.n	8005f3a <_dtoa_r+0xb6a>
 8005eaa:	ee18 1a10 	vmov	r1, s16
 8005eae:	2300      	movs	r3, #0
 8005eb0:	220a      	movs	r2, #10
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fb16 	bl	80064e4 <__multadd>
 8005eb8:	45b8      	cmp	r8, r7
 8005eba:	ee08 0a10 	vmov	s16, r0
 8005ebe:	f04f 0300 	mov.w	r3, #0
 8005ec2:	f04f 020a 	mov.w	r2, #10
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	4620      	mov	r0, r4
 8005eca:	d106      	bne.n	8005eda <_dtoa_r+0xb0a>
 8005ecc:	f000 fb0a 	bl	80064e4 <__multadd>
 8005ed0:	4680      	mov	r8, r0
 8005ed2:	4607      	mov	r7, r0
 8005ed4:	f109 0901 	add.w	r9, r9, #1
 8005ed8:	e772      	b.n	8005dc0 <_dtoa_r+0x9f0>
 8005eda:	f000 fb03 	bl	80064e4 <__multadd>
 8005ede:	4639      	mov	r1, r7
 8005ee0:	4680      	mov	r8, r0
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	220a      	movs	r2, #10
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f000 fafc 	bl	80064e4 <__multadd>
 8005eec:	4607      	mov	r7, r0
 8005eee:	e7f1      	b.n	8005ed4 <_dtoa_r+0xb04>
 8005ef0:	9b03      	ldr	r3, [sp, #12]
 8005ef2:	9302      	str	r3, [sp, #8]
 8005ef4:	9d01      	ldr	r5, [sp, #4]
 8005ef6:	ee18 0a10 	vmov	r0, s16
 8005efa:	4631      	mov	r1, r6
 8005efc:	f7ff f9da 	bl	80052b4 <quorem>
 8005f00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005f04:	9b01      	ldr	r3, [sp, #4]
 8005f06:	f805 ab01 	strb.w	sl, [r5], #1
 8005f0a:	1aea      	subs	r2, r5, r3
 8005f0c:	9b02      	ldr	r3, [sp, #8]
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	dd09      	ble.n	8005f26 <_dtoa_r+0xb56>
 8005f12:	ee18 1a10 	vmov	r1, s16
 8005f16:	2300      	movs	r3, #0
 8005f18:	220a      	movs	r2, #10
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	f000 fae2 	bl	80064e4 <__multadd>
 8005f20:	ee08 0a10 	vmov	s16, r0
 8005f24:	e7e7      	b.n	8005ef6 <_dtoa_r+0xb26>
 8005f26:	9b02      	ldr	r3, [sp, #8]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bfc8      	it	gt
 8005f2c:	461d      	movgt	r5, r3
 8005f2e:	9b01      	ldr	r3, [sp, #4]
 8005f30:	bfd8      	it	le
 8005f32:	2501      	movle	r5, #1
 8005f34:	441d      	add	r5, r3
 8005f36:	f04f 0800 	mov.w	r8, #0
 8005f3a:	ee18 1a10 	vmov	r1, s16
 8005f3e:	2201      	movs	r2, #1
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fc7f 	bl	8006844 <__lshift>
 8005f46:	4631      	mov	r1, r6
 8005f48:	ee08 0a10 	vmov	s16, r0
 8005f4c:	f000 fcea 	bl	8006924 <__mcmp>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	dc91      	bgt.n	8005e78 <_dtoa_r+0xaa8>
 8005f54:	d102      	bne.n	8005f5c <_dtoa_r+0xb8c>
 8005f56:	f01a 0f01 	tst.w	sl, #1
 8005f5a:	d18d      	bne.n	8005e78 <_dtoa_r+0xaa8>
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	461d      	mov	r5, r3
 8005f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f64:	2a30      	cmp	r2, #48	; 0x30
 8005f66:	d0fa      	beq.n	8005f5e <_dtoa_r+0xb8e>
 8005f68:	e6d7      	b.n	8005d1a <_dtoa_r+0x94a>
 8005f6a:	9a01      	ldr	r2, [sp, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d184      	bne.n	8005e7a <_dtoa_r+0xaaa>
 8005f70:	9b00      	ldr	r3, [sp, #0]
 8005f72:	3301      	adds	r3, #1
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	2331      	movs	r3, #49	; 0x31
 8005f78:	7013      	strb	r3, [r2, #0]
 8005f7a:	e6ce      	b.n	8005d1a <_dtoa_r+0x94a>
 8005f7c:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <_dtoa_r+0xbd4>)
 8005f7e:	f7ff ba95 	b.w	80054ac <_dtoa_r+0xdc>
 8005f82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f47f aa6e 	bne.w	8005466 <_dtoa_r+0x96>
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <_dtoa_r+0xbd8>)
 8005f8c:	f7ff ba8e 	b.w	80054ac <_dtoa_r+0xdc>
 8005f90:	9b02      	ldr	r3, [sp, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	dcae      	bgt.n	8005ef4 <_dtoa_r+0xb24>
 8005f96:	9b06      	ldr	r3, [sp, #24]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f73f aea8 	bgt.w	8005cee <_dtoa_r+0x91e>
 8005f9e:	e7a9      	b.n	8005ef4 <_dtoa_r+0xb24>
 8005fa0:	08008443 	.word	0x08008443
 8005fa4:	080083a0 	.word	0x080083a0
 8005fa8:	080083c4 	.word	0x080083c4

08005fac <__sflush_r>:
 8005fac:	898a      	ldrh	r2, [r1, #12]
 8005fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	0710      	lsls	r0, r2, #28
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	d458      	bmi.n	800606c <__sflush_r+0xc0>
 8005fba:	684b      	ldr	r3, [r1, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	dc05      	bgt.n	8005fcc <__sflush_r+0x20>
 8005fc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dc02      	bgt.n	8005fcc <__sflush_r+0x20>
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fce:	2e00      	cmp	r6, #0
 8005fd0:	d0f9      	beq.n	8005fc6 <__sflush_r+0x1a>
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fd8:	682f      	ldr	r7, [r5, #0]
 8005fda:	602b      	str	r3, [r5, #0]
 8005fdc:	d032      	beq.n	8006044 <__sflush_r+0x98>
 8005fde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fe0:	89a3      	ldrh	r3, [r4, #12]
 8005fe2:	075a      	lsls	r2, r3, #29
 8005fe4:	d505      	bpl.n	8005ff2 <__sflush_r+0x46>
 8005fe6:	6863      	ldr	r3, [r4, #4]
 8005fe8:	1ac0      	subs	r0, r0, r3
 8005fea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fec:	b10b      	cbz	r3, 8005ff2 <__sflush_r+0x46>
 8005fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff0:	1ac0      	subs	r0, r0, r3
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ff8:	6a21      	ldr	r1, [r4, #32]
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	47b0      	blx	r6
 8005ffe:	1c43      	adds	r3, r0, #1
 8006000:	89a3      	ldrh	r3, [r4, #12]
 8006002:	d106      	bne.n	8006012 <__sflush_r+0x66>
 8006004:	6829      	ldr	r1, [r5, #0]
 8006006:	291d      	cmp	r1, #29
 8006008:	d82c      	bhi.n	8006064 <__sflush_r+0xb8>
 800600a:	4a2a      	ldr	r2, [pc, #168]	; (80060b4 <__sflush_r+0x108>)
 800600c:	40ca      	lsrs	r2, r1
 800600e:	07d6      	lsls	r6, r2, #31
 8006010:	d528      	bpl.n	8006064 <__sflush_r+0xb8>
 8006012:	2200      	movs	r2, #0
 8006014:	6062      	str	r2, [r4, #4]
 8006016:	04d9      	lsls	r1, r3, #19
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	6022      	str	r2, [r4, #0]
 800601c:	d504      	bpl.n	8006028 <__sflush_r+0x7c>
 800601e:	1c42      	adds	r2, r0, #1
 8006020:	d101      	bne.n	8006026 <__sflush_r+0x7a>
 8006022:	682b      	ldr	r3, [r5, #0]
 8006024:	b903      	cbnz	r3, 8006028 <__sflush_r+0x7c>
 8006026:	6560      	str	r0, [r4, #84]	; 0x54
 8006028:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602a:	602f      	str	r7, [r5, #0]
 800602c:	2900      	cmp	r1, #0
 800602e:	d0ca      	beq.n	8005fc6 <__sflush_r+0x1a>
 8006030:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006034:	4299      	cmp	r1, r3
 8006036:	d002      	beq.n	800603e <__sflush_r+0x92>
 8006038:	4628      	mov	r0, r5
 800603a:	f000 fd8b 	bl	8006b54 <_free_r>
 800603e:	2000      	movs	r0, #0
 8006040:	6360      	str	r0, [r4, #52]	; 0x34
 8006042:	e7c1      	b.n	8005fc8 <__sflush_r+0x1c>
 8006044:	6a21      	ldr	r1, [r4, #32]
 8006046:	2301      	movs	r3, #1
 8006048:	4628      	mov	r0, r5
 800604a:	47b0      	blx	r6
 800604c:	1c41      	adds	r1, r0, #1
 800604e:	d1c7      	bne.n	8005fe0 <__sflush_r+0x34>
 8006050:	682b      	ldr	r3, [r5, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0c4      	beq.n	8005fe0 <__sflush_r+0x34>
 8006056:	2b1d      	cmp	r3, #29
 8006058:	d001      	beq.n	800605e <__sflush_r+0xb2>
 800605a:	2b16      	cmp	r3, #22
 800605c:	d101      	bne.n	8006062 <__sflush_r+0xb6>
 800605e:	602f      	str	r7, [r5, #0]
 8006060:	e7b1      	b.n	8005fc6 <__sflush_r+0x1a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	e7ad      	b.n	8005fc8 <__sflush_r+0x1c>
 800606c:	690f      	ldr	r7, [r1, #16]
 800606e:	2f00      	cmp	r7, #0
 8006070:	d0a9      	beq.n	8005fc6 <__sflush_r+0x1a>
 8006072:	0793      	lsls	r3, r2, #30
 8006074:	680e      	ldr	r6, [r1, #0]
 8006076:	bf08      	it	eq
 8006078:	694b      	ldreq	r3, [r1, #20]
 800607a:	600f      	str	r7, [r1, #0]
 800607c:	bf18      	it	ne
 800607e:	2300      	movne	r3, #0
 8006080:	eba6 0807 	sub.w	r8, r6, r7
 8006084:	608b      	str	r3, [r1, #8]
 8006086:	f1b8 0f00 	cmp.w	r8, #0
 800608a:	dd9c      	ble.n	8005fc6 <__sflush_r+0x1a>
 800608c:	6a21      	ldr	r1, [r4, #32]
 800608e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006090:	4643      	mov	r3, r8
 8006092:	463a      	mov	r2, r7
 8006094:	4628      	mov	r0, r5
 8006096:	47b0      	blx	r6
 8006098:	2800      	cmp	r0, #0
 800609a:	dc06      	bgt.n	80060aa <__sflush_r+0xfe>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a2:	81a3      	strh	r3, [r4, #12]
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	e78e      	b.n	8005fc8 <__sflush_r+0x1c>
 80060aa:	4407      	add	r7, r0
 80060ac:	eba8 0800 	sub.w	r8, r8, r0
 80060b0:	e7e9      	b.n	8006086 <__sflush_r+0xda>
 80060b2:	bf00      	nop
 80060b4:	20400001 	.word	0x20400001

080060b8 <_fflush_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	690b      	ldr	r3, [r1, #16]
 80060bc:	4605      	mov	r5, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	b913      	cbnz	r3, 80060c8 <_fflush_r+0x10>
 80060c2:	2500      	movs	r5, #0
 80060c4:	4628      	mov	r0, r5
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	b118      	cbz	r0, 80060d2 <_fflush_r+0x1a>
 80060ca:	6983      	ldr	r3, [r0, #24]
 80060cc:	b90b      	cbnz	r3, 80060d2 <_fflush_r+0x1a>
 80060ce:	f000 f887 	bl	80061e0 <__sinit>
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <_fflush_r+0x6c>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d11b      	bne.n	8006110 <_fflush_r+0x58>
 80060d8:	686c      	ldr	r4, [r5, #4]
 80060da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0ef      	beq.n	80060c2 <_fflush_r+0xa>
 80060e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060e4:	07d0      	lsls	r0, r2, #31
 80060e6:	d404      	bmi.n	80060f2 <_fflush_r+0x3a>
 80060e8:	0599      	lsls	r1, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_fflush_r+0x3a>
 80060ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ee:	f000 f91a 	bl	8006326 <__retarget_lock_acquire_recursive>
 80060f2:	4628      	mov	r0, r5
 80060f4:	4621      	mov	r1, r4
 80060f6:	f7ff ff59 	bl	8005fac <__sflush_r>
 80060fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060fc:	07da      	lsls	r2, r3, #31
 80060fe:	4605      	mov	r5, r0
 8006100:	d4e0      	bmi.n	80060c4 <_fflush_r+0xc>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	059b      	lsls	r3, r3, #22
 8006106:	d4dd      	bmi.n	80060c4 <_fflush_r+0xc>
 8006108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800610a:	f000 f90d 	bl	8006328 <__retarget_lock_release_recursive>
 800610e:	e7d9      	b.n	80060c4 <_fflush_r+0xc>
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <_fflush_r+0x70>)
 8006112:	429c      	cmp	r4, r3
 8006114:	d101      	bne.n	800611a <_fflush_r+0x62>
 8006116:	68ac      	ldr	r4, [r5, #8]
 8006118:	e7df      	b.n	80060da <_fflush_r+0x22>
 800611a:	4b04      	ldr	r3, [pc, #16]	; (800612c <_fflush_r+0x74>)
 800611c:	429c      	cmp	r4, r3
 800611e:	bf08      	it	eq
 8006120:	68ec      	ldreq	r4, [r5, #12]
 8006122:	e7da      	b.n	80060da <_fflush_r+0x22>
 8006124:	08008474 	.word	0x08008474
 8006128:	08008494 	.word	0x08008494
 800612c:	08008454 	.word	0x08008454

08006130 <std>:
 8006130:	2300      	movs	r3, #0
 8006132:	b510      	push	{r4, lr}
 8006134:	4604      	mov	r4, r0
 8006136:	e9c0 3300 	strd	r3, r3, [r0]
 800613a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800613e:	6083      	str	r3, [r0, #8]
 8006140:	8181      	strh	r1, [r0, #12]
 8006142:	6643      	str	r3, [r0, #100]	; 0x64
 8006144:	81c2      	strh	r2, [r0, #14]
 8006146:	6183      	str	r3, [r0, #24]
 8006148:	4619      	mov	r1, r3
 800614a:	2208      	movs	r2, #8
 800614c:	305c      	adds	r0, #92	; 0x5c
 800614e:	f7fe faf1 	bl	8004734 <memset>
 8006152:	4b05      	ldr	r3, [pc, #20]	; (8006168 <std+0x38>)
 8006154:	6263      	str	r3, [r4, #36]	; 0x24
 8006156:	4b05      	ldr	r3, [pc, #20]	; (800616c <std+0x3c>)
 8006158:	62a3      	str	r3, [r4, #40]	; 0x28
 800615a:	4b05      	ldr	r3, [pc, #20]	; (8006170 <std+0x40>)
 800615c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <std+0x44>)
 8006160:	6224      	str	r4, [r4, #32]
 8006162:	6323      	str	r3, [r4, #48]	; 0x30
 8006164:	bd10      	pop	{r4, pc}
 8006166:	bf00      	nop
 8006168:	08006fe9 	.word	0x08006fe9
 800616c:	0800700b 	.word	0x0800700b
 8006170:	08007043 	.word	0x08007043
 8006174:	08007067 	.word	0x08007067

08006178 <_cleanup_r>:
 8006178:	4901      	ldr	r1, [pc, #4]	; (8006180 <_cleanup_r+0x8>)
 800617a:	f000 b8af 	b.w	80062dc <_fwalk_reent>
 800617e:	bf00      	nop
 8006180:	080060b9 	.word	0x080060b9

08006184 <__sfmoreglue>:
 8006184:	b570      	push	{r4, r5, r6, lr}
 8006186:	2268      	movs	r2, #104	; 0x68
 8006188:	1e4d      	subs	r5, r1, #1
 800618a:	4355      	muls	r5, r2
 800618c:	460e      	mov	r6, r1
 800618e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006192:	f000 fd4b 	bl	8006c2c <_malloc_r>
 8006196:	4604      	mov	r4, r0
 8006198:	b140      	cbz	r0, 80061ac <__sfmoreglue+0x28>
 800619a:	2100      	movs	r1, #0
 800619c:	e9c0 1600 	strd	r1, r6, [r0]
 80061a0:	300c      	adds	r0, #12
 80061a2:	60a0      	str	r0, [r4, #8]
 80061a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061a8:	f7fe fac4 	bl	8004734 <memset>
 80061ac:	4620      	mov	r0, r4
 80061ae:	bd70      	pop	{r4, r5, r6, pc}

080061b0 <__sfp_lock_acquire>:
 80061b0:	4801      	ldr	r0, [pc, #4]	; (80061b8 <__sfp_lock_acquire+0x8>)
 80061b2:	f000 b8b8 	b.w	8006326 <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	200003e1 	.word	0x200003e1

080061bc <__sfp_lock_release>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__sfp_lock_release+0x8>)
 80061be:	f000 b8b3 	b.w	8006328 <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	200003e1 	.word	0x200003e1

080061c8 <__sinit_lock_acquire>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__sinit_lock_acquire+0x8>)
 80061ca:	f000 b8ac 	b.w	8006326 <__retarget_lock_acquire_recursive>
 80061ce:	bf00      	nop
 80061d0:	200003e2 	.word	0x200003e2

080061d4 <__sinit_lock_release>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__sinit_lock_release+0x8>)
 80061d6:	f000 b8a7 	b.w	8006328 <__retarget_lock_release_recursive>
 80061da:	bf00      	nop
 80061dc:	200003e2 	.word	0x200003e2

080061e0 <__sinit>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	4604      	mov	r4, r0
 80061e4:	f7ff fff0 	bl	80061c8 <__sinit_lock_acquire>
 80061e8:	69a3      	ldr	r3, [r4, #24]
 80061ea:	b11b      	cbz	r3, 80061f4 <__sinit+0x14>
 80061ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061f0:	f7ff bff0 	b.w	80061d4 <__sinit_lock_release>
 80061f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061f8:	6523      	str	r3, [r4, #80]	; 0x50
 80061fa:	4b13      	ldr	r3, [pc, #76]	; (8006248 <__sinit+0x68>)
 80061fc:	4a13      	ldr	r2, [pc, #76]	; (800624c <__sinit+0x6c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	62a2      	str	r2, [r4, #40]	; 0x28
 8006202:	42a3      	cmp	r3, r4
 8006204:	bf04      	itt	eq
 8006206:	2301      	moveq	r3, #1
 8006208:	61a3      	streq	r3, [r4, #24]
 800620a:	4620      	mov	r0, r4
 800620c:	f000 f820 	bl	8006250 <__sfp>
 8006210:	6060      	str	r0, [r4, #4]
 8006212:	4620      	mov	r0, r4
 8006214:	f000 f81c 	bl	8006250 <__sfp>
 8006218:	60a0      	str	r0, [r4, #8]
 800621a:	4620      	mov	r0, r4
 800621c:	f000 f818 	bl	8006250 <__sfp>
 8006220:	2200      	movs	r2, #0
 8006222:	60e0      	str	r0, [r4, #12]
 8006224:	2104      	movs	r1, #4
 8006226:	6860      	ldr	r0, [r4, #4]
 8006228:	f7ff ff82 	bl	8006130 <std>
 800622c:	68a0      	ldr	r0, [r4, #8]
 800622e:	2201      	movs	r2, #1
 8006230:	2109      	movs	r1, #9
 8006232:	f7ff ff7d 	bl	8006130 <std>
 8006236:	68e0      	ldr	r0, [r4, #12]
 8006238:	2202      	movs	r2, #2
 800623a:	2112      	movs	r1, #18
 800623c:	f7ff ff78 	bl	8006130 <std>
 8006240:	2301      	movs	r3, #1
 8006242:	61a3      	str	r3, [r4, #24]
 8006244:	e7d2      	b.n	80061ec <__sinit+0xc>
 8006246:	bf00      	nop
 8006248:	0800838c 	.word	0x0800838c
 800624c:	08006179 	.word	0x08006179

08006250 <__sfp>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	4607      	mov	r7, r0
 8006254:	f7ff ffac 	bl	80061b0 <__sfp_lock_acquire>
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <__sfp+0x84>)
 800625a:	681e      	ldr	r6, [r3, #0]
 800625c:	69b3      	ldr	r3, [r6, #24]
 800625e:	b913      	cbnz	r3, 8006266 <__sfp+0x16>
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff ffbd 	bl	80061e0 <__sinit>
 8006266:	3648      	adds	r6, #72	; 0x48
 8006268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800626c:	3b01      	subs	r3, #1
 800626e:	d503      	bpl.n	8006278 <__sfp+0x28>
 8006270:	6833      	ldr	r3, [r6, #0]
 8006272:	b30b      	cbz	r3, 80062b8 <__sfp+0x68>
 8006274:	6836      	ldr	r6, [r6, #0]
 8006276:	e7f7      	b.n	8006268 <__sfp+0x18>
 8006278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800627c:	b9d5      	cbnz	r5, 80062b4 <__sfp+0x64>
 800627e:	4b16      	ldr	r3, [pc, #88]	; (80062d8 <__sfp+0x88>)
 8006280:	60e3      	str	r3, [r4, #12]
 8006282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006286:	6665      	str	r5, [r4, #100]	; 0x64
 8006288:	f000 f84c 	bl	8006324 <__retarget_lock_init_recursive>
 800628c:	f7ff ff96 	bl	80061bc <__sfp_lock_release>
 8006290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006298:	6025      	str	r5, [r4, #0]
 800629a:	61a5      	str	r5, [r4, #24]
 800629c:	2208      	movs	r2, #8
 800629e:	4629      	mov	r1, r5
 80062a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062a4:	f7fe fa46 	bl	8004734 <memset>
 80062a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062b0:	4620      	mov	r0, r4
 80062b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062b4:	3468      	adds	r4, #104	; 0x68
 80062b6:	e7d9      	b.n	800626c <__sfp+0x1c>
 80062b8:	2104      	movs	r1, #4
 80062ba:	4638      	mov	r0, r7
 80062bc:	f7ff ff62 	bl	8006184 <__sfmoreglue>
 80062c0:	4604      	mov	r4, r0
 80062c2:	6030      	str	r0, [r6, #0]
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d1d5      	bne.n	8006274 <__sfp+0x24>
 80062c8:	f7ff ff78 	bl	80061bc <__sfp_lock_release>
 80062cc:	230c      	movs	r3, #12
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	e7ee      	b.n	80062b0 <__sfp+0x60>
 80062d2:	bf00      	nop
 80062d4:	0800838c 	.word	0x0800838c
 80062d8:	ffff0001 	.word	0xffff0001

080062dc <_fwalk_reent>:
 80062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e0:	4606      	mov	r6, r0
 80062e2:	4688      	mov	r8, r1
 80062e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062e8:	2700      	movs	r7, #0
 80062ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062ee:	f1b9 0901 	subs.w	r9, r9, #1
 80062f2:	d505      	bpl.n	8006300 <_fwalk_reent+0x24>
 80062f4:	6824      	ldr	r4, [r4, #0]
 80062f6:	2c00      	cmp	r4, #0
 80062f8:	d1f7      	bne.n	80062ea <_fwalk_reent+0xe>
 80062fa:	4638      	mov	r0, r7
 80062fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006300:	89ab      	ldrh	r3, [r5, #12]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d907      	bls.n	8006316 <_fwalk_reent+0x3a>
 8006306:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800630a:	3301      	adds	r3, #1
 800630c:	d003      	beq.n	8006316 <_fwalk_reent+0x3a>
 800630e:	4629      	mov	r1, r5
 8006310:	4630      	mov	r0, r6
 8006312:	47c0      	blx	r8
 8006314:	4307      	orrs	r7, r0
 8006316:	3568      	adds	r5, #104	; 0x68
 8006318:	e7e9      	b.n	80062ee <_fwalk_reent+0x12>
	...

0800631c <_localeconv_r>:
 800631c:	4800      	ldr	r0, [pc, #0]	; (8006320 <_localeconv_r+0x4>)
 800631e:	4770      	bx	lr
 8006320:	20000168 	.word	0x20000168

08006324 <__retarget_lock_init_recursive>:
 8006324:	4770      	bx	lr

08006326 <__retarget_lock_acquire_recursive>:
 8006326:	4770      	bx	lr

08006328 <__retarget_lock_release_recursive>:
 8006328:	4770      	bx	lr

0800632a <__swhatbuf_r>:
 800632a:	b570      	push	{r4, r5, r6, lr}
 800632c:	460e      	mov	r6, r1
 800632e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006332:	2900      	cmp	r1, #0
 8006334:	b096      	sub	sp, #88	; 0x58
 8006336:	4614      	mov	r4, r2
 8006338:	461d      	mov	r5, r3
 800633a:	da08      	bge.n	800634e <__swhatbuf_r+0x24>
 800633c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	602a      	str	r2, [r5, #0]
 8006344:	061a      	lsls	r2, r3, #24
 8006346:	d410      	bmi.n	800636a <__swhatbuf_r+0x40>
 8006348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800634c:	e00e      	b.n	800636c <__swhatbuf_r+0x42>
 800634e:	466a      	mov	r2, sp
 8006350:	f000 fee0 	bl	8007114 <_fstat_r>
 8006354:	2800      	cmp	r0, #0
 8006356:	dbf1      	blt.n	800633c <__swhatbuf_r+0x12>
 8006358:	9a01      	ldr	r2, [sp, #4]
 800635a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800635e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006362:	425a      	negs	r2, r3
 8006364:	415a      	adcs	r2, r3
 8006366:	602a      	str	r2, [r5, #0]
 8006368:	e7ee      	b.n	8006348 <__swhatbuf_r+0x1e>
 800636a:	2340      	movs	r3, #64	; 0x40
 800636c:	2000      	movs	r0, #0
 800636e:	6023      	str	r3, [r4, #0]
 8006370:	b016      	add	sp, #88	; 0x58
 8006372:	bd70      	pop	{r4, r5, r6, pc}

08006374 <__smakebuf_r>:
 8006374:	898b      	ldrh	r3, [r1, #12]
 8006376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006378:	079d      	lsls	r5, r3, #30
 800637a:	4606      	mov	r6, r0
 800637c:	460c      	mov	r4, r1
 800637e:	d507      	bpl.n	8006390 <__smakebuf_r+0x1c>
 8006380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006384:	6023      	str	r3, [r4, #0]
 8006386:	6123      	str	r3, [r4, #16]
 8006388:	2301      	movs	r3, #1
 800638a:	6163      	str	r3, [r4, #20]
 800638c:	b002      	add	sp, #8
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	ab01      	add	r3, sp, #4
 8006392:	466a      	mov	r2, sp
 8006394:	f7ff ffc9 	bl	800632a <__swhatbuf_r>
 8006398:	9900      	ldr	r1, [sp, #0]
 800639a:	4605      	mov	r5, r0
 800639c:	4630      	mov	r0, r6
 800639e:	f000 fc45 	bl	8006c2c <_malloc_r>
 80063a2:	b948      	cbnz	r0, 80063b8 <__smakebuf_r+0x44>
 80063a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063a8:	059a      	lsls	r2, r3, #22
 80063aa:	d4ef      	bmi.n	800638c <__smakebuf_r+0x18>
 80063ac:	f023 0303 	bic.w	r3, r3, #3
 80063b0:	f043 0302 	orr.w	r3, r3, #2
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	e7e3      	b.n	8006380 <__smakebuf_r+0xc>
 80063b8:	4b0d      	ldr	r3, [pc, #52]	; (80063f0 <__smakebuf_r+0x7c>)
 80063ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80063bc:	89a3      	ldrh	r3, [r4, #12]
 80063be:	6020      	str	r0, [r4, #0]
 80063c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063c4:	81a3      	strh	r3, [r4, #12]
 80063c6:	9b00      	ldr	r3, [sp, #0]
 80063c8:	6163      	str	r3, [r4, #20]
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	6120      	str	r0, [r4, #16]
 80063ce:	b15b      	cbz	r3, 80063e8 <__smakebuf_r+0x74>
 80063d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063d4:	4630      	mov	r0, r6
 80063d6:	f000 feaf 	bl	8007138 <_isatty_r>
 80063da:	b128      	cbz	r0, 80063e8 <__smakebuf_r+0x74>
 80063dc:	89a3      	ldrh	r3, [r4, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	f043 0301 	orr.w	r3, r3, #1
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	89a0      	ldrh	r0, [r4, #12]
 80063ea:	4305      	orrs	r5, r0
 80063ec:	81a5      	strh	r5, [r4, #12]
 80063ee:	e7cd      	b.n	800638c <__smakebuf_r+0x18>
 80063f0:	08006179 	.word	0x08006179

080063f4 <malloc>:
 80063f4:	4b02      	ldr	r3, [pc, #8]	; (8006400 <malloc+0xc>)
 80063f6:	4601      	mov	r1, r0
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f000 bc17 	b.w	8006c2c <_malloc_r>
 80063fe:	bf00      	nop
 8006400:	20000014 	.word	0x20000014

08006404 <memcpy>:
 8006404:	440a      	add	r2, r1
 8006406:	4291      	cmp	r1, r2
 8006408:	f100 33ff 	add.w	r3, r0, #4294967295
 800640c:	d100      	bne.n	8006410 <memcpy+0xc>
 800640e:	4770      	bx	lr
 8006410:	b510      	push	{r4, lr}
 8006412:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006416:	f803 4f01 	strb.w	r4, [r3, #1]!
 800641a:	4291      	cmp	r1, r2
 800641c:	d1f9      	bne.n	8006412 <memcpy+0xe>
 800641e:	bd10      	pop	{r4, pc}

08006420 <_Balloc>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006424:	4604      	mov	r4, r0
 8006426:	460d      	mov	r5, r1
 8006428:	b976      	cbnz	r6, 8006448 <_Balloc+0x28>
 800642a:	2010      	movs	r0, #16
 800642c:	f7ff ffe2 	bl	80063f4 <malloc>
 8006430:	4602      	mov	r2, r0
 8006432:	6260      	str	r0, [r4, #36]	; 0x24
 8006434:	b920      	cbnz	r0, 8006440 <_Balloc+0x20>
 8006436:	4b18      	ldr	r3, [pc, #96]	; (8006498 <_Balloc+0x78>)
 8006438:	4818      	ldr	r0, [pc, #96]	; (800649c <_Balloc+0x7c>)
 800643a:	2166      	movs	r1, #102	; 0x66
 800643c:	f000 fe2a 	bl	8007094 <__assert_func>
 8006440:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006444:	6006      	str	r6, [r0, #0]
 8006446:	60c6      	str	r6, [r0, #12]
 8006448:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800644a:	68f3      	ldr	r3, [r6, #12]
 800644c:	b183      	cbz	r3, 8006470 <_Balloc+0x50>
 800644e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006456:	b9b8      	cbnz	r0, 8006488 <_Balloc+0x68>
 8006458:	2101      	movs	r1, #1
 800645a:	fa01 f605 	lsl.w	r6, r1, r5
 800645e:	1d72      	adds	r2, r6, #5
 8006460:	0092      	lsls	r2, r2, #2
 8006462:	4620      	mov	r0, r4
 8006464:	f000 fb60 	bl	8006b28 <_calloc_r>
 8006468:	b160      	cbz	r0, 8006484 <_Balloc+0x64>
 800646a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800646e:	e00e      	b.n	800648e <_Balloc+0x6e>
 8006470:	2221      	movs	r2, #33	; 0x21
 8006472:	2104      	movs	r1, #4
 8006474:	4620      	mov	r0, r4
 8006476:	f000 fb57 	bl	8006b28 <_calloc_r>
 800647a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800647c:	60f0      	str	r0, [r6, #12]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e4      	bne.n	800644e <_Balloc+0x2e>
 8006484:	2000      	movs	r0, #0
 8006486:	bd70      	pop	{r4, r5, r6, pc}
 8006488:	6802      	ldr	r2, [r0, #0]
 800648a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800648e:	2300      	movs	r3, #0
 8006490:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006494:	e7f7      	b.n	8006486 <_Balloc+0x66>
 8006496:	bf00      	nop
 8006498:	080083d1 	.word	0x080083d1
 800649c:	080084b4 	.word	0x080084b4

080064a0 <_Bfree>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064a4:	4605      	mov	r5, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	b976      	cbnz	r6, 80064c8 <_Bfree+0x28>
 80064aa:	2010      	movs	r0, #16
 80064ac:	f7ff ffa2 	bl	80063f4 <malloc>
 80064b0:	4602      	mov	r2, r0
 80064b2:	6268      	str	r0, [r5, #36]	; 0x24
 80064b4:	b920      	cbnz	r0, 80064c0 <_Bfree+0x20>
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <_Bfree+0x3c>)
 80064b8:	4809      	ldr	r0, [pc, #36]	; (80064e0 <_Bfree+0x40>)
 80064ba:	218a      	movs	r1, #138	; 0x8a
 80064bc:	f000 fdea 	bl	8007094 <__assert_func>
 80064c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064c4:	6006      	str	r6, [r0, #0]
 80064c6:	60c6      	str	r6, [r0, #12]
 80064c8:	b13c      	cbz	r4, 80064da <_Bfree+0x3a>
 80064ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064cc:	6862      	ldr	r2, [r4, #4]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064d4:	6021      	str	r1, [r4, #0]
 80064d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	080083d1 	.word	0x080083d1
 80064e0:	080084b4 	.word	0x080084b4

080064e4 <__multadd>:
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	690d      	ldr	r5, [r1, #16]
 80064ea:	4607      	mov	r7, r0
 80064ec:	460c      	mov	r4, r1
 80064ee:	461e      	mov	r6, r3
 80064f0:	f101 0c14 	add.w	ip, r1, #20
 80064f4:	2000      	movs	r0, #0
 80064f6:	f8dc 3000 	ldr.w	r3, [ip]
 80064fa:	b299      	uxth	r1, r3
 80064fc:	fb02 6101 	mla	r1, r2, r1, r6
 8006500:	0c1e      	lsrs	r6, r3, #16
 8006502:	0c0b      	lsrs	r3, r1, #16
 8006504:	fb02 3306 	mla	r3, r2, r6, r3
 8006508:	b289      	uxth	r1, r1
 800650a:	3001      	adds	r0, #1
 800650c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006510:	4285      	cmp	r5, r0
 8006512:	f84c 1b04 	str.w	r1, [ip], #4
 8006516:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800651a:	dcec      	bgt.n	80064f6 <__multadd+0x12>
 800651c:	b30e      	cbz	r6, 8006562 <__multadd+0x7e>
 800651e:	68a3      	ldr	r3, [r4, #8]
 8006520:	42ab      	cmp	r3, r5
 8006522:	dc19      	bgt.n	8006558 <__multadd+0x74>
 8006524:	6861      	ldr	r1, [r4, #4]
 8006526:	4638      	mov	r0, r7
 8006528:	3101      	adds	r1, #1
 800652a:	f7ff ff79 	bl	8006420 <_Balloc>
 800652e:	4680      	mov	r8, r0
 8006530:	b928      	cbnz	r0, 800653e <__multadd+0x5a>
 8006532:	4602      	mov	r2, r0
 8006534:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <__multadd+0x84>)
 8006536:	480d      	ldr	r0, [pc, #52]	; (800656c <__multadd+0x88>)
 8006538:	21b5      	movs	r1, #181	; 0xb5
 800653a:	f000 fdab 	bl	8007094 <__assert_func>
 800653e:	6922      	ldr	r2, [r4, #16]
 8006540:	3202      	adds	r2, #2
 8006542:	f104 010c 	add.w	r1, r4, #12
 8006546:	0092      	lsls	r2, r2, #2
 8006548:	300c      	adds	r0, #12
 800654a:	f7ff ff5b 	bl	8006404 <memcpy>
 800654e:	4621      	mov	r1, r4
 8006550:	4638      	mov	r0, r7
 8006552:	f7ff ffa5 	bl	80064a0 <_Bfree>
 8006556:	4644      	mov	r4, r8
 8006558:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800655c:	3501      	adds	r5, #1
 800655e:	615e      	str	r6, [r3, #20]
 8006560:	6125      	str	r5, [r4, #16]
 8006562:	4620      	mov	r0, r4
 8006564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006568:	08008443 	.word	0x08008443
 800656c:	080084b4 	.word	0x080084b4

08006570 <__hi0bits>:
 8006570:	0c03      	lsrs	r3, r0, #16
 8006572:	041b      	lsls	r3, r3, #16
 8006574:	b9d3      	cbnz	r3, 80065ac <__hi0bits+0x3c>
 8006576:	0400      	lsls	r0, r0, #16
 8006578:	2310      	movs	r3, #16
 800657a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800657e:	bf04      	itt	eq
 8006580:	0200      	lsleq	r0, r0, #8
 8006582:	3308      	addeq	r3, #8
 8006584:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006588:	bf04      	itt	eq
 800658a:	0100      	lsleq	r0, r0, #4
 800658c:	3304      	addeq	r3, #4
 800658e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006592:	bf04      	itt	eq
 8006594:	0080      	lsleq	r0, r0, #2
 8006596:	3302      	addeq	r3, #2
 8006598:	2800      	cmp	r0, #0
 800659a:	db05      	blt.n	80065a8 <__hi0bits+0x38>
 800659c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065a0:	f103 0301 	add.w	r3, r3, #1
 80065a4:	bf08      	it	eq
 80065a6:	2320      	moveq	r3, #32
 80065a8:	4618      	mov	r0, r3
 80065aa:	4770      	bx	lr
 80065ac:	2300      	movs	r3, #0
 80065ae:	e7e4      	b.n	800657a <__hi0bits+0xa>

080065b0 <__lo0bits>:
 80065b0:	6803      	ldr	r3, [r0, #0]
 80065b2:	f013 0207 	ands.w	r2, r3, #7
 80065b6:	4601      	mov	r1, r0
 80065b8:	d00b      	beq.n	80065d2 <__lo0bits+0x22>
 80065ba:	07da      	lsls	r2, r3, #31
 80065bc:	d423      	bmi.n	8006606 <__lo0bits+0x56>
 80065be:	0798      	lsls	r0, r3, #30
 80065c0:	bf49      	itett	mi
 80065c2:	085b      	lsrmi	r3, r3, #1
 80065c4:	089b      	lsrpl	r3, r3, #2
 80065c6:	2001      	movmi	r0, #1
 80065c8:	600b      	strmi	r3, [r1, #0]
 80065ca:	bf5c      	itt	pl
 80065cc:	600b      	strpl	r3, [r1, #0]
 80065ce:	2002      	movpl	r0, #2
 80065d0:	4770      	bx	lr
 80065d2:	b298      	uxth	r0, r3
 80065d4:	b9a8      	cbnz	r0, 8006602 <__lo0bits+0x52>
 80065d6:	0c1b      	lsrs	r3, r3, #16
 80065d8:	2010      	movs	r0, #16
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	b90a      	cbnz	r2, 80065e2 <__lo0bits+0x32>
 80065de:	3008      	adds	r0, #8
 80065e0:	0a1b      	lsrs	r3, r3, #8
 80065e2:	071a      	lsls	r2, r3, #28
 80065e4:	bf04      	itt	eq
 80065e6:	091b      	lsreq	r3, r3, #4
 80065e8:	3004      	addeq	r0, #4
 80065ea:	079a      	lsls	r2, r3, #30
 80065ec:	bf04      	itt	eq
 80065ee:	089b      	lsreq	r3, r3, #2
 80065f0:	3002      	addeq	r0, #2
 80065f2:	07da      	lsls	r2, r3, #31
 80065f4:	d403      	bmi.n	80065fe <__lo0bits+0x4e>
 80065f6:	085b      	lsrs	r3, r3, #1
 80065f8:	f100 0001 	add.w	r0, r0, #1
 80065fc:	d005      	beq.n	800660a <__lo0bits+0x5a>
 80065fe:	600b      	str	r3, [r1, #0]
 8006600:	4770      	bx	lr
 8006602:	4610      	mov	r0, r2
 8006604:	e7e9      	b.n	80065da <__lo0bits+0x2a>
 8006606:	2000      	movs	r0, #0
 8006608:	4770      	bx	lr
 800660a:	2020      	movs	r0, #32
 800660c:	4770      	bx	lr
	...

08006610 <__i2b>:
 8006610:	b510      	push	{r4, lr}
 8006612:	460c      	mov	r4, r1
 8006614:	2101      	movs	r1, #1
 8006616:	f7ff ff03 	bl	8006420 <_Balloc>
 800661a:	4602      	mov	r2, r0
 800661c:	b928      	cbnz	r0, 800662a <__i2b+0x1a>
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <__i2b+0x24>)
 8006620:	4805      	ldr	r0, [pc, #20]	; (8006638 <__i2b+0x28>)
 8006622:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006626:	f000 fd35 	bl	8007094 <__assert_func>
 800662a:	2301      	movs	r3, #1
 800662c:	6144      	str	r4, [r0, #20]
 800662e:	6103      	str	r3, [r0, #16]
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	08008443 	.word	0x08008443
 8006638:	080084b4 	.word	0x080084b4

0800663c <__multiply>:
 800663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	4691      	mov	r9, r2
 8006642:	690a      	ldr	r2, [r1, #16]
 8006644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006648:	429a      	cmp	r2, r3
 800664a:	bfb8      	it	lt
 800664c:	460b      	movlt	r3, r1
 800664e:	460c      	mov	r4, r1
 8006650:	bfbc      	itt	lt
 8006652:	464c      	movlt	r4, r9
 8006654:	4699      	movlt	r9, r3
 8006656:	6927      	ldr	r7, [r4, #16]
 8006658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800665c:	68a3      	ldr	r3, [r4, #8]
 800665e:	6861      	ldr	r1, [r4, #4]
 8006660:	eb07 060a 	add.w	r6, r7, sl
 8006664:	42b3      	cmp	r3, r6
 8006666:	b085      	sub	sp, #20
 8006668:	bfb8      	it	lt
 800666a:	3101      	addlt	r1, #1
 800666c:	f7ff fed8 	bl	8006420 <_Balloc>
 8006670:	b930      	cbnz	r0, 8006680 <__multiply+0x44>
 8006672:	4602      	mov	r2, r0
 8006674:	4b44      	ldr	r3, [pc, #272]	; (8006788 <__multiply+0x14c>)
 8006676:	4845      	ldr	r0, [pc, #276]	; (800678c <__multiply+0x150>)
 8006678:	f240 115d 	movw	r1, #349	; 0x15d
 800667c:	f000 fd0a 	bl	8007094 <__assert_func>
 8006680:	f100 0514 	add.w	r5, r0, #20
 8006684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006688:	462b      	mov	r3, r5
 800668a:	2200      	movs	r2, #0
 800668c:	4543      	cmp	r3, r8
 800668e:	d321      	bcc.n	80066d4 <__multiply+0x98>
 8006690:	f104 0314 	add.w	r3, r4, #20
 8006694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006698:	f109 0314 	add.w	r3, r9, #20
 800669c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066a0:	9202      	str	r2, [sp, #8]
 80066a2:	1b3a      	subs	r2, r7, r4
 80066a4:	3a15      	subs	r2, #21
 80066a6:	f022 0203 	bic.w	r2, r2, #3
 80066aa:	3204      	adds	r2, #4
 80066ac:	f104 0115 	add.w	r1, r4, #21
 80066b0:	428f      	cmp	r7, r1
 80066b2:	bf38      	it	cc
 80066b4:	2204      	movcc	r2, #4
 80066b6:	9201      	str	r2, [sp, #4]
 80066b8:	9a02      	ldr	r2, [sp, #8]
 80066ba:	9303      	str	r3, [sp, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d80c      	bhi.n	80066da <__multiply+0x9e>
 80066c0:	2e00      	cmp	r6, #0
 80066c2:	dd03      	ble.n	80066cc <__multiply+0x90>
 80066c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d05a      	beq.n	8006782 <__multiply+0x146>
 80066cc:	6106      	str	r6, [r0, #16]
 80066ce:	b005      	add	sp, #20
 80066d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d4:	f843 2b04 	str.w	r2, [r3], #4
 80066d8:	e7d8      	b.n	800668c <__multiply+0x50>
 80066da:	f8b3 a000 	ldrh.w	sl, [r3]
 80066de:	f1ba 0f00 	cmp.w	sl, #0
 80066e2:	d024      	beq.n	800672e <__multiply+0xf2>
 80066e4:	f104 0e14 	add.w	lr, r4, #20
 80066e8:	46a9      	mov	r9, r5
 80066ea:	f04f 0c00 	mov.w	ip, #0
 80066ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066f2:	f8d9 1000 	ldr.w	r1, [r9]
 80066f6:	fa1f fb82 	uxth.w	fp, r2
 80066fa:	b289      	uxth	r1, r1
 80066fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006704:	f8d9 2000 	ldr.w	r2, [r9]
 8006708:	4461      	add	r1, ip
 800670a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800670e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006716:	b289      	uxth	r1, r1
 8006718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800671c:	4577      	cmp	r7, lr
 800671e:	f849 1b04 	str.w	r1, [r9], #4
 8006722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006726:	d8e2      	bhi.n	80066ee <__multiply+0xb2>
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	f845 c002 	str.w	ip, [r5, r2]
 800672e:	9a03      	ldr	r2, [sp, #12]
 8006730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006734:	3304      	adds	r3, #4
 8006736:	f1b9 0f00 	cmp.w	r9, #0
 800673a:	d020      	beq.n	800677e <__multiply+0x142>
 800673c:	6829      	ldr	r1, [r5, #0]
 800673e:	f104 0c14 	add.w	ip, r4, #20
 8006742:	46ae      	mov	lr, r5
 8006744:	f04f 0a00 	mov.w	sl, #0
 8006748:	f8bc b000 	ldrh.w	fp, [ip]
 800674c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006750:	fb09 220b 	mla	r2, r9, fp, r2
 8006754:	4492      	add	sl, r2
 8006756:	b289      	uxth	r1, r1
 8006758:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800675c:	f84e 1b04 	str.w	r1, [lr], #4
 8006760:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006764:	f8be 1000 	ldrh.w	r1, [lr]
 8006768:	0c12      	lsrs	r2, r2, #16
 800676a:	fb09 1102 	mla	r1, r9, r2, r1
 800676e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006772:	4567      	cmp	r7, ip
 8006774:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006778:	d8e6      	bhi.n	8006748 <__multiply+0x10c>
 800677a:	9a01      	ldr	r2, [sp, #4]
 800677c:	50a9      	str	r1, [r5, r2]
 800677e:	3504      	adds	r5, #4
 8006780:	e79a      	b.n	80066b8 <__multiply+0x7c>
 8006782:	3e01      	subs	r6, #1
 8006784:	e79c      	b.n	80066c0 <__multiply+0x84>
 8006786:	bf00      	nop
 8006788:	08008443 	.word	0x08008443
 800678c:	080084b4 	.word	0x080084b4

08006790 <__pow5mult>:
 8006790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006794:	4615      	mov	r5, r2
 8006796:	f012 0203 	ands.w	r2, r2, #3
 800679a:	4606      	mov	r6, r0
 800679c:	460f      	mov	r7, r1
 800679e:	d007      	beq.n	80067b0 <__pow5mult+0x20>
 80067a0:	4c25      	ldr	r4, [pc, #148]	; (8006838 <__pow5mult+0xa8>)
 80067a2:	3a01      	subs	r2, #1
 80067a4:	2300      	movs	r3, #0
 80067a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067aa:	f7ff fe9b 	bl	80064e4 <__multadd>
 80067ae:	4607      	mov	r7, r0
 80067b0:	10ad      	asrs	r5, r5, #2
 80067b2:	d03d      	beq.n	8006830 <__pow5mult+0xa0>
 80067b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80067b6:	b97c      	cbnz	r4, 80067d8 <__pow5mult+0x48>
 80067b8:	2010      	movs	r0, #16
 80067ba:	f7ff fe1b 	bl	80063f4 <malloc>
 80067be:	4602      	mov	r2, r0
 80067c0:	6270      	str	r0, [r6, #36]	; 0x24
 80067c2:	b928      	cbnz	r0, 80067d0 <__pow5mult+0x40>
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <__pow5mult+0xac>)
 80067c6:	481e      	ldr	r0, [pc, #120]	; (8006840 <__pow5mult+0xb0>)
 80067c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067cc:	f000 fc62 	bl	8007094 <__assert_func>
 80067d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067d4:	6004      	str	r4, [r0, #0]
 80067d6:	60c4      	str	r4, [r0, #12]
 80067d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067e0:	b94c      	cbnz	r4, 80067f6 <__pow5mult+0x66>
 80067e2:	f240 2171 	movw	r1, #625	; 0x271
 80067e6:	4630      	mov	r0, r6
 80067e8:	f7ff ff12 	bl	8006610 <__i2b>
 80067ec:	2300      	movs	r3, #0
 80067ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80067f2:	4604      	mov	r4, r0
 80067f4:	6003      	str	r3, [r0, #0]
 80067f6:	f04f 0900 	mov.w	r9, #0
 80067fa:	07eb      	lsls	r3, r5, #31
 80067fc:	d50a      	bpl.n	8006814 <__pow5mult+0x84>
 80067fe:	4639      	mov	r1, r7
 8006800:	4622      	mov	r2, r4
 8006802:	4630      	mov	r0, r6
 8006804:	f7ff ff1a 	bl	800663c <__multiply>
 8006808:	4639      	mov	r1, r7
 800680a:	4680      	mov	r8, r0
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff fe47 	bl	80064a0 <_Bfree>
 8006812:	4647      	mov	r7, r8
 8006814:	106d      	asrs	r5, r5, #1
 8006816:	d00b      	beq.n	8006830 <__pow5mult+0xa0>
 8006818:	6820      	ldr	r0, [r4, #0]
 800681a:	b938      	cbnz	r0, 800682c <__pow5mult+0x9c>
 800681c:	4622      	mov	r2, r4
 800681e:	4621      	mov	r1, r4
 8006820:	4630      	mov	r0, r6
 8006822:	f7ff ff0b 	bl	800663c <__multiply>
 8006826:	6020      	str	r0, [r4, #0]
 8006828:	f8c0 9000 	str.w	r9, [r0]
 800682c:	4604      	mov	r4, r0
 800682e:	e7e4      	b.n	80067fa <__pow5mult+0x6a>
 8006830:	4638      	mov	r0, r7
 8006832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006836:	bf00      	nop
 8006838:	08008600 	.word	0x08008600
 800683c:	080083d1 	.word	0x080083d1
 8006840:	080084b4 	.word	0x080084b4

08006844 <__lshift>:
 8006844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006848:	460c      	mov	r4, r1
 800684a:	6849      	ldr	r1, [r1, #4]
 800684c:	6923      	ldr	r3, [r4, #16]
 800684e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006852:	68a3      	ldr	r3, [r4, #8]
 8006854:	4607      	mov	r7, r0
 8006856:	4691      	mov	r9, r2
 8006858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800685c:	f108 0601 	add.w	r6, r8, #1
 8006860:	42b3      	cmp	r3, r6
 8006862:	db0b      	blt.n	800687c <__lshift+0x38>
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fddb 	bl	8006420 <_Balloc>
 800686a:	4605      	mov	r5, r0
 800686c:	b948      	cbnz	r0, 8006882 <__lshift+0x3e>
 800686e:	4602      	mov	r2, r0
 8006870:	4b2a      	ldr	r3, [pc, #168]	; (800691c <__lshift+0xd8>)
 8006872:	482b      	ldr	r0, [pc, #172]	; (8006920 <__lshift+0xdc>)
 8006874:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006878:	f000 fc0c 	bl	8007094 <__assert_func>
 800687c:	3101      	adds	r1, #1
 800687e:	005b      	lsls	r3, r3, #1
 8006880:	e7ee      	b.n	8006860 <__lshift+0x1c>
 8006882:	2300      	movs	r3, #0
 8006884:	f100 0114 	add.w	r1, r0, #20
 8006888:	f100 0210 	add.w	r2, r0, #16
 800688c:	4618      	mov	r0, r3
 800688e:	4553      	cmp	r3, sl
 8006890:	db37      	blt.n	8006902 <__lshift+0xbe>
 8006892:	6920      	ldr	r0, [r4, #16]
 8006894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006898:	f104 0314 	add.w	r3, r4, #20
 800689c:	f019 091f 	ands.w	r9, r9, #31
 80068a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80068a8:	d02f      	beq.n	800690a <__lshift+0xc6>
 80068aa:	f1c9 0e20 	rsb	lr, r9, #32
 80068ae:	468a      	mov	sl, r1
 80068b0:	f04f 0c00 	mov.w	ip, #0
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	fa02 f209 	lsl.w	r2, r2, r9
 80068ba:	ea42 020c 	orr.w	r2, r2, ip
 80068be:	f84a 2b04 	str.w	r2, [sl], #4
 80068c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c6:	4298      	cmp	r0, r3
 80068c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80068cc:	d8f2      	bhi.n	80068b4 <__lshift+0x70>
 80068ce:	1b03      	subs	r3, r0, r4
 80068d0:	3b15      	subs	r3, #21
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	3304      	adds	r3, #4
 80068d8:	f104 0215 	add.w	r2, r4, #21
 80068dc:	4290      	cmp	r0, r2
 80068de:	bf38      	it	cc
 80068e0:	2304      	movcc	r3, #4
 80068e2:	f841 c003 	str.w	ip, [r1, r3]
 80068e6:	f1bc 0f00 	cmp.w	ip, #0
 80068ea:	d001      	beq.n	80068f0 <__lshift+0xac>
 80068ec:	f108 0602 	add.w	r6, r8, #2
 80068f0:	3e01      	subs	r6, #1
 80068f2:	4638      	mov	r0, r7
 80068f4:	612e      	str	r6, [r5, #16]
 80068f6:	4621      	mov	r1, r4
 80068f8:	f7ff fdd2 	bl	80064a0 <_Bfree>
 80068fc:	4628      	mov	r0, r5
 80068fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006902:	f842 0f04 	str.w	r0, [r2, #4]!
 8006906:	3301      	adds	r3, #1
 8006908:	e7c1      	b.n	800688e <__lshift+0x4a>
 800690a:	3904      	subs	r1, #4
 800690c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006910:	f841 2f04 	str.w	r2, [r1, #4]!
 8006914:	4298      	cmp	r0, r3
 8006916:	d8f9      	bhi.n	800690c <__lshift+0xc8>
 8006918:	e7ea      	b.n	80068f0 <__lshift+0xac>
 800691a:	bf00      	nop
 800691c:	08008443 	.word	0x08008443
 8006920:	080084b4 	.word	0x080084b4

08006924 <__mcmp>:
 8006924:	b530      	push	{r4, r5, lr}
 8006926:	6902      	ldr	r2, [r0, #16]
 8006928:	690c      	ldr	r4, [r1, #16]
 800692a:	1b12      	subs	r2, r2, r4
 800692c:	d10e      	bne.n	800694c <__mcmp+0x28>
 800692e:	f100 0314 	add.w	r3, r0, #20
 8006932:	3114      	adds	r1, #20
 8006934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800693c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006944:	42a5      	cmp	r5, r4
 8006946:	d003      	beq.n	8006950 <__mcmp+0x2c>
 8006948:	d305      	bcc.n	8006956 <__mcmp+0x32>
 800694a:	2201      	movs	r2, #1
 800694c:	4610      	mov	r0, r2
 800694e:	bd30      	pop	{r4, r5, pc}
 8006950:	4283      	cmp	r3, r0
 8006952:	d3f3      	bcc.n	800693c <__mcmp+0x18>
 8006954:	e7fa      	b.n	800694c <__mcmp+0x28>
 8006956:	f04f 32ff 	mov.w	r2, #4294967295
 800695a:	e7f7      	b.n	800694c <__mcmp+0x28>

0800695c <__mdiff>:
 800695c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006960:	460c      	mov	r4, r1
 8006962:	4606      	mov	r6, r0
 8006964:	4611      	mov	r1, r2
 8006966:	4620      	mov	r0, r4
 8006968:	4690      	mov	r8, r2
 800696a:	f7ff ffdb 	bl	8006924 <__mcmp>
 800696e:	1e05      	subs	r5, r0, #0
 8006970:	d110      	bne.n	8006994 <__mdiff+0x38>
 8006972:	4629      	mov	r1, r5
 8006974:	4630      	mov	r0, r6
 8006976:	f7ff fd53 	bl	8006420 <_Balloc>
 800697a:	b930      	cbnz	r0, 800698a <__mdiff+0x2e>
 800697c:	4b3a      	ldr	r3, [pc, #232]	; (8006a68 <__mdiff+0x10c>)
 800697e:	4602      	mov	r2, r0
 8006980:	f240 2132 	movw	r1, #562	; 0x232
 8006984:	4839      	ldr	r0, [pc, #228]	; (8006a6c <__mdiff+0x110>)
 8006986:	f000 fb85 	bl	8007094 <__assert_func>
 800698a:	2301      	movs	r3, #1
 800698c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	bfa4      	itt	ge
 8006996:	4643      	movge	r3, r8
 8006998:	46a0      	movge	r8, r4
 800699a:	4630      	mov	r0, r6
 800699c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069a0:	bfa6      	itte	ge
 80069a2:	461c      	movge	r4, r3
 80069a4:	2500      	movge	r5, #0
 80069a6:	2501      	movlt	r5, #1
 80069a8:	f7ff fd3a 	bl	8006420 <_Balloc>
 80069ac:	b920      	cbnz	r0, 80069b8 <__mdiff+0x5c>
 80069ae:	4b2e      	ldr	r3, [pc, #184]	; (8006a68 <__mdiff+0x10c>)
 80069b0:	4602      	mov	r2, r0
 80069b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80069b6:	e7e5      	b.n	8006984 <__mdiff+0x28>
 80069b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80069bc:	6926      	ldr	r6, [r4, #16]
 80069be:	60c5      	str	r5, [r0, #12]
 80069c0:	f104 0914 	add.w	r9, r4, #20
 80069c4:	f108 0514 	add.w	r5, r8, #20
 80069c8:	f100 0e14 	add.w	lr, r0, #20
 80069cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80069d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069d4:	f108 0210 	add.w	r2, r8, #16
 80069d8:	46f2      	mov	sl, lr
 80069da:	2100      	movs	r1, #0
 80069dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80069e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069e4:	fa1f f883 	uxth.w	r8, r3
 80069e8:	fa11 f18b 	uxtah	r1, r1, fp
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	eba1 0808 	sub.w	r8, r1, r8
 80069f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069fa:	fa1f f888 	uxth.w	r8, r8
 80069fe:	1419      	asrs	r1, r3, #16
 8006a00:	454e      	cmp	r6, r9
 8006a02:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a06:	f84a 3b04 	str.w	r3, [sl], #4
 8006a0a:	d8e7      	bhi.n	80069dc <__mdiff+0x80>
 8006a0c:	1b33      	subs	r3, r6, r4
 8006a0e:	3b15      	subs	r3, #21
 8006a10:	f023 0303 	bic.w	r3, r3, #3
 8006a14:	3304      	adds	r3, #4
 8006a16:	3415      	adds	r4, #21
 8006a18:	42a6      	cmp	r6, r4
 8006a1a:	bf38      	it	cc
 8006a1c:	2304      	movcc	r3, #4
 8006a1e:	441d      	add	r5, r3
 8006a20:	4473      	add	r3, lr
 8006a22:	469e      	mov	lr, r3
 8006a24:	462e      	mov	r6, r5
 8006a26:	4566      	cmp	r6, ip
 8006a28:	d30e      	bcc.n	8006a48 <__mdiff+0xec>
 8006a2a:	f10c 0203 	add.w	r2, ip, #3
 8006a2e:	1b52      	subs	r2, r2, r5
 8006a30:	f022 0203 	bic.w	r2, r2, #3
 8006a34:	3d03      	subs	r5, #3
 8006a36:	45ac      	cmp	ip, r5
 8006a38:	bf38      	it	cc
 8006a3a:	2200      	movcc	r2, #0
 8006a3c:	441a      	add	r2, r3
 8006a3e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a42:	b17b      	cbz	r3, 8006a64 <__mdiff+0x108>
 8006a44:	6107      	str	r7, [r0, #16]
 8006a46:	e7a3      	b.n	8006990 <__mdiff+0x34>
 8006a48:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a4c:	fa11 f288 	uxtah	r2, r1, r8
 8006a50:	1414      	asrs	r4, r2, #16
 8006a52:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a56:	b292      	uxth	r2, r2
 8006a58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a5c:	f84e 2b04 	str.w	r2, [lr], #4
 8006a60:	1421      	asrs	r1, r4, #16
 8006a62:	e7e0      	b.n	8006a26 <__mdiff+0xca>
 8006a64:	3f01      	subs	r7, #1
 8006a66:	e7ea      	b.n	8006a3e <__mdiff+0xe2>
 8006a68:	08008443 	.word	0x08008443
 8006a6c:	080084b4 	.word	0x080084b4

08006a70 <__d2b>:
 8006a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	4689      	mov	r9, r1
 8006a76:	2101      	movs	r1, #1
 8006a78:	ec57 6b10 	vmov	r6, r7, d0
 8006a7c:	4690      	mov	r8, r2
 8006a7e:	f7ff fccf 	bl	8006420 <_Balloc>
 8006a82:	4604      	mov	r4, r0
 8006a84:	b930      	cbnz	r0, 8006a94 <__d2b+0x24>
 8006a86:	4602      	mov	r2, r0
 8006a88:	4b25      	ldr	r3, [pc, #148]	; (8006b20 <__d2b+0xb0>)
 8006a8a:	4826      	ldr	r0, [pc, #152]	; (8006b24 <__d2b+0xb4>)
 8006a8c:	f240 310a 	movw	r1, #778	; 0x30a
 8006a90:	f000 fb00 	bl	8007094 <__assert_func>
 8006a94:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a9c:	bb35      	cbnz	r5, 8006aec <__d2b+0x7c>
 8006a9e:	2e00      	cmp	r6, #0
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	d028      	beq.n	8006af6 <__d2b+0x86>
 8006aa4:	4668      	mov	r0, sp
 8006aa6:	9600      	str	r6, [sp, #0]
 8006aa8:	f7ff fd82 	bl	80065b0 <__lo0bits>
 8006aac:	9900      	ldr	r1, [sp, #0]
 8006aae:	b300      	cbz	r0, 8006af2 <__d2b+0x82>
 8006ab0:	9a01      	ldr	r2, [sp, #4]
 8006ab2:	f1c0 0320 	rsb	r3, r0, #32
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	430b      	orrs	r3, r1
 8006abc:	40c2      	lsrs	r2, r0
 8006abe:	6163      	str	r3, [r4, #20]
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	9b01      	ldr	r3, [sp, #4]
 8006ac4:	61a3      	str	r3, [r4, #24]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	bf14      	ite	ne
 8006aca:	2202      	movne	r2, #2
 8006acc:	2201      	moveq	r2, #1
 8006ace:	6122      	str	r2, [r4, #16]
 8006ad0:	b1d5      	cbz	r5, 8006b08 <__d2b+0x98>
 8006ad2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ad6:	4405      	add	r5, r0
 8006ad8:	f8c9 5000 	str.w	r5, [r9]
 8006adc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ae0:	f8c8 0000 	str.w	r0, [r8]
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	b003      	add	sp, #12
 8006ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af0:	e7d5      	b.n	8006a9e <__d2b+0x2e>
 8006af2:	6161      	str	r1, [r4, #20]
 8006af4:	e7e5      	b.n	8006ac2 <__d2b+0x52>
 8006af6:	a801      	add	r0, sp, #4
 8006af8:	f7ff fd5a 	bl	80065b0 <__lo0bits>
 8006afc:	9b01      	ldr	r3, [sp, #4]
 8006afe:	6163      	str	r3, [r4, #20]
 8006b00:	2201      	movs	r2, #1
 8006b02:	6122      	str	r2, [r4, #16]
 8006b04:	3020      	adds	r0, #32
 8006b06:	e7e3      	b.n	8006ad0 <__d2b+0x60>
 8006b08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b10:	f8c9 0000 	str.w	r0, [r9]
 8006b14:	6918      	ldr	r0, [r3, #16]
 8006b16:	f7ff fd2b 	bl	8006570 <__hi0bits>
 8006b1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b1e:	e7df      	b.n	8006ae0 <__d2b+0x70>
 8006b20:	08008443 	.word	0x08008443
 8006b24:	080084b4 	.word	0x080084b4

08006b28 <_calloc_r>:
 8006b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b2a:	fba1 2402 	umull	r2, r4, r1, r2
 8006b2e:	b94c      	cbnz	r4, 8006b44 <_calloc_r+0x1c>
 8006b30:	4611      	mov	r1, r2
 8006b32:	9201      	str	r2, [sp, #4]
 8006b34:	f000 f87a 	bl	8006c2c <_malloc_r>
 8006b38:	9a01      	ldr	r2, [sp, #4]
 8006b3a:	4605      	mov	r5, r0
 8006b3c:	b930      	cbnz	r0, 8006b4c <_calloc_r+0x24>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	b003      	add	sp, #12
 8006b42:	bd30      	pop	{r4, r5, pc}
 8006b44:	220c      	movs	r2, #12
 8006b46:	6002      	str	r2, [r0, #0]
 8006b48:	2500      	movs	r5, #0
 8006b4a:	e7f8      	b.n	8006b3e <_calloc_r+0x16>
 8006b4c:	4621      	mov	r1, r4
 8006b4e:	f7fd fdf1 	bl	8004734 <memset>
 8006b52:	e7f4      	b.n	8006b3e <_calloc_r+0x16>

08006b54 <_free_r>:
 8006b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b56:	2900      	cmp	r1, #0
 8006b58:	d044      	beq.n	8006be4 <_free_r+0x90>
 8006b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b5e:	9001      	str	r0, [sp, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f1a1 0404 	sub.w	r4, r1, #4
 8006b66:	bfb8      	it	lt
 8006b68:	18e4      	addlt	r4, r4, r3
 8006b6a:	f000 fb19 	bl	80071a0 <__malloc_lock>
 8006b6e:	4a1e      	ldr	r2, [pc, #120]	; (8006be8 <_free_r+0x94>)
 8006b70:	9801      	ldr	r0, [sp, #4]
 8006b72:	6813      	ldr	r3, [r2, #0]
 8006b74:	b933      	cbnz	r3, 8006b84 <_free_r+0x30>
 8006b76:	6063      	str	r3, [r4, #4]
 8006b78:	6014      	str	r4, [r2, #0]
 8006b7a:	b003      	add	sp, #12
 8006b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b80:	f000 bb14 	b.w	80071ac <__malloc_unlock>
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d908      	bls.n	8006b9a <_free_r+0x46>
 8006b88:	6825      	ldr	r5, [r4, #0]
 8006b8a:	1961      	adds	r1, r4, r5
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	bf01      	itttt	eq
 8006b90:	6819      	ldreq	r1, [r3, #0]
 8006b92:	685b      	ldreq	r3, [r3, #4]
 8006b94:	1949      	addeq	r1, r1, r5
 8006b96:	6021      	streq	r1, [r4, #0]
 8006b98:	e7ed      	b.n	8006b76 <_free_r+0x22>
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	b10b      	cbz	r3, 8006ba4 <_free_r+0x50>
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d9fa      	bls.n	8006b9a <_free_r+0x46>
 8006ba4:	6811      	ldr	r1, [r2, #0]
 8006ba6:	1855      	adds	r5, r2, r1
 8006ba8:	42a5      	cmp	r5, r4
 8006baa:	d10b      	bne.n	8006bc4 <_free_r+0x70>
 8006bac:	6824      	ldr	r4, [r4, #0]
 8006bae:	4421      	add	r1, r4
 8006bb0:	1854      	adds	r4, r2, r1
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	6011      	str	r1, [r2, #0]
 8006bb6:	d1e0      	bne.n	8006b7a <_free_r+0x26>
 8006bb8:	681c      	ldr	r4, [r3, #0]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	6053      	str	r3, [r2, #4]
 8006bbe:	4421      	add	r1, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	e7da      	b.n	8006b7a <_free_r+0x26>
 8006bc4:	d902      	bls.n	8006bcc <_free_r+0x78>
 8006bc6:	230c      	movs	r3, #12
 8006bc8:	6003      	str	r3, [r0, #0]
 8006bca:	e7d6      	b.n	8006b7a <_free_r+0x26>
 8006bcc:	6825      	ldr	r5, [r4, #0]
 8006bce:	1961      	adds	r1, r4, r5
 8006bd0:	428b      	cmp	r3, r1
 8006bd2:	bf04      	itt	eq
 8006bd4:	6819      	ldreq	r1, [r3, #0]
 8006bd6:	685b      	ldreq	r3, [r3, #4]
 8006bd8:	6063      	str	r3, [r4, #4]
 8006bda:	bf04      	itt	eq
 8006bdc:	1949      	addeq	r1, r1, r5
 8006bde:	6021      	streq	r1, [r4, #0]
 8006be0:	6054      	str	r4, [r2, #4]
 8006be2:	e7ca      	b.n	8006b7a <_free_r+0x26>
 8006be4:	b003      	add	sp, #12
 8006be6:	bd30      	pop	{r4, r5, pc}
 8006be8:	200003e4 	.word	0x200003e4

08006bec <sbrk_aligned>:
 8006bec:	b570      	push	{r4, r5, r6, lr}
 8006bee:	4e0e      	ldr	r6, [pc, #56]	; (8006c28 <sbrk_aligned+0x3c>)
 8006bf0:	460c      	mov	r4, r1
 8006bf2:	6831      	ldr	r1, [r6, #0]
 8006bf4:	4605      	mov	r5, r0
 8006bf6:	b911      	cbnz	r1, 8006bfe <sbrk_aligned+0x12>
 8006bf8:	f000 f9e6 	bl	8006fc8 <_sbrk_r>
 8006bfc:	6030      	str	r0, [r6, #0]
 8006bfe:	4621      	mov	r1, r4
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f9e1 	bl	8006fc8 <_sbrk_r>
 8006c06:	1c43      	adds	r3, r0, #1
 8006c08:	d00a      	beq.n	8006c20 <sbrk_aligned+0x34>
 8006c0a:	1cc4      	adds	r4, r0, #3
 8006c0c:	f024 0403 	bic.w	r4, r4, #3
 8006c10:	42a0      	cmp	r0, r4
 8006c12:	d007      	beq.n	8006c24 <sbrk_aligned+0x38>
 8006c14:	1a21      	subs	r1, r4, r0
 8006c16:	4628      	mov	r0, r5
 8006c18:	f000 f9d6 	bl	8006fc8 <_sbrk_r>
 8006c1c:	3001      	adds	r0, #1
 8006c1e:	d101      	bne.n	8006c24 <sbrk_aligned+0x38>
 8006c20:	f04f 34ff 	mov.w	r4, #4294967295
 8006c24:	4620      	mov	r0, r4
 8006c26:	bd70      	pop	{r4, r5, r6, pc}
 8006c28:	200003e8 	.word	0x200003e8

08006c2c <_malloc_r>:
 8006c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c30:	1ccd      	adds	r5, r1, #3
 8006c32:	f025 0503 	bic.w	r5, r5, #3
 8006c36:	3508      	adds	r5, #8
 8006c38:	2d0c      	cmp	r5, #12
 8006c3a:	bf38      	it	cc
 8006c3c:	250c      	movcc	r5, #12
 8006c3e:	2d00      	cmp	r5, #0
 8006c40:	4607      	mov	r7, r0
 8006c42:	db01      	blt.n	8006c48 <_malloc_r+0x1c>
 8006c44:	42a9      	cmp	r1, r5
 8006c46:	d905      	bls.n	8006c54 <_malloc_r+0x28>
 8006c48:	230c      	movs	r3, #12
 8006c4a:	603b      	str	r3, [r7, #0]
 8006c4c:	2600      	movs	r6, #0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c54:	4e2e      	ldr	r6, [pc, #184]	; (8006d10 <_malloc_r+0xe4>)
 8006c56:	f000 faa3 	bl	80071a0 <__malloc_lock>
 8006c5a:	6833      	ldr	r3, [r6, #0]
 8006c5c:	461c      	mov	r4, r3
 8006c5e:	bb34      	cbnz	r4, 8006cae <_malloc_r+0x82>
 8006c60:	4629      	mov	r1, r5
 8006c62:	4638      	mov	r0, r7
 8006c64:	f7ff ffc2 	bl	8006bec <sbrk_aligned>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	d14d      	bne.n	8006d0a <_malloc_r+0xde>
 8006c6e:	6834      	ldr	r4, [r6, #0]
 8006c70:	4626      	mov	r6, r4
 8006c72:	2e00      	cmp	r6, #0
 8006c74:	d140      	bne.n	8006cf8 <_malloc_r+0xcc>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	4631      	mov	r1, r6
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	eb04 0803 	add.w	r8, r4, r3
 8006c80:	f000 f9a2 	bl	8006fc8 <_sbrk_r>
 8006c84:	4580      	cmp	r8, r0
 8006c86:	d13a      	bne.n	8006cfe <_malloc_r+0xd2>
 8006c88:	6821      	ldr	r1, [r4, #0]
 8006c8a:	3503      	adds	r5, #3
 8006c8c:	1a6d      	subs	r5, r5, r1
 8006c8e:	f025 0503 	bic.w	r5, r5, #3
 8006c92:	3508      	adds	r5, #8
 8006c94:	2d0c      	cmp	r5, #12
 8006c96:	bf38      	it	cc
 8006c98:	250c      	movcc	r5, #12
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	f7ff ffa5 	bl	8006bec <sbrk_aligned>
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d02b      	beq.n	8006cfe <_malloc_r+0xd2>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	442b      	add	r3, r5
 8006caa:	6023      	str	r3, [r4, #0]
 8006cac:	e00e      	b.n	8006ccc <_malloc_r+0xa0>
 8006cae:	6822      	ldr	r2, [r4, #0]
 8006cb0:	1b52      	subs	r2, r2, r5
 8006cb2:	d41e      	bmi.n	8006cf2 <_malloc_r+0xc6>
 8006cb4:	2a0b      	cmp	r2, #11
 8006cb6:	d916      	bls.n	8006ce6 <_malloc_r+0xba>
 8006cb8:	1961      	adds	r1, r4, r5
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	6025      	str	r5, [r4, #0]
 8006cbe:	bf18      	it	ne
 8006cc0:	6059      	strne	r1, [r3, #4]
 8006cc2:	6863      	ldr	r3, [r4, #4]
 8006cc4:	bf08      	it	eq
 8006cc6:	6031      	streq	r1, [r6, #0]
 8006cc8:	5162      	str	r2, [r4, r5]
 8006cca:	604b      	str	r3, [r1, #4]
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f104 060b 	add.w	r6, r4, #11
 8006cd2:	f000 fa6b 	bl	80071ac <__malloc_unlock>
 8006cd6:	f026 0607 	bic.w	r6, r6, #7
 8006cda:	1d23      	adds	r3, r4, #4
 8006cdc:	1af2      	subs	r2, r6, r3
 8006cde:	d0b6      	beq.n	8006c4e <_malloc_r+0x22>
 8006ce0:	1b9b      	subs	r3, r3, r6
 8006ce2:	50a3      	str	r3, [r4, r2]
 8006ce4:	e7b3      	b.n	8006c4e <_malloc_r+0x22>
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	bf0c      	ite	eq
 8006cec:	6032      	streq	r2, [r6, #0]
 8006cee:	605a      	strne	r2, [r3, #4]
 8006cf0:	e7ec      	b.n	8006ccc <_malloc_r+0xa0>
 8006cf2:	4623      	mov	r3, r4
 8006cf4:	6864      	ldr	r4, [r4, #4]
 8006cf6:	e7b2      	b.n	8006c5e <_malloc_r+0x32>
 8006cf8:	4634      	mov	r4, r6
 8006cfa:	6876      	ldr	r6, [r6, #4]
 8006cfc:	e7b9      	b.n	8006c72 <_malloc_r+0x46>
 8006cfe:	230c      	movs	r3, #12
 8006d00:	603b      	str	r3, [r7, #0]
 8006d02:	4638      	mov	r0, r7
 8006d04:	f000 fa52 	bl	80071ac <__malloc_unlock>
 8006d08:	e7a1      	b.n	8006c4e <_malloc_r+0x22>
 8006d0a:	6025      	str	r5, [r4, #0]
 8006d0c:	e7de      	b.n	8006ccc <_malloc_r+0xa0>
 8006d0e:	bf00      	nop
 8006d10:	200003e4 	.word	0x200003e4

08006d14 <__sfputc_r>:
 8006d14:	6893      	ldr	r3, [r2, #8]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	b410      	push	{r4}
 8006d1c:	6093      	str	r3, [r2, #8]
 8006d1e:	da08      	bge.n	8006d32 <__sfputc_r+0x1e>
 8006d20:	6994      	ldr	r4, [r2, #24]
 8006d22:	42a3      	cmp	r3, r4
 8006d24:	db01      	blt.n	8006d2a <__sfputc_r+0x16>
 8006d26:	290a      	cmp	r1, #10
 8006d28:	d103      	bne.n	8006d32 <__sfputc_r+0x1e>
 8006d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d2e:	f7fe ba01 	b.w	8005134 <__swbuf_r>
 8006d32:	6813      	ldr	r3, [r2, #0]
 8006d34:	1c58      	adds	r0, r3, #1
 8006d36:	6010      	str	r0, [r2, #0]
 8006d38:	7019      	strb	r1, [r3, #0]
 8006d3a:	4608      	mov	r0, r1
 8006d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <__sfputs_r>:
 8006d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d44:	4606      	mov	r6, r0
 8006d46:	460f      	mov	r7, r1
 8006d48:	4614      	mov	r4, r2
 8006d4a:	18d5      	adds	r5, r2, r3
 8006d4c:	42ac      	cmp	r4, r5
 8006d4e:	d101      	bne.n	8006d54 <__sfputs_r+0x12>
 8006d50:	2000      	movs	r0, #0
 8006d52:	e007      	b.n	8006d64 <__sfputs_r+0x22>
 8006d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d58:	463a      	mov	r2, r7
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff ffda 	bl	8006d14 <__sfputc_r>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d1f3      	bne.n	8006d4c <__sfputs_r+0xa>
 8006d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006d68 <_vfiprintf_r>:
 8006d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d6c:	460d      	mov	r5, r1
 8006d6e:	b09d      	sub	sp, #116	; 0x74
 8006d70:	4614      	mov	r4, r2
 8006d72:	4698      	mov	r8, r3
 8006d74:	4606      	mov	r6, r0
 8006d76:	b118      	cbz	r0, 8006d80 <_vfiprintf_r+0x18>
 8006d78:	6983      	ldr	r3, [r0, #24]
 8006d7a:	b90b      	cbnz	r3, 8006d80 <_vfiprintf_r+0x18>
 8006d7c:	f7ff fa30 	bl	80061e0 <__sinit>
 8006d80:	4b89      	ldr	r3, [pc, #548]	; (8006fa8 <_vfiprintf_r+0x240>)
 8006d82:	429d      	cmp	r5, r3
 8006d84:	d11b      	bne.n	8006dbe <_vfiprintf_r+0x56>
 8006d86:	6875      	ldr	r5, [r6, #4]
 8006d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d8a:	07d9      	lsls	r1, r3, #31
 8006d8c:	d405      	bmi.n	8006d9a <_vfiprintf_r+0x32>
 8006d8e:	89ab      	ldrh	r3, [r5, #12]
 8006d90:	059a      	lsls	r2, r3, #22
 8006d92:	d402      	bmi.n	8006d9a <_vfiprintf_r+0x32>
 8006d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d96:	f7ff fac6 	bl	8006326 <__retarget_lock_acquire_recursive>
 8006d9a:	89ab      	ldrh	r3, [r5, #12]
 8006d9c:	071b      	lsls	r3, r3, #28
 8006d9e:	d501      	bpl.n	8006da4 <_vfiprintf_r+0x3c>
 8006da0:	692b      	ldr	r3, [r5, #16]
 8006da2:	b9eb      	cbnz	r3, 8006de0 <_vfiprintf_r+0x78>
 8006da4:	4629      	mov	r1, r5
 8006da6:	4630      	mov	r0, r6
 8006da8:	f7fe fa16 	bl	80051d8 <__swsetup_r>
 8006dac:	b1c0      	cbz	r0, 8006de0 <_vfiprintf_r+0x78>
 8006dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006db0:	07dc      	lsls	r4, r3, #31
 8006db2:	d50e      	bpl.n	8006dd2 <_vfiprintf_r+0x6a>
 8006db4:	f04f 30ff 	mov.w	r0, #4294967295
 8006db8:	b01d      	add	sp, #116	; 0x74
 8006dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dbe:	4b7b      	ldr	r3, [pc, #492]	; (8006fac <_vfiprintf_r+0x244>)
 8006dc0:	429d      	cmp	r5, r3
 8006dc2:	d101      	bne.n	8006dc8 <_vfiprintf_r+0x60>
 8006dc4:	68b5      	ldr	r5, [r6, #8]
 8006dc6:	e7df      	b.n	8006d88 <_vfiprintf_r+0x20>
 8006dc8:	4b79      	ldr	r3, [pc, #484]	; (8006fb0 <_vfiprintf_r+0x248>)
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	bf08      	it	eq
 8006dce:	68f5      	ldreq	r5, [r6, #12]
 8006dd0:	e7da      	b.n	8006d88 <_vfiprintf_r+0x20>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	0598      	lsls	r0, r3, #22
 8006dd6:	d4ed      	bmi.n	8006db4 <_vfiprintf_r+0x4c>
 8006dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dda:	f7ff faa5 	bl	8006328 <__retarget_lock_release_recursive>
 8006dde:	e7e9      	b.n	8006db4 <_vfiprintf_r+0x4c>
 8006de0:	2300      	movs	r3, #0
 8006de2:	9309      	str	r3, [sp, #36]	; 0x24
 8006de4:	2320      	movs	r3, #32
 8006de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dee:	2330      	movs	r3, #48	; 0x30
 8006df0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006fb4 <_vfiprintf_r+0x24c>
 8006df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006df8:	f04f 0901 	mov.w	r9, #1
 8006dfc:	4623      	mov	r3, r4
 8006dfe:	469a      	mov	sl, r3
 8006e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e04:	b10a      	cbz	r2, 8006e0a <_vfiprintf_r+0xa2>
 8006e06:	2a25      	cmp	r2, #37	; 0x25
 8006e08:	d1f9      	bne.n	8006dfe <_vfiprintf_r+0x96>
 8006e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8006e0e:	d00b      	beq.n	8006e28 <_vfiprintf_r+0xc0>
 8006e10:	465b      	mov	r3, fp
 8006e12:	4622      	mov	r2, r4
 8006e14:	4629      	mov	r1, r5
 8006e16:	4630      	mov	r0, r6
 8006e18:	f7ff ff93 	bl	8006d42 <__sfputs_r>
 8006e1c:	3001      	adds	r0, #1
 8006e1e:	f000 80aa 	beq.w	8006f76 <_vfiprintf_r+0x20e>
 8006e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e24:	445a      	add	r2, fp
 8006e26:	9209      	str	r2, [sp, #36]	; 0x24
 8006e28:	f89a 3000 	ldrb.w	r3, [sl]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 80a2 	beq.w	8006f76 <_vfiprintf_r+0x20e>
 8006e32:	2300      	movs	r3, #0
 8006e34:	f04f 32ff 	mov.w	r2, #4294967295
 8006e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e3c:	f10a 0a01 	add.w	sl, sl, #1
 8006e40:	9304      	str	r3, [sp, #16]
 8006e42:	9307      	str	r3, [sp, #28]
 8006e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e48:	931a      	str	r3, [sp, #104]	; 0x68
 8006e4a:	4654      	mov	r4, sl
 8006e4c:	2205      	movs	r2, #5
 8006e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e52:	4858      	ldr	r0, [pc, #352]	; (8006fb4 <_vfiprintf_r+0x24c>)
 8006e54:	f7f9 f9e4 	bl	8000220 <memchr>
 8006e58:	9a04      	ldr	r2, [sp, #16]
 8006e5a:	b9d8      	cbnz	r0, 8006e94 <_vfiprintf_r+0x12c>
 8006e5c:	06d1      	lsls	r1, r2, #27
 8006e5e:	bf44      	itt	mi
 8006e60:	2320      	movmi	r3, #32
 8006e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e66:	0713      	lsls	r3, r2, #28
 8006e68:	bf44      	itt	mi
 8006e6a:	232b      	movmi	r3, #43	; 0x2b
 8006e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e70:	f89a 3000 	ldrb.w	r3, [sl]
 8006e74:	2b2a      	cmp	r3, #42	; 0x2a
 8006e76:	d015      	beq.n	8006ea4 <_vfiprintf_r+0x13c>
 8006e78:	9a07      	ldr	r2, [sp, #28]
 8006e7a:	4654      	mov	r4, sl
 8006e7c:	2000      	movs	r0, #0
 8006e7e:	f04f 0c0a 	mov.w	ip, #10
 8006e82:	4621      	mov	r1, r4
 8006e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e88:	3b30      	subs	r3, #48	; 0x30
 8006e8a:	2b09      	cmp	r3, #9
 8006e8c:	d94e      	bls.n	8006f2c <_vfiprintf_r+0x1c4>
 8006e8e:	b1b0      	cbz	r0, 8006ebe <_vfiprintf_r+0x156>
 8006e90:	9207      	str	r2, [sp, #28]
 8006e92:	e014      	b.n	8006ebe <_vfiprintf_r+0x156>
 8006e94:	eba0 0308 	sub.w	r3, r0, r8
 8006e98:	fa09 f303 	lsl.w	r3, r9, r3
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	9304      	str	r3, [sp, #16]
 8006ea0:	46a2      	mov	sl, r4
 8006ea2:	e7d2      	b.n	8006e4a <_vfiprintf_r+0xe2>
 8006ea4:	9b03      	ldr	r3, [sp, #12]
 8006ea6:	1d19      	adds	r1, r3, #4
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	9103      	str	r1, [sp, #12]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	bfbb      	ittet	lt
 8006eb0:	425b      	neglt	r3, r3
 8006eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8006eb6:	9307      	strge	r3, [sp, #28]
 8006eb8:	9307      	strlt	r3, [sp, #28]
 8006eba:	bfb8      	it	lt
 8006ebc:	9204      	strlt	r2, [sp, #16]
 8006ebe:	7823      	ldrb	r3, [r4, #0]
 8006ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8006ec2:	d10c      	bne.n	8006ede <_vfiprintf_r+0x176>
 8006ec4:	7863      	ldrb	r3, [r4, #1]
 8006ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ec8:	d135      	bne.n	8006f36 <_vfiprintf_r+0x1ce>
 8006eca:	9b03      	ldr	r3, [sp, #12]
 8006ecc:	1d1a      	adds	r2, r3, #4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	9203      	str	r2, [sp, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	bfb8      	it	lt
 8006ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8006eda:	3402      	adds	r4, #2
 8006edc:	9305      	str	r3, [sp, #20]
 8006ede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006fc4 <_vfiprintf_r+0x25c>
 8006ee2:	7821      	ldrb	r1, [r4, #0]
 8006ee4:	2203      	movs	r2, #3
 8006ee6:	4650      	mov	r0, sl
 8006ee8:	f7f9 f99a 	bl	8000220 <memchr>
 8006eec:	b140      	cbz	r0, 8006f00 <_vfiprintf_r+0x198>
 8006eee:	2340      	movs	r3, #64	; 0x40
 8006ef0:	eba0 000a 	sub.w	r0, r0, sl
 8006ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8006ef8:	9b04      	ldr	r3, [sp, #16]
 8006efa:	4303      	orrs	r3, r0
 8006efc:	3401      	adds	r4, #1
 8006efe:	9304      	str	r3, [sp, #16]
 8006f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f04:	482c      	ldr	r0, [pc, #176]	; (8006fb8 <_vfiprintf_r+0x250>)
 8006f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f0a:	2206      	movs	r2, #6
 8006f0c:	f7f9 f988 	bl	8000220 <memchr>
 8006f10:	2800      	cmp	r0, #0
 8006f12:	d03f      	beq.n	8006f94 <_vfiprintf_r+0x22c>
 8006f14:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <_vfiprintf_r+0x254>)
 8006f16:	bb1b      	cbnz	r3, 8006f60 <_vfiprintf_r+0x1f8>
 8006f18:	9b03      	ldr	r3, [sp, #12]
 8006f1a:	3307      	adds	r3, #7
 8006f1c:	f023 0307 	bic.w	r3, r3, #7
 8006f20:	3308      	adds	r3, #8
 8006f22:	9303      	str	r3, [sp, #12]
 8006f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f26:	443b      	add	r3, r7
 8006f28:	9309      	str	r3, [sp, #36]	; 0x24
 8006f2a:	e767      	b.n	8006dfc <_vfiprintf_r+0x94>
 8006f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f30:	460c      	mov	r4, r1
 8006f32:	2001      	movs	r0, #1
 8006f34:	e7a5      	b.n	8006e82 <_vfiprintf_r+0x11a>
 8006f36:	2300      	movs	r3, #0
 8006f38:	3401      	adds	r4, #1
 8006f3a:	9305      	str	r3, [sp, #20]
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	f04f 0c0a 	mov.w	ip, #10
 8006f42:	4620      	mov	r0, r4
 8006f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f48:	3a30      	subs	r2, #48	; 0x30
 8006f4a:	2a09      	cmp	r2, #9
 8006f4c:	d903      	bls.n	8006f56 <_vfiprintf_r+0x1ee>
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d0c5      	beq.n	8006ede <_vfiprintf_r+0x176>
 8006f52:	9105      	str	r1, [sp, #20]
 8006f54:	e7c3      	b.n	8006ede <_vfiprintf_r+0x176>
 8006f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e7f0      	b.n	8006f42 <_vfiprintf_r+0x1da>
 8006f60:	ab03      	add	r3, sp, #12
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	462a      	mov	r2, r5
 8006f66:	4b16      	ldr	r3, [pc, #88]	; (8006fc0 <_vfiprintf_r+0x258>)
 8006f68:	a904      	add	r1, sp, #16
 8006f6a:	4630      	mov	r0, r6
 8006f6c:	f7fd fc8a 	bl	8004884 <_printf_float>
 8006f70:	4607      	mov	r7, r0
 8006f72:	1c78      	adds	r0, r7, #1
 8006f74:	d1d6      	bne.n	8006f24 <_vfiprintf_r+0x1bc>
 8006f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f78:	07d9      	lsls	r1, r3, #31
 8006f7a:	d405      	bmi.n	8006f88 <_vfiprintf_r+0x220>
 8006f7c:	89ab      	ldrh	r3, [r5, #12]
 8006f7e:	059a      	lsls	r2, r3, #22
 8006f80:	d402      	bmi.n	8006f88 <_vfiprintf_r+0x220>
 8006f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f84:	f7ff f9d0 	bl	8006328 <__retarget_lock_release_recursive>
 8006f88:	89ab      	ldrh	r3, [r5, #12]
 8006f8a:	065b      	lsls	r3, r3, #25
 8006f8c:	f53f af12 	bmi.w	8006db4 <_vfiprintf_r+0x4c>
 8006f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f92:	e711      	b.n	8006db8 <_vfiprintf_r+0x50>
 8006f94:	ab03      	add	r3, sp, #12
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	462a      	mov	r2, r5
 8006f9a:	4b09      	ldr	r3, [pc, #36]	; (8006fc0 <_vfiprintf_r+0x258>)
 8006f9c:	a904      	add	r1, sp, #16
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	f7fd ff14 	bl	8004dcc <_printf_i>
 8006fa4:	e7e4      	b.n	8006f70 <_vfiprintf_r+0x208>
 8006fa6:	bf00      	nop
 8006fa8:	08008474 	.word	0x08008474
 8006fac:	08008494 	.word	0x08008494
 8006fb0:	08008454 	.word	0x08008454
 8006fb4:	0800860c 	.word	0x0800860c
 8006fb8:	08008616 	.word	0x08008616
 8006fbc:	08004885 	.word	0x08004885
 8006fc0:	08006d43 	.word	0x08006d43
 8006fc4:	08008612 	.word	0x08008612

08006fc8 <_sbrk_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d06      	ldr	r5, [pc, #24]	; (8006fe4 <_sbrk_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fb f880 	bl	80020d8 <_sbrk>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_sbrk_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_sbrk_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	200003ec 	.word	0x200003ec

08006fe8 <__sread>:
 8006fe8:	b510      	push	{r4, lr}
 8006fea:	460c      	mov	r4, r1
 8006fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff0:	f000 f8e2 	bl	80071b8 <_read_r>
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	bfab      	itete	ge
 8006ff8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ffa:	89a3      	ldrhlt	r3, [r4, #12]
 8006ffc:	181b      	addge	r3, r3, r0
 8006ffe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007002:	bfac      	ite	ge
 8007004:	6563      	strge	r3, [r4, #84]	; 0x54
 8007006:	81a3      	strhlt	r3, [r4, #12]
 8007008:	bd10      	pop	{r4, pc}

0800700a <__swrite>:
 800700a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800700e:	461f      	mov	r7, r3
 8007010:	898b      	ldrh	r3, [r1, #12]
 8007012:	05db      	lsls	r3, r3, #23
 8007014:	4605      	mov	r5, r0
 8007016:	460c      	mov	r4, r1
 8007018:	4616      	mov	r6, r2
 800701a:	d505      	bpl.n	8007028 <__swrite+0x1e>
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2302      	movs	r3, #2
 8007022:	2200      	movs	r2, #0
 8007024:	f000 f898 	bl	8007158 <_lseek_r>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800702e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007032:	81a3      	strh	r3, [r4, #12]
 8007034:	4632      	mov	r2, r6
 8007036:	463b      	mov	r3, r7
 8007038:	4628      	mov	r0, r5
 800703a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800703e:	f000 b817 	b.w	8007070 <_write_r>

08007042 <__sseek>:
 8007042:	b510      	push	{r4, lr}
 8007044:	460c      	mov	r4, r1
 8007046:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800704a:	f000 f885 	bl	8007158 <_lseek_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	89a3      	ldrh	r3, [r4, #12]
 8007052:	bf15      	itete	ne
 8007054:	6560      	strne	r0, [r4, #84]	; 0x54
 8007056:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800705a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800705e:	81a3      	strheq	r3, [r4, #12]
 8007060:	bf18      	it	ne
 8007062:	81a3      	strhne	r3, [r4, #12]
 8007064:	bd10      	pop	{r4, pc}

08007066 <__sclose>:
 8007066:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800706a:	f000 b831 	b.w	80070d0 <_close_r>
	...

08007070 <_write_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d07      	ldr	r5, [pc, #28]	; (8007090 <_write_r+0x20>)
 8007074:	4604      	mov	r4, r0
 8007076:	4608      	mov	r0, r1
 8007078:	4611      	mov	r1, r2
 800707a:	2200      	movs	r2, #0
 800707c:	602a      	str	r2, [r5, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	f7f9 ffab 	bl	8000fda <_write>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_write_r+0x1e>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_write_r+0x1e>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	200003ec 	.word	0x200003ec

08007094 <__assert_func>:
 8007094:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007096:	4614      	mov	r4, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4b09      	ldr	r3, [pc, #36]	; (80070c0 <__assert_func+0x2c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4605      	mov	r5, r0
 80070a0:	68d8      	ldr	r0, [r3, #12]
 80070a2:	b14c      	cbz	r4, 80070b8 <__assert_func+0x24>
 80070a4:	4b07      	ldr	r3, [pc, #28]	; (80070c4 <__assert_func+0x30>)
 80070a6:	9100      	str	r1, [sp, #0]
 80070a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070ac:	4906      	ldr	r1, [pc, #24]	; (80070c8 <__assert_func+0x34>)
 80070ae:	462b      	mov	r3, r5
 80070b0:	f000 f81e 	bl	80070f0 <fiprintf>
 80070b4:	f000 f89f 	bl	80071f6 <abort>
 80070b8:	4b04      	ldr	r3, [pc, #16]	; (80070cc <__assert_func+0x38>)
 80070ba:	461c      	mov	r4, r3
 80070bc:	e7f3      	b.n	80070a6 <__assert_func+0x12>
 80070be:	bf00      	nop
 80070c0:	20000014 	.word	0x20000014
 80070c4:	0800861d 	.word	0x0800861d
 80070c8:	0800862a 	.word	0x0800862a
 80070cc:	08008658 	.word	0x08008658

080070d0 <_close_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d06      	ldr	r5, [pc, #24]	; (80070ec <_close_r+0x1c>)
 80070d4:	2300      	movs	r3, #0
 80070d6:	4604      	mov	r4, r0
 80070d8:	4608      	mov	r0, r1
 80070da:	602b      	str	r3, [r5, #0]
 80070dc:	f7fa ffc7 	bl	800206e <_close>
 80070e0:	1c43      	adds	r3, r0, #1
 80070e2:	d102      	bne.n	80070ea <_close_r+0x1a>
 80070e4:	682b      	ldr	r3, [r5, #0]
 80070e6:	b103      	cbz	r3, 80070ea <_close_r+0x1a>
 80070e8:	6023      	str	r3, [r4, #0]
 80070ea:	bd38      	pop	{r3, r4, r5, pc}
 80070ec:	200003ec 	.word	0x200003ec

080070f0 <fiprintf>:
 80070f0:	b40e      	push	{r1, r2, r3}
 80070f2:	b503      	push	{r0, r1, lr}
 80070f4:	4601      	mov	r1, r0
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	4805      	ldr	r0, [pc, #20]	; (8007110 <fiprintf+0x20>)
 80070fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	f7ff fe31 	bl	8006d68 <_vfiprintf_r>
 8007106:	b002      	add	sp, #8
 8007108:	f85d eb04 	ldr.w	lr, [sp], #4
 800710c:	b003      	add	sp, #12
 800710e:	4770      	bx	lr
 8007110:	20000014 	.word	0x20000014

08007114 <_fstat_r>:
 8007114:	b538      	push	{r3, r4, r5, lr}
 8007116:	4d07      	ldr	r5, [pc, #28]	; (8007134 <_fstat_r+0x20>)
 8007118:	2300      	movs	r3, #0
 800711a:	4604      	mov	r4, r0
 800711c:	4608      	mov	r0, r1
 800711e:	4611      	mov	r1, r2
 8007120:	602b      	str	r3, [r5, #0]
 8007122:	f7fa ffb0 	bl	8002086 <_fstat>
 8007126:	1c43      	adds	r3, r0, #1
 8007128:	d102      	bne.n	8007130 <_fstat_r+0x1c>
 800712a:	682b      	ldr	r3, [r5, #0]
 800712c:	b103      	cbz	r3, 8007130 <_fstat_r+0x1c>
 800712e:	6023      	str	r3, [r4, #0]
 8007130:	bd38      	pop	{r3, r4, r5, pc}
 8007132:	bf00      	nop
 8007134:	200003ec 	.word	0x200003ec

08007138 <_isatty_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d06      	ldr	r5, [pc, #24]	; (8007154 <_isatty_r+0x1c>)
 800713c:	2300      	movs	r3, #0
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	602b      	str	r3, [r5, #0]
 8007144:	f7fa ffaf 	bl	80020a6 <_isatty>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_isatty_r+0x1a>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_isatty_r+0x1a>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	200003ec 	.word	0x200003ec

08007158 <_lseek_r>:
 8007158:	b538      	push	{r3, r4, r5, lr}
 800715a:	4d07      	ldr	r5, [pc, #28]	; (8007178 <_lseek_r+0x20>)
 800715c:	4604      	mov	r4, r0
 800715e:	4608      	mov	r0, r1
 8007160:	4611      	mov	r1, r2
 8007162:	2200      	movs	r2, #0
 8007164:	602a      	str	r2, [r5, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f7fa ffa8 	bl	80020bc <_lseek>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_lseek_r+0x1e>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_lseek_r+0x1e>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	200003ec 	.word	0x200003ec

0800717c <__ascii_mbtowc>:
 800717c:	b082      	sub	sp, #8
 800717e:	b901      	cbnz	r1, 8007182 <__ascii_mbtowc+0x6>
 8007180:	a901      	add	r1, sp, #4
 8007182:	b142      	cbz	r2, 8007196 <__ascii_mbtowc+0x1a>
 8007184:	b14b      	cbz	r3, 800719a <__ascii_mbtowc+0x1e>
 8007186:	7813      	ldrb	r3, [r2, #0]
 8007188:	600b      	str	r3, [r1, #0]
 800718a:	7812      	ldrb	r2, [r2, #0]
 800718c:	1e10      	subs	r0, r2, #0
 800718e:	bf18      	it	ne
 8007190:	2001      	movne	r0, #1
 8007192:	b002      	add	sp, #8
 8007194:	4770      	bx	lr
 8007196:	4610      	mov	r0, r2
 8007198:	e7fb      	b.n	8007192 <__ascii_mbtowc+0x16>
 800719a:	f06f 0001 	mvn.w	r0, #1
 800719e:	e7f8      	b.n	8007192 <__ascii_mbtowc+0x16>

080071a0 <__malloc_lock>:
 80071a0:	4801      	ldr	r0, [pc, #4]	; (80071a8 <__malloc_lock+0x8>)
 80071a2:	f7ff b8c0 	b.w	8006326 <__retarget_lock_acquire_recursive>
 80071a6:	bf00      	nop
 80071a8:	200003e0 	.word	0x200003e0

080071ac <__malloc_unlock>:
 80071ac:	4801      	ldr	r0, [pc, #4]	; (80071b4 <__malloc_unlock+0x8>)
 80071ae:	f7ff b8bb 	b.w	8006328 <__retarget_lock_release_recursive>
 80071b2:	bf00      	nop
 80071b4:	200003e0 	.word	0x200003e0

080071b8 <_read_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4d07      	ldr	r5, [pc, #28]	; (80071d8 <_read_r+0x20>)
 80071bc:	4604      	mov	r4, r0
 80071be:	4608      	mov	r0, r1
 80071c0:	4611      	mov	r1, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	602a      	str	r2, [r5, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f7fa ff34 	bl	8002034 <_read>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_read_r+0x1e>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_read_r+0x1e>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	200003ec 	.word	0x200003ec

080071dc <__ascii_wctomb>:
 80071dc:	b149      	cbz	r1, 80071f2 <__ascii_wctomb+0x16>
 80071de:	2aff      	cmp	r2, #255	; 0xff
 80071e0:	bf85      	ittet	hi
 80071e2:	238a      	movhi	r3, #138	; 0x8a
 80071e4:	6003      	strhi	r3, [r0, #0]
 80071e6:	700a      	strbls	r2, [r1, #0]
 80071e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80071ec:	bf98      	it	ls
 80071ee:	2001      	movls	r0, #1
 80071f0:	4770      	bx	lr
 80071f2:	4608      	mov	r0, r1
 80071f4:	4770      	bx	lr

080071f6 <abort>:
 80071f6:	b508      	push	{r3, lr}
 80071f8:	2006      	movs	r0, #6
 80071fa:	f000 f82b 	bl	8007254 <raise>
 80071fe:	2001      	movs	r0, #1
 8007200:	f7fa ff0e 	bl	8002020 <_exit>

08007204 <_raise_r>:
 8007204:	291f      	cmp	r1, #31
 8007206:	b538      	push	{r3, r4, r5, lr}
 8007208:	4604      	mov	r4, r0
 800720a:	460d      	mov	r5, r1
 800720c:	d904      	bls.n	8007218 <_raise_r+0x14>
 800720e:	2316      	movs	r3, #22
 8007210:	6003      	str	r3, [r0, #0]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	bd38      	pop	{r3, r4, r5, pc}
 8007218:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800721a:	b112      	cbz	r2, 8007222 <_raise_r+0x1e>
 800721c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007220:	b94b      	cbnz	r3, 8007236 <_raise_r+0x32>
 8007222:	4620      	mov	r0, r4
 8007224:	f000 f830 	bl	8007288 <_getpid_r>
 8007228:	462a      	mov	r2, r5
 800722a:	4601      	mov	r1, r0
 800722c:	4620      	mov	r0, r4
 800722e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007232:	f000 b817 	b.w	8007264 <_kill_r>
 8007236:	2b01      	cmp	r3, #1
 8007238:	d00a      	beq.n	8007250 <_raise_r+0x4c>
 800723a:	1c59      	adds	r1, r3, #1
 800723c:	d103      	bne.n	8007246 <_raise_r+0x42>
 800723e:	2316      	movs	r3, #22
 8007240:	6003      	str	r3, [r0, #0]
 8007242:	2001      	movs	r0, #1
 8007244:	e7e7      	b.n	8007216 <_raise_r+0x12>
 8007246:	2400      	movs	r4, #0
 8007248:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800724c:	4628      	mov	r0, r5
 800724e:	4798      	blx	r3
 8007250:	2000      	movs	r0, #0
 8007252:	e7e0      	b.n	8007216 <_raise_r+0x12>

08007254 <raise>:
 8007254:	4b02      	ldr	r3, [pc, #8]	; (8007260 <raise+0xc>)
 8007256:	4601      	mov	r1, r0
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	f7ff bfd3 	b.w	8007204 <_raise_r>
 800725e:	bf00      	nop
 8007260:	20000014 	.word	0x20000014

08007264 <_kill_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d07      	ldr	r5, [pc, #28]	; (8007284 <_kill_r+0x20>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	4611      	mov	r1, r2
 8007270:	602b      	str	r3, [r5, #0]
 8007272:	f7fa fec5 	bl	8002000 <_kill>
 8007276:	1c43      	adds	r3, r0, #1
 8007278:	d102      	bne.n	8007280 <_kill_r+0x1c>
 800727a:	682b      	ldr	r3, [r5, #0]
 800727c:	b103      	cbz	r3, 8007280 <_kill_r+0x1c>
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	bf00      	nop
 8007284:	200003ec 	.word	0x200003ec

08007288 <_getpid_r>:
 8007288:	f7fa beb2 	b.w	8001ff0 <_getpid>
 800728c:	0000      	movs	r0, r0
	...

08007290 <sin>:
 8007290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007292:	ec53 2b10 	vmov	r2, r3, d0
 8007296:	4828      	ldr	r0, [pc, #160]	; (8007338 <sin+0xa8>)
 8007298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800729c:	4281      	cmp	r1, r0
 800729e:	dc07      	bgt.n	80072b0 <sin+0x20>
 80072a0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007330 <sin+0xa0>
 80072a4:	2000      	movs	r0, #0
 80072a6:	b005      	add	sp, #20
 80072a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80072ac:	f000 be6c 	b.w	8007f88 <__kernel_sin>
 80072b0:	4822      	ldr	r0, [pc, #136]	; (800733c <sin+0xac>)
 80072b2:	4281      	cmp	r1, r0
 80072b4:	dd09      	ble.n	80072ca <sin+0x3a>
 80072b6:	ee10 0a10 	vmov	r0, s0
 80072ba:	4619      	mov	r1, r3
 80072bc:	f7f9 f804 	bl	80002c8 <__aeabi_dsub>
 80072c0:	ec41 0b10 	vmov	d0, r0, r1
 80072c4:	b005      	add	sp, #20
 80072c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80072ca:	4668      	mov	r0, sp
 80072cc:	f000 f838 	bl	8007340 <__ieee754_rem_pio2>
 80072d0:	f000 0003 	and.w	r0, r0, #3
 80072d4:	2801      	cmp	r0, #1
 80072d6:	d00c      	beq.n	80072f2 <sin+0x62>
 80072d8:	2802      	cmp	r0, #2
 80072da:	d011      	beq.n	8007300 <sin+0x70>
 80072dc:	b9f0      	cbnz	r0, 800731c <sin+0x8c>
 80072de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072e2:	ed9d 0b00 	vldr	d0, [sp]
 80072e6:	2001      	movs	r0, #1
 80072e8:	f000 fe4e 	bl	8007f88 <__kernel_sin>
 80072ec:	ec51 0b10 	vmov	r0, r1, d0
 80072f0:	e7e6      	b.n	80072c0 <sin+0x30>
 80072f2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80072f6:	ed9d 0b00 	vldr	d0, [sp]
 80072fa:	f000 fa2d 	bl	8007758 <__kernel_cos>
 80072fe:	e7f5      	b.n	80072ec <sin+0x5c>
 8007300:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007304:	ed9d 0b00 	vldr	d0, [sp]
 8007308:	2001      	movs	r0, #1
 800730a:	f000 fe3d 	bl	8007f88 <__kernel_sin>
 800730e:	ec53 2b10 	vmov	r2, r3, d0
 8007312:	ee10 0a10 	vmov	r0, s0
 8007316:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800731a:	e7d1      	b.n	80072c0 <sin+0x30>
 800731c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007320:	ed9d 0b00 	vldr	d0, [sp]
 8007324:	f000 fa18 	bl	8007758 <__kernel_cos>
 8007328:	e7f1      	b.n	800730e <sin+0x7e>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
	...
 8007338:	3fe921fb 	.word	0x3fe921fb
 800733c:	7fefffff 	.word	0x7fefffff

08007340 <__ieee754_rem_pio2>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	ed2d 8b02 	vpush	{d8}
 8007348:	ec55 4b10 	vmov	r4, r5, d0
 800734c:	4bca      	ldr	r3, [pc, #808]	; (8007678 <__ieee754_rem_pio2+0x338>)
 800734e:	b08b      	sub	sp, #44	; 0x2c
 8007350:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007354:	4598      	cmp	r8, r3
 8007356:	4682      	mov	sl, r0
 8007358:	9502      	str	r5, [sp, #8]
 800735a:	dc08      	bgt.n	800736e <__ieee754_rem_pio2+0x2e>
 800735c:	2200      	movs	r2, #0
 800735e:	2300      	movs	r3, #0
 8007360:	ed80 0b00 	vstr	d0, [r0]
 8007364:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007368:	f04f 0b00 	mov.w	fp, #0
 800736c:	e028      	b.n	80073c0 <__ieee754_rem_pio2+0x80>
 800736e:	4bc3      	ldr	r3, [pc, #780]	; (800767c <__ieee754_rem_pio2+0x33c>)
 8007370:	4598      	cmp	r8, r3
 8007372:	dc78      	bgt.n	8007466 <__ieee754_rem_pio2+0x126>
 8007374:	9b02      	ldr	r3, [sp, #8]
 8007376:	4ec2      	ldr	r6, [pc, #776]	; (8007680 <__ieee754_rem_pio2+0x340>)
 8007378:	2b00      	cmp	r3, #0
 800737a:	ee10 0a10 	vmov	r0, s0
 800737e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007640 <__ieee754_rem_pio2+0x300>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	4629      	mov	r1, r5
 8007386:	dd39      	ble.n	80073fc <__ieee754_rem_pio2+0xbc>
 8007388:	f7f8 ff9e 	bl	80002c8 <__aeabi_dsub>
 800738c:	45b0      	cmp	r8, r6
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	d01b      	beq.n	80073cc <__ieee754_rem_pio2+0x8c>
 8007394:	a3ac      	add	r3, pc, #688	; (adr r3, 8007648 <__ieee754_rem_pio2+0x308>)
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	f7f8 ff95 	bl	80002c8 <__aeabi_dsub>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	e9ca 2300 	strd	r2, r3, [sl]
 80073a6:	4620      	mov	r0, r4
 80073a8:	4629      	mov	r1, r5
 80073aa:	f7f8 ff8d 	bl	80002c8 <__aeabi_dsub>
 80073ae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007648 <__ieee754_rem_pio2+0x308>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	f7f8 ff88 	bl	80002c8 <__aeabi_dsub>
 80073b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80073bc:	f04f 0b01 	mov.w	fp, #1
 80073c0:	4658      	mov	r0, fp
 80073c2:	b00b      	add	sp, #44	; 0x2c
 80073c4:	ecbd 8b02 	vpop	{d8}
 80073c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073cc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007650 <__ieee754_rem_pio2+0x310>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f8 ff79 	bl	80002c8 <__aeabi_dsub>
 80073d6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007658 <__ieee754_rem_pio2+0x318>)
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	4604      	mov	r4, r0
 80073de:	460d      	mov	r5, r1
 80073e0:	f7f8 ff72 	bl	80002c8 <__aeabi_dsub>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	e9ca 2300 	strd	r2, r3, [sl]
 80073ec:	4620      	mov	r0, r4
 80073ee:	4629      	mov	r1, r5
 80073f0:	f7f8 ff6a 	bl	80002c8 <__aeabi_dsub>
 80073f4:	a398      	add	r3, pc, #608	; (adr r3, 8007658 <__ieee754_rem_pio2+0x318>)
 80073f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fa:	e7db      	b.n	80073b4 <__ieee754_rem_pio2+0x74>
 80073fc:	f7f8 ff66 	bl	80002cc <__adddf3>
 8007400:	45b0      	cmp	r8, r6
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	d016      	beq.n	8007436 <__ieee754_rem_pio2+0xf6>
 8007408:	a38f      	add	r3, pc, #572	; (adr r3, 8007648 <__ieee754_rem_pio2+0x308>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f8 ff5d 	bl	80002cc <__adddf3>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	e9ca 2300 	strd	r2, r3, [sl]
 800741a:	4620      	mov	r0, r4
 800741c:	4629      	mov	r1, r5
 800741e:	f7f8 ff53 	bl	80002c8 <__aeabi_dsub>
 8007422:	a389      	add	r3, pc, #548	; (adr r3, 8007648 <__ieee754_rem_pio2+0x308>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f7f8 ff50 	bl	80002cc <__adddf3>
 800742c:	f04f 3bff 	mov.w	fp, #4294967295
 8007430:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007434:	e7c4      	b.n	80073c0 <__ieee754_rem_pio2+0x80>
 8007436:	a386      	add	r3, pc, #536	; (adr r3, 8007650 <__ieee754_rem_pio2+0x310>)
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f7f8 ff46 	bl	80002cc <__adddf3>
 8007440:	a385      	add	r3, pc, #532	; (adr r3, 8007658 <__ieee754_rem_pio2+0x318>)
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	4604      	mov	r4, r0
 8007448:	460d      	mov	r5, r1
 800744a:	f7f8 ff3f 	bl	80002cc <__adddf3>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	e9ca 2300 	strd	r2, r3, [sl]
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f8 ff35 	bl	80002c8 <__aeabi_dsub>
 800745e:	a37e      	add	r3, pc, #504	; (adr r3, 8007658 <__ieee754_rem_pio2+0x318>)
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	e7e0      	b.n	8007428 <__ieee754_rem_pio2+0xe8>
 8007466:	4b87      	ldr	r3, [pc, #540]	; (8007684 <__ieee754_rem_pio2+0x344>)
 8007468:	4598      	cmp	r8, r3
 800746a:	f300 80d9 	bgt.w	8007620 <__ieee754_rem_pio2+0x2e0>
 800746e:	f000 fe49 	bl	8008104 <fabs>
 8007472:	ec55 4b10 	vmov	r4, r5, d0
 8007476:	ee10 0a10 	vmov	r0, s0
 800747a:	a379      	add	r3, pc, #484	; (adr r3, 8007660 <__ieee754_rem_pio2+0x320>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	4629      	mov	r1, r5
 8007482:	f7f9 f8d9 	bl	8000638 <__aeabi_dmul>
 8007486:	4b80      	ldr	r3, [pc, #512]	; (8007688 <__ieee754_rem_pio2+0x348>)
 8007488:	2200      	movs	r2, #0
 800748a:	f7f8 ff1f 	bl	80002cc <__adddf3>
 800748e:	f7f9 fb83 	bl	8000b98 <__aeabi_d2iz>
 8007492:	4683      	mov	fp, r0
 8007494:	f7f9 f866 	bl	8000564 <__aeabi_i2d>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	ec43 2b18 	vmov	d8, r2, r3
 80074a0:	a367      	add	r3, pc, #412	; (adr r3, 8007640 <__ieee754_rem_pio2+0x300>)
 80074a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a6:	f7f9 f8c7 	bl	8000638 <__aeabi_dmul>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4620      	mov	r0, r4
 80074b0:	4629      	mov	r1, r5
 80074b2:	f7f8 ff09 	bl	80002c8 <__aeabi_dsub>
 80074b6:	a364      	add	r3, pc, #400	; (adr r3, 8007648 <__ieee754_rem_pio2+0x308>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	ec51 0b18 	vmov	r0, r1, d8
 80074c4:	f7f9 f8b8 	bl	8000638 <__aeabi_dmul>
 80074c8:	f1bb 0f1f 	cmp.w	fp, #31
 80074cc:	4604      	mov	r4, r0
 80074ce:	460d      	mov	r5, r1
 80074d0:	dc0d      	bgt.n	80074ee <__ieee754_rem_pio2+0x1ae>
 80074d2:	4b6e      	ldr	r3, [pc, #440]	; (800768c <__ieee754_rem_pio2+0x34c>)
 80074d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80074d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074dc:	4543      	cmp	r3, r8
 80074de:	d006      	beq.n	80074ee <__ieee754_rem_pio2+0x1ae>
 80074e0:	4622      	mov	r2, r4
 80074e2:	462b      	mov	r3, r5
 80074e4:	4630      	mov	r0, r6
 80074e6:	4639      	mov	r1, r7
 80074e8:	f7f8 feee 	bl	80002c8 <__aeabi_dsub>
 80074ec:	e00f      	b.n	800750e <__ieee754_rem_pio2+0x1ce>
 80074ee:	462b      	mov	r3, r5
 80074f0:	4622      	mov	r2, r4
 80074f2:	4630      	mov	r0, r6
 80074f4:	4639      	mov	r1, r7
 80074f6:	f7f8 fee7 	bl	80002c8 <__aeabi_dsub>
 80074fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80074fe:	9303      	str	r3, [sp, #12]
 8007500:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007504:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007508:	f1b8 0f10 	cmp.w	r8, #16
 800750c:	dc02      	bgt.n	8007514 <__ieee754_rem_pio2+0x1d4>
 800750e:	e9ca 0100 	strd	r0, r1, [sl]
 8007512:	e039      	b.n	8007588 <__ieee754_rem_pio2+0x248>
 8007514:	a34e      	add	r3, pc, #312	; (adr r3, 8007650 <__ieee754_rem_pio2+0x310>)
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	ec51 0b18 	vmov	r0, r1, d8
 800751e:	f7f9 f88b 	bl	8000638 <__aeabi_dmul>
 8007522:	4604      	mov	r4, r0
 8007524:	460d      	mov	r5, r1
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4630      	mov	r0, r6
 800752c:	4639      	mov	r1, r7
 800752e:	f7f8 fecb 	bl	80002c8 <__aeabi_dsub>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	4680      	mov	r8, r0
 8007538:	4689      	mov	r9, r1
 800753a:	4630      	mov	r0, r6
 800753c:	4639      	mov	r1, r7
 800753e:	f7f8 fec3 	bl	80002c8 <__aeabi_dsub>
 8007542:	4622      	mov	r2, r4
 8007544:	462b      	mov	r3, r5
 8007546:	f7f8 febf 	bl	80002c8 <__aeabi_dsub>
 800754a:	a343      	add	r3, pc, #268	; (adr r3, 8007658 <__ieee754_rem_pio2+0x318>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	4604      	mov	r4, r0
 8007552:	460d      	mov	r5, r1
 8007554:	ec51 0b18 	vmov	r0, r1, d8
 8007558:	f7f9 f86e 	bl	8000638 <__aeabi_dmul>
 800755c:	4622      	mov	r2, r4
 800755e:	462b      	mov	r3, r5
 8007560:	f7f8 feb2 	bl	80002c8 <__aeabi_dsub>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4604      	mov	r4, r0
 800756a:	460d      	mov	r5, r1
 800756c:	4640      	mov	r0, r8
 800756e:	4649      	mov	r1, r9
 8007570:	f7f8 feaa 	bl	80002c8 <__aeabi_dsub>
 8007574:	9a03      	ldr	r2, [sp, #12]
 8007576:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	2b31      	cmp	r3, #49	; 0x31
 800757e:	dc24      	bgt.n	80075ca <__ieee754_rem_pio2+0x28a>
 8007580:	e9ca 0100 	strd	r0, r1, [sl]
 8007584:	4646      	mov	r6, r8
 8007586:	464f      	mov	r7, r9
 8007588:	e9da 8900 	ldrd	r8, r9, [sl]
 800758c:	4630      	mov	r0, r6
 800758e:	4642      	mov	r2, r8
 8007590:	464b      	mov	r3, r9
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fe98 	bl	80002c8 <__aeabi_dsub>
 8007598:	462b      	mov	r3, r5
 800759a:	4622      	mov	r2, r4
 800759c:	f7f8 fe94 	bl	80002c8 <__aeabi_dsub>
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075a8:	f6bf af0a 	bge.w	80073c0 <__ieee754_rem_pio2+0x80>
 80075ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80075b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80075b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075b8:	f8ca 8000 	str.w	r8, [sl]
 80075bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80075c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80075c4:	f1cb 0b00 	rsb	fp, fp, #0
 80075c8:	e6fa      	b.n	80073c0 <__ieee754_rem_pio2+0x80>
 80075ca:	a327      	add	r3, pc, #156	; (adr r3, 8007668 <__ieee754_rem_pio2+0x328>)
 80075cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d0:	ec51 0b18 	vmov	r0, r1, d8
 80075d4:	f7f9 f830 	bl	8000638 <__aeabi_dmul>
 80075d8:	4604      	mov	r4, r0
 80075da:	460d      	mov	r5, r1
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4640      	mov	r0, r8
 80075e2:	4649      	mov	r1, r9
 80075e4:	f7f8 fe70 	bl	80002c8 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	4606      	mov	r6, r0
 80075ee:	460f      	mov	r7, r1
 80075f0:	4640      	mov	r0, r8
 80075f2:	4649      	mov	r1, r9
 80075f4:	f7f8 fe68 	bl	80002c8 <__aeabi_dsub>
 80075f8:	4622      	mov	r2, r4
 80075fa:	462b      	mov	r3, r5
 80075fc:	f7f8 fe64 	bl	80002c8 <__aeabi_dsub>
 8007600:	a31b      	add	r3, pc, #108	; (adr r3, 8007670 <__ieee754_rem_pio2+0x330>)
 8007602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007606:	4604      	mov	r4, r0
 8007608:	460d      	mov	r5, r1
 800760a:	ec51 0b18 	vmov	r0, r1, d8
 800760e:	f7f9 f813 	bl	8000638 <__aeabi_dmul>
 8007612:	4622      	mov	r2, r4
 8007614:	462b      	mov	r3, r5
 8007616:	f7f8 fe57 	bl	80002c8 <__aeabi_dsub>
 800761a:	4604      	mov	r4, r0
 800761c:	460d      	mov	r5, r1
 800761e:	e75f      	b.n	80074e0 <__ieee754_rem_pio2+0x1a0>
 8007620:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <__ieee754_rem_pio2+0x350>)
 8007622:	4598      	cmp	r8, r3
 8007624:	dd36      	ble.n	8007694 <__ieee754_rem_pio2+0x354>
 8007626:	ee10 2a10 	vmov	r2, s0
 800762a:	462b      	mov	r3, r5
 800762c:	4620      	mov	r0, r4
 800762e:	4629      	mov	r1, r5
 8007630:	f7f8 fe4a 	bl	80002c8 <__aeabi_dsub>
 8007634:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007638:	e9ca 0100 	strd	r0, r1, [sl]
 800763c:	e694      	b.n	8007368 <__ieee754_rem_pio2+0x28>
 800763e:	bf00      	nop
 8007640:	54400000 	.word	0x54400000
 8007644:	3ff921fb 	.word	0x3ff921fb
 8007648:	1a626331 	.word	0x1a626331
 800764c:	3dd0b461 	.word	0x3dd0b461
 8007650:	1a600000 	.word	0x1a600000
 8007654:	3dd0b461 	.word	0x3dd0b461
 8007658:	2e037073 	.word	0x2e037073
 800765c:	3ba3198a 	.word	0x3ba3198a
 8007660:	6dc9c883 	.word	0x6dc9c883
 8007664:	3fe45f30 	.word	0x3fe45f30
 8007668:	2e000000 	.word	0x2e000000
 800766c:	3ba3198a 	.word	0x3ba3198a
 8007670:	252049c1 	.word	0x252049c1
 8007674:	397b839a 	.word	0x397b839a
 8007678:	3fe921fb 	.word	0x3fe921fb
 800767c:	4002d97b 	.word	0x4002d97b
 8007680:	3ff921fb 	.word	0x3ff921fb
 8007684:	413921fb 	.word	0x413921fb
 8007688:	3fe00000 	.word	0x3fe00000
 800768c:	08008764 	.word	0x08008764
 8007690:	7fefffff 	.word	0x7fefffff
 8007694:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007698:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800769c:	ee10 0a10 	vmov	r0, s0
 80076a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80076a4:	ee10 6a10 	vmov	r6, s0
 80076a8:	460f      	mov	r7, r1
 80076aa:	f7f9 fa75 	bl	8000b98 <__aeabi_d2iz>
 80076ae:	f7f8 ff59 	bl	8000564 <__aeabi_i2d>
 80076b2:	4602      	mov	r2, r0
 80076b4:	460b      	mov	r3, r1
 80076b6:	4630      	mov	r0, r6
 80076b8:	4639      	mov	r1, r7
 80076ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076be:	f7f8 fe03 	bl	80002c8 <__aeabi_dsub>
 80076c2:	4b23      	ldr	r3, [pc, #140]	; (8007750 <__ieee754_rem_pio2+0x410>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f7f8 ffb7 	bl	8000638 <__aeabi_dmul>
 80076ca:	460f      	mov	r7, r1
 80076cc:	4606      	mov	r6, r0
 80076ce:	f7f9 fa63 	bl	8000b98 <__aeabi_d2iz>
 80076d2:	f7f8 ff47 	bl	8000564 <__aeabi_i2d>
 80076d6:	4602      	mov	r2, r0
 80076d8:	460b      	mov	r3, r1
 80076da:	4630      	mov	r0, r6
 80076dc:	4639      	mov	r1, r7
 80076de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076e2:	f7f8 fdf1 	bl	80002c8 <__aeabi_dsub>
 80076e6:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <__ieee754_rem_pio2+0x410>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	f7f8 ffa5 	bl	8000638 <__aeabi_dmul>
 80076ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80076f2:	ad04      	add	r5, sp, #16
 80076f4:	f04f 0803 	mov.w	r8, #3
 80076f8:	46a9      	mov	r9, r5
 80076fa:	2600      	movs	r6, #0
 80076fc:	2700      	movs	r7, #0
 80076fe:	4632      	mov	r2, r6
 8007700:	463b      	mov	r3, r7
 8007702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007706:	46c3      	mov	fp, r8
 8007708:	3d08      	subs	r5, #8
 800770a:	f108 38ff 	add.w	r8, r8, #4294967295
 800770e:	f7f9 f9fb 	bl	8000b08 <__aeabi_dcmpeq>
 8007712:	2800      	cmp	r0, #0
 8007714:	d1f3      	bne.n	80076fe <__ieee754_rem_pio2+0x3be>
 8007716:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <__ieee754_rem_pio2+0x414>)
 8007718:	9301      	str	r3, [sp, #4]
 800771a:	2302      	movs	r3, #2
 800771c:	9300      	str	r3, [sp, #0]
 800771e:	4622      	mov	r2, r4
 8007720:	465b      	mov	r3, fp
 8007722:	4651      	mov	r1, sl
 8007724:	4648      	mov	r0, r9
 8007726:	f000 f8df 	bl	80078e8 <__kernel_rem_pio2>
 800772a:	9b02      	ldr	r3, [sp, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	4683      	mov	fp, r0
 8007730:	f6bf ae46 	bge.w	80073c0 <__ieee754_rem_pio2+0x80>
 8007734:	e9da 2100 	ldrd	r2, r1, [sl]
 8007738:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800773c:	e9ca 2300 	strd	r2, r3, [sl]
 8007740:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007744:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007748:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800774c:	e73a      	b.n	80075c4 <__ieee754_rem_pio2+0x284>
 800774e:	bf00      	nop
 8007750:	41700000 	.word	0x41700000
 8007754:	080087e4 	.word	0x080087e4

08007758 <__kernel_cos>:
 8007758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ec57 6b10 	vmov	r6, r7, d0
 8007760:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007764:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007768:	ed8d 1b00 	vstr	d1, [sp]
 800776c:	da07      	bge.n	800777e <__kernel_cos+0x26>
 800776e:	ee10 0a10 	vmov	r0, s0
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 fa10 	bl	8000b98 <__aeabi_d2iz>
 8007778:	2800      	cmp	r0, #0
 800777a:	f000 8088 	beq.w	800788e <__kernel_cos+0x136>
 800777e:	4632      	mov	r2, r6
 8007780:	463b      	mov	r3, r7
 8007782:	4630      	mov	r0, r6
 8007784:	4639      	mov	r1, r7
 8007786:	f7f8 ff57 	bl	8000638 <__aeabi_dmul>
 800778a:	4b51      	ldr	r3, [pc, #324]	; (80078d0 <__kernel_cos+0x178>)
 800778c:	2200      	movs	r2, #0
 800778e:	4604      	mov	r4, r0
 8007790:	460d      	mov	r5, r1
 8007792:	f7f8 ff51 	bl	8000638 <__aeabi_dmul>
 8007796:	a340      	add	r3, pc, #256	; (adr r3, 8007898 <__kernel_cos+0x140>)
 8007798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779c:	4682      	mov	sl, r0
 800779e:	468b      	mov	fp, r1
 80077a0:	4620      	mov	r0, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	f7f8 ff48 	bl	8000638 <__aeabi_dmul>
 80077a8:	a33d      	add	r3, pc, #244	; (adr r3, 80078a0 <__kernel_cos+0x148>)
 80077aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ae:	f7f8 fd8d 	bl	80002cc <__adddf3>
 80077b2:	4622      	mov	r2, r4
 80077b4:	462b      	mov	r3, r5
 80077b6:	f7f8 ff3f 	bl	8000638 <__aeabi_dmul>
 80077ba:	a33b      	add	r3, pc, #236	; (adr r3, 80078a8 <__kernel_cos+0x150>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fd82 	bl	80002c8 <__aeabi_dsub>
 80077c4:	4622      	mov	r2, r4
 80077c6:	462b      	mov	r3, r5
 80077c8:	f7f8 ff36 	bl	8000638 <__aeabi_dmul>
 80077cc:	a338      	add	r3, pc, #224	; (adr r3, 80078b0 <__kernel_cos+0x158>)
 80077ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d2:	f7f8 fd7b 	bl	80002cc <__adddf3>
 80077d6:	4622      	mov	r2, r4
 80077d8:	462b      	mov	r3, r5
 80077da:	f7f8 ff2d 	bl	8000638 <__aeabi_dmul>
 80077de:	a336      	add	r3, pc, #216	; (adr r3, 80078b8 <__kernel_cos+0x160>)
 80077e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e4:	f7f8 fd70 	bl	80002c8 <__aeabi_dsub>
 80077e8:	4622      	mov	r2, r4
 80077ea:	462b      	mov	r3, r5
 80077ec:	f7f8 ff24 	bl	8000638 <__aeabi_dmul>
 80077f0:	a333      	add	r3, pc, #204	; (adr r3, 80078c0 <__kernel_cos+0x168>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fd69 	bl	80002cc <__adddf3>
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	f7f8 ff1b 	bl	8000638 <__aeabi_dmul>
 8007802:	4622      	mov	r2, r4
 8007804:	462b      	mov	r3, r5
 8007806:	f7f8 ff17 	bl	8000638 <__aeabi_dmul>
 800780a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800780e:	4604      	mov	r4, r0
 8007810:	460d      	mov	r5, r1
 8007812:	4630      	mov	r0, r6
 8007814:	4639      	mov	r1, r7
 8007816:	f7f8 ff0f 	bl	8000638 <__aeabi_dmul>
 800781a:	460b      	mov	r3, r1
 800781c:	4602      	mov	r2, r0
 800781e:	4629      	mov	r1, r5
 8007820:	4620      	mov	r0, r4
 8007822:	f7f8 fd51 	bl	80002c8 <__aeabi_dsub>
 8007826:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <__kernel_cos+0x17c>)
 8007828:	4598      	cmp	r8, r3
 800782a:	4606      	mov	r6, r0
 800782c:	460f      	mov	r7, r1
 800782e:	dc10      	bgt.n	8007852 <__kernel_cos+0xfa>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	4650      	mov	r0, sl
 8007836:	4659      	mov	r1, fp
 8007838:	f7f8 fd46 	bl	80002c8 <__aeabi_dsub>
 800783c:	460b      	mov	r3, r1
 800783e:	4926      	ldr	r1, [pc, #152]	; (80078d8 <__kernel_cos+0x180>)
 8007840:	4602      	mov	r2, r0
 8007842:	2000      	movs	r0, #0
 8007844:	f7f8 fd40 	bl	80002c8 <__aeabi_dsub>
 8007848:	ec41 0b10 	vmov	d0, r0, r1
 800784c:	b003      	add	sp, #12
 800784e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007852:	4b22      	ldr	r3, [pc, #136]	; (80078dc <__kernel_cos+0x184>)
 8007854:	4920      	ldr	r1, [pc, #128]	; (80078d8 <__kernel_cos+0x180>)
 8007856:	4598      	cmp	r8, r3
 8007858:	bfcc      	ite	gt
 800785a:	4d21      	ldrgt	r5, [pc, #132]	; (80078e0 <__kernel_cos+0x188>)
 800785c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007860:	2400      	movs	r4, #0
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	2000      	movs	r0, #0
 8007868:	f7f8 fd2e 	bl	80002c8 <__aeabi_dsub>
 800786c:	4622      	mov	r2, r4
 800786e:	4680      	mov	r8, r0
 8007870:	4689      	mov	r9, r1
 8007872:	462b      	mov	r3, r5
 8007874:	4650      	mov	r0, sl
 8007876:	4659      	mov	r1, fp
 8007878:	f7f8 fd26 	bl	80002c8 <__aeabi_dsub>
 800787c:	4632      	mov	r2, r6
 800787e:	463b      	mov	r3, r7
 8007880:	f7f8 fd22 	bl	80002c8 <__aeabi_dsub>
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	4640      	mov	r0, r8
 800788a:	4649      	mov	r1, r9
 800788c:	e7da      	b.n	8007844 <__kernel_cos+0xec>
 800788e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80078c8 <__kernel_cos+0x170>
 8007892:	e7db      	b.n	800784c <__kernel_cos+0xf4>
 8007894:	f3af 8000 	nop.w
 8007898:	be8838d4 	.word	0xbe8838d4
 800789c:	bda8fae9 	.word	0xbda8fae9
 80078a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80078a4:	3e21ee9e 	.word	0x3e21ee9e
 80078a8:	809c52ad 	.word	0x809c52ad
 80078ac:	3e927e4f 	.word	0x3e927e4f
 80078b0:	19cb1590 	.word	0x19cb1590
 80078b4:	3efa01a0 	.word	0x3efa01a0
 80078b8:	16c15177 	.word	0x16c15177
 80078bc:	3f56c16c 	.word	0x3f56c16c
 80078c0:	5555554c 	.word	0x5555554c
 80078c4:	3fa55555 	.word	0x3fa55555
 80078c8:	00000000 	.word	0x00000000
 80078cc:	3ff00000 	.word	0x3ff00000
 80078d0:	3fe00000 	.word	0x3fe00000
 80078d4:	3fd33332 	.word	0x3fd33332
 80078d8:	3ff00000 	.word	0x3ff00000
 80078dc:	3fe90000 	.word	0x3fe90000
 80078e0:	3fd20000 	.word	0x3fd20000
 80078e4:	00000000 	.word	0x00000000

080078e8 <__kernel_rem_pio2>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	ed2d 8b02 	vpush	{d8}
 80078f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80078f4:	f112 0f14 	cmn.w	r2, #20
 80078f8:	9308      	str	r3, [sp, #32]
 80078fa:	9101      	str	r1, [sp, #4]
 80078fc:	4bc4      	ldr	r3, [pc, #784]	; (8007c10 <__kernel_rem_pio2+0x328>)
 80078fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007900:	900b      	str	r0, [sp, #44]	; 0x2c
 8007902:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007906:	9302      	str	r3, [sp, #8]
 8007908:	9b08      	ldr	r3, [sp, #32]
 800790a:	f103 33ff 	add.w	r3, r3, #4294967295
 800790e:	bfa8      	it	ge
 8007910:	1ed4      	subge	r4, r2, #3
 8007912:	9306      	str	r3, [sp, #24]
 8007914:	bfb2      	itee	lt
 8007916:	2400      	movlt	r4, #0
 8007918:	2318      	movge	r3, #24
 800791a:	fb94 f4f3 	sdivge	r4, r4, r3
 800791e:	f06f 0317 	mvn.w	r3, #23
 8007922:	fb04 3303 	mla	r3, r4, r3, r3
 8007926:	eb03 0a02 	add.w	sl, r3, r2
 800792a:	9b02      	ldr	r3, [sp, #8]
 800792c:	9a06      	ldr	r2, [sp, #24]
 800792e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007c00 <__kernel_rem_pio2+0x318>
 8007932:	eb03 0802 	add.w	r8, r3, r2
 8007936:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007938:	1aa7      	subs	r7, r4, r2
 800793a:	ae22      	add	r6, sp, #136	; 0x88
 800793c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007940:	2500      	movs	r5, #0
 8007942:	4545      	cmp	r5, r8
 8007944:	dd13      	ble.n	800796e <__kernel_rem_pio2+0x86>
 8007946:	9b08      	ldr	r3, [sp, #32]
 8007948:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007c00 <__kernel_rem_pio2+0x318>
 800794c:	aa22      	add	r2, sp, #136	; 0x88
 800794e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007952:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007956:	f04f 0800 	mov.w	r8, #0
 800795a:	9b02      	ldr	r3, [sp, #8]
 800795c:	4598      	cmp	r8, r3
 800795e:	dc2f      	bgt.n	80079c0 <__kernel_rem_pio2+0xd8>
 8007960:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007964:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007968:	462f      	mov	r7, r5
 800796a:	2600      	movs	r6, #0
 800796c:	e01b      	b.n	80079a6 <__kernel_rem_pio2+0xbe>
 800796e:	42ef      	cmn	r7, r5
 8007970:	d407      	bmi.n	8007982 <__kernel_rem_pio2+0x9a>
 8007972:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007976:	f7f8 fdf5 	bl	8000564 <__aeabi_i2d>
 800797a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800797e:	3501      	adds	r5, #1
 8007980:	e7df      	b.n	8007942 <__kernel_rem_pio2+0x5a>
 8007982:	ec51 0b18 	vmov	r0, r1, d8
 8007986:	e7f8      	b.n	800797a <__kernel_rem_pio2+0x92>
 8007988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800798c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007990:	f7f8 fe52 	bl	8000638 <__aeabi_dmul>
 8007994:	4602      	mov	r2, r0
 8007996:	460b      	mov	r3, r1
 8007998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800799c:	f7f8 fc96 	bl	80002cc <__adddf3>
 80079a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80079a4:	3601      	adds	r6, #1
 80079a6:	9b06      	ldr	r3, [sp, #24]
 80079a8:	429e      	cmp	r6, r3
 80079aa:	f1a7 0708 	sub.w	r7, r7, #8
 80079ae:	ddeb      	ble.n	8007988 <__kernel_rem_pio2+0xa0>
 80079b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80079b4:	f108 0801 	add.w	r8, r8, #1
 80079b8:	ecab 7b02 	vstmia	fp!, {d7}
 80079bc:	3508      	adds	r5, #8
 80079be:	e7cc      	b.n	800795a <__kernel_rem_pio2+0x72>
 80079c0:	9b02      	ldr	r3, [sp, #8]
 80079c2:	aa0e      	add	r2, sp, #56	; 0x38
 80079c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079c8:	930d      	str	r3, [sp, #52]	; 0x34
 80079ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80079cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80079d0:	9c02      	ldr	r4, [sp, #8]
 80079d2:	930c      	str	r3, [sp, #48]	; 0x30
 80079d4:	00e3      	lsls	r3, r4, #3
 80079d6:	930a      	str	r3, [sp, #40]	; 0x28
 80079d8:	ab9a      	add	r3, sp, #616	; 0x268
 80079da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80079de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80079e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80079e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80079e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80079ec:	46c3      	mov	fp, r8
 80079ee:	46a1      	mov	r9, r4
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	f1a5 0508 	sub.w	r5, r5, #8
 80079f8:	dc77      	bgt.n	8007aea <__kernel_rem_pio2+0x202>
 80079fa:	ec47 6b10 	vmov	d0, r6, r7
 80079fe:	4650      	mov	r0, sl
 8007a00:	f000 fc0a 	bl	8008218 <scalbn>
 8007a04:	ec57 6b10 	vmov	r6, r7, d0
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007a0e:	ee10 0a10 	vmov	r0, s0
 8007a12:	4639      	mov	r1, r7
 8007a14:	f7f8 fe10 	bl	8000638 <__aeabi_dmul>
 8007a18:	ec41 0b10 	vmov	d0, r0, r1
 8007a1c:	f000 fb7c 	bl	8008118 <floor>
 8007a20:	4b7c      	ldr	r3, [pc, #496]	; (8007c14 <__kernel_rem_pio2+0x32c>)
 8007a22:	ec51 0b10 	vmov	r0, r1, d0
 8007a26:	2200      	movs	r2, #0
 8007a28:	f7f8 fe06 	bl	8000638 <__aeabi_dmul>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	4630      	mov	r0, r6
 8007a32:	4639      	mov	r1, r7
 8007a34:	f7f8 fc48 	bl	80002c8 <__aeabi_dsub>
 8007a38:	460f      	mov	r7, r1
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	f7f9 f8ac 	bl	8000b98 <__aeabi_d2iz>
 8007a40:	9004      	str	r0, [sp, #16]
 8007a42:	f7f8 fd8f 	bl	8000564 <__aeabi_i2d>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4630      	mov	r0, r6
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f8 fc3b 	bl	80002c8 <__aeabi_dsub>
 8007a52:	f1ba 0f00 	cmp.w	sl, #0
 8007a56:	4606      	mov	r6, r0
 8007a58:	460f      	mov	r7, r1
 8007a5a:	dd6d      	ble.n	8007b38 <__kernel_rem_pio2+0x250>
 8007a5c:	1e62      	subs	r2, r4, #1
 8007a5e:	ab0e      	add	r3, sp, #56	; 0x38
 8007a60:	9d04      	ldr	r5, [sp, #16]
 8007a62:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007a66:	f1ca 0118 	rsb	r1, sl, #24
 8007a6a:	fa40 f301 	asr.w	r3, r0, r1
 8007a6e:	441d      	add	r5, r3
 8007a70:	408b      	lsls	r3, r1
 8007a72:	1ac0      	subs	r0, r0, r3
 8007a74:	ab0e      	add	r3, sp, #56	; 0x38
 8007a76:	9504      	str	r5, [sp, #16]
 8007a78:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007a7c:	f1ca 0317 	rsb	r3, sl, #23
 8007a80:	fa40 fb03 	asr.w	fp, r0, r3
 8007a84:	f1bb 0f00 	cmp.w	fp, #0
 8007a88:	dd65      	ble.n	8007b56 <__kernel_rem_pio2+0x26e>
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	3301      	adds	r3, #1
 8007a90:	9304      	str	r3, [sp, #16]
 8007a92:	4615      	mov	r5, r2
 8007a94:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007a98:	4294      	cmp	r4, r2
 8007a9a:	f300 809c 	bgt.w	8007bd6 <__kernel_rem_pio2+0x2ee>
 8007a9e:	f1ba 0f00 	cmp.w	sl, #0
 8007aa2:	dd07      	ble.n	8007ab4 <__kernel_rem_pio2+0x1cc>
 8007aa4:	f1ba 0f01 	cmp.w	sl, #1
 8007aa8:	f000 80c0 	beq.w	8007c2c <__kernel_rem_pio2+0x344>
 8007aac:	f1ba 0f02 	cmp.w	sl, #2
 8007ab0:	f000 80c6 	beq.w	8007c40 <__kernel_rem_pio2+0x358>
 8007ab4:	f1bb 0f02 	cmp.w	fp, #2
 8007ab8:	d14d      	bne.n	8007b56 <__kernel_rem_pio2+0x26e>
 8007aba:	4632      	mov	r2, r6
 8007abc:	463b      	mov	r3, r7
 8007abe:	4956      	ldr	r1, [pc, #344]	; (8007c18 <__kernel_rem_pio2+0x330>)
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f7f8 fc01 	bl	80002c8 <__aeabi_dsub>
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	460f      	mov	r7, r1
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	d043      	beq.n	8007b56 <__kernel_rem_pio2+0x26e>
 8007ace:	4650      	mov	r0, sl
 8007ad0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007c08 <__kernel_rem_pio2+0x320>
 8007ad4:	f000 fba0 	bl	8008218 <scalbn>
 8007ad8:	4630      	mov	r0, r6
 8007ada:	4639      	mov	r1, r7
 8007adc:	ec53 2b10 	vmov	r2, r3, d0
 8007ae0:	f7f8 fbf2 	bl	80002c8 <__aeabi_dsub>
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	460f      	mov	r7, r1
 8007ae8:	e035      	b.n	8007b56 <__kernel_rem_pio2+0x26e>
 8007aea:	4b4c      	ldr	r3, [pc, #304]	; (8007c1c <__kernel_rem_pio2+0x334>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 fda1 	bl	8000638 <__aeabi_dmul>
 8007af6:	f7f9 f84f 	bl	8000b98 <__aeabi_d2iz>
 8007afa:	f7f8 fd33 	bl	8000564 <__aeabi_i2d>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	ec43 2b18 	vmov	d8, r2, r3
 8007b06:	4b46      	ldr	r3, [pc, #280]	; (8007c20 <__kernel_rem_pio2+0x338>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fd95 	bl	8000638 <__aeabi_dmul>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	4630      	mov	r0, r6
 8007b14:	4639      	mov	r1, r7
 8007b16:	f7f8 fbd7 	bl	80002c8 <__aeabi_dsub>
 8007b1a:	f7f9 f83d 	bl	8000b98 <__aeabi_d2iz>
 8007b1e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b22:	f84b 0b04 	str.w	r0, [fp], #4
 8007b26:	ec51 0b18 	vmov	r0, r1, d8
 8007b2a:	f7f8 fbcf 	bl	80002cc <__adddf3>
 8007b2e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007b32:	4606      	mov	r6, r0
 8007b34:	460f      	mov	r7, r1
 8007b36:	e75b      	b.n	80079f0 <__kernel_rem_pio2+0x108>
 8007b38:	d106      	bne.n	8007b48 <__kernel_rem_pio2+0x260>
 8007b3a:	1e63      	subs	r3, r4, #1
 8007b3c:	aa0e      	add	r2, sp, #56	; 0x38
 8007b3e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b42:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007b46:	e79d      	b.n	8007a84 <__kernel_rem_pio2+0x19c>
 8007b48:	4b36      	ldr	r3, [pc, #216]	; (8007c24 <__kernel_rem_pio2+0x33c>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f7f8 fffa 	bl	8000b44 <__aeabi_dcmpge>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	d13d      	bne.n	8007bd0 <__kernel_rem_pio2+0x2e8>
 8007b54:	4683      	mov	fp, r0
 8007b56:	2200      	movs	r2, #0
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4630      	mov	r0, r6
 8007b5c:	4639      	mov	r1, r7
 8007b5e:	f7f8 ffd3 	bl	8000b08 <__aeabi_dcmpeq>
 8007b62:	2800      	cmp	r0, #0
 8007b64:	f000 80c0 	beq.w	8007ce8 <__kernel_rem_pio2+0x400>
 8007b68:	1e65      	subs	r5, r4, #1
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	9902      	ldr	r1, [sp, #8]
 8007b70:	428b      	cmp	r3, r1
 8007b72:	da6c      	bge.n	8007c4e <__kernel_rem_pio2+0x366>
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	f000 8089 	beq.w	8007c8c <__kernel_rem_pio2+0x3a4>
 8007b7a:	ab0e      	add	r3, sp, #56	; 0x38
 8007b7c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007b80:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f000 80ad 	beq.w	8007ce4 <__kernel_rem_pio2+0x3fc>
 8007b8a:	4650      	mov	r0, sl
 8007b8c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007c08 <__kernel_rem_pio2+0x320>
 8007b90:	f000 fb42 	bl	8008218 <scalbn>
 8007b94:	ab9a      	add	r3, sp, #616	; 0x268
 8007b96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007b9a:	ec57 6b10 	vmov	r6, r7, d0
 8007b9e:	00ec      	lsls	r4, r5, #3
 8007ba0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007ba4:	46aa      	mov	sl, r5
 8007ba6:	f1ba 0f00 	cmp.w	sl, #0
 8007baa:	f280 80d6 	bge.w	8007d5a <__kernel_rem_pio2+0x472>
 8007bae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007c00 <__kernel_rem_pio2+0x318>
 8007bb2:	462e      	mov	r6, r5
 8007bb4:	2e00      	cmp	r6, #0
 8007bb6:	f2c0 8104 	blt.w	8007dc2 <__kernel_rem_pio2+0x4da>
 8007bba:	ab72      	add	r3, sp, #456	; 0x1c8
 8007bbc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007bc0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007c28 <__kernel_rem_pio2+0x340>
 8007bc4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007bc8:	f04f 0800 	mov.w	r8, #0
 8007bcc:	1baf      	subs	r7, r5, r6
 8007bce:	e0ea      	b.n	8007da6 <__kernel_rem_pio2+0x4be>
 8007bd0:	f04f 0b02 	mov.w	fp, #2
 8007bd4:	e759      	b.n	8007a8a <__kernel_rem_pio2+0x1a2>
 8007bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8007bda:	b955      	cbnz	r5, 8007bf2 <__kernel_rem_pio2+0x30a>
 8007bdc:	b123      	cbz	r3, 8007be8 <__kernel_rem_pio2+0x300>
 8007bde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007be2:	f8c8 3000 	str.w	r3, [r8]
 8007be6:	2301      	movs	r3, #1
 8007be8:	3201      	adds	r2, #1
 8007bea:	f108 0804 	add.w	r8, r8, #4
 8007bee:	461d      	mov	r5, r3
 8007bf0:	e752      	b.n	8007a98 <__kernel_rem_pio2+0x1b0>
 8007bf2:	1acb      	subs	r3, r1, r3
 8007bf4:	f8c8 3000 	str.w	r3, [r8]
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	e7f5      	b.n	8007be8 <__kernel_rem_pio2+0x300>
 8007bfc:	f3af 8000 	nop.w
	...
 8007c0c:	3ff00000 	.word	0x3ff00000
 8007c10:	08008930 	.word	0x08008930
 8007c14:	40200000 	.word	0x40200000
 8007c18:	3ff00000 	.word	0x3ff00000
 8007c1c:	3e700000 	.word	0x3e700000
 8007c20:	41700000 	.word	0x41700000
 8007c24:	3fe00000 	.word	0x3fe00000
 8007c28:	080088f0 	.word	0x080088f0
 8007c2c:	1e62      	subs	r2, r4, #1
 8007c2e:	ab0e      	add	r3, sp, #56	; 0x38
 8007c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c34:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007c38:	a90e      	add	r1, sp, #56	; 0x38
 8007c3a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007c3e:	e739      	b.n	8007ab4 <__kernel_rem_pio2+0x1cc>
 8007c40:	1e62      	subs	r2, r4, #1
 8007c42:	ab0e      	add	r3, sp, #56	; 0x38
 8007c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007c4c:	e7f4      	b.n	8007c38 <__kernel_rem_pio2+0x350>
 8007c4e:	a90e      	add	r1, sp, #56	; 0x38
 8007c50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007c54:	3b01      	subs	r3, #1
 8007c56:	430a      	orrs	r2, r1
 8007c58:	e789      	b.n	8007b6e <__kernel_rem_pio2+0x286>
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007c60:	2900      	cmp	r1, #0
 8007c62:	d0fa      	beq.n	8007c5a <__kernel_rem_pio2+0x372>
 8007c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c66:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007c6a:	446a      	add	r2, sp
 8007c6c:	3a98      	subs	r2, #152	; 0x98
 8007c6e:	920a      	str	r2, [sp, #40]	; 0x28
 8007c70:	9a08      	ldr	r2, [sp, #32]
 8007c72:	18e3      	adds	r3, r4, r3
 8007c74:	18a5      	adds	r5, r4, r2
 8007c76:	aa22      	add	r2, sp, #136	; 0x88
 8007c78:	f104 0801 	add.w	r8, r4, #1
 8007c7c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007c80:	9304      	str	r3, [sp, #16]
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	4543      	cmp	r3, r8
 8007c86:	da04      	bge.n	8007c92 <__kernel_rem_pio2+0x3aa>
 8007c88:	461c      	mov	r4, r3
 8007c8a:	e6a3      	b.n	80079d4 <__kernel_rem_pio2+0xec>
 8007c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7e4      	b.n	8007c5c <__kernel_rem_pio2+0x374>
 8007c92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007c98:	f7f8 fc64 	bl	8000564 <__aeabi_i2d>
 8007c9c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007ca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ca2:	46ab      	mov	fp, r5
 8007ca4:	461c      	mov	r4, r3
 8007ca6:	f04f 0900 	mov.w	r9, #0
 8007caa:	2600      	movs	r6, #0
 8007cac:	2700      	movs	r7, #0
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	4599      	cmp	r9, r3
 8007cb2:	dd06      	ble.n	8007cc2 <__kernel_rem_pio2+0x3da>
 8007cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007cba:	f108 0801 	add.w	r8, r8, #1
 8007cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc0:	e7df      	b.n	8007c82 <__kernel_rem_pio2+0x39a>
 8007cc2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007cc6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007cca:	f7f8 fcb5 	bl	8000638 <__aeabi_dmul>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 faf9 	bl	80002cc <__adddf3>
 8007cda:	f109 0901 	add.w	r9, r9, #1
 8007cde:	4606      	mov	r6, r0
 8007ce0:	460f      	mov	r7, r1
 8007ce2:	e7e4      	b.n	8007cae <__kernel_rem_pio2+0x3c6>
 8007ce4:	3d01      	subs	r5, #1
 8007ce6:	e748      	b.n	8007b7a <__kernel_rem_pio2+0x292>
 8007ce8:	ec47 6b10 	vmov	d0, r6, r7
 8007cec:	f1ca 0000 	rsb	r0, sl, #0
 8007cf0:	f000 fa92 	bl	8008218 <scalbn>
 8007cf4:	ec57 6b10 	vmov	r6, r7, d0
 8007cf8:	4ba0      	ldr	r3, [pc, #640]	; (8007f7c <__kernel_rem_pio2+0x694>)
 8007cfa:	ee10 0a10 	vmov	r0, s0
 8007cfe:	2200      	movs	r2, #0
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 ff1f 	bl	8000b44 <__aeabi_dcmpge>
 8007d06:	b1f8      	cbz	r0, 8007d48 <__kernel_rem_pio2+0x460>
 8007d08:	4b9d      	ldr	r3, [pc, #628]	; (8007f80 <__kernel_rem_pio2+0x698>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	4630      	mov	r0, r6
 8007d0e:	4639      	mov	r1, r7
 8007d10:	f7f8 fc92 	bl	8000638 <__aeabi_dmul>
 8007d14:	f7f8 ff40 	bl	8000b98 <__aeabi_d2iz>
 8007d18:	4680      	mov	r8, r0
 8007d1a:	f7f8 fc23 	bl	8000564 <__aeabi_i2d>
 8007d1e:	4b97      	ldr	r3, [pc, #604]	; (8007f7c <__kernel_rem_pio2+0x694>)
 8007d20:	2200      	movs	r2, #0
 8007d22:	f7f8 fc89 	bl	8000638 <__aeabi_dmul>
 8007d26:	460b      	mov	r3, r1
 8007d28:	4602      	mov	r2, r0
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7f8 facb 	bl	80002c8 <__aeabi_dsub>
 8007d32:	f7f8 ff31 	bl	8000b98 <__aeabi_d2iz>
 8007d36:	1c65      	adds	r5, r4, #1
 8007d38:	ab0e      	add	r3, sp, #56	; 0x38
 8007d3a:	f10a 0a18 	add.w	sl, sl, #24
 8007d3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d42:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007d46:	e720      	b.n	8007b8a <__kernel_rem_pio2+0x2a2>
 8007d48:	4630      	mov	r0, r6
 8007d4a:	4639      	mov	r1, r7
 8007d4c:	f7f8 ff24 	bl	8000b98 <__aeabi_d2iz>
 8007d50:	ab0e      	add	r3, sp, #56	; 0x38
 8007d52:	4625      	mov	r5, r4
 8007d54:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007d58:	e717      	b.n	8007b8a <__kernel_rem_pio2+0x2a2>
 8007d5a:	ab0e      	add	r3, sp, #56	; 0x38
 8007d5c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007d60:	f7f8 fc00 	bl	8000564 <__aeabi_i2d>
 8007d64:	4632      	mov	r2, r6
 8007d66:	463b      	mov	r3, r7
 8007d68:	f7f8 fc66 	bl	8000638 <__aeabi_dmul>
 8007d6c:	4b84      	ldr	r3, [pc, #528]	; (8007f80 <__kernel_rem_pio2+0x698>)
 8007d6e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007d72:	2200      	movs	r2, #0
 8007d74:	4630      	mov	r0, r6
 8007d76:	4639      	mov	r1, r7
 8007d78:	f7f8 fc5e 	bl	8000638 <__aeabi_dmul>
 8007d7c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d80:	4606      	mov	r6, r0
 8007d82:	460f      	mov	r7, r1
 8007d84:	e70f      	b.n	8007ba6 <__kernel_rem_pio2+0x2be>
 8007d86:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007d8a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007d8e:	f7f8 fc53 	bl	8000638 <__aeabi_dmul>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d9a:	f7f8 fa97 	bl	80002cc <__adddf3>
 8007d9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007da2:	f108 0801 	add.w	r8, r8, #1
 8007da6:	9b02      	ldr	r3, [sp, #8]
 8007da8:	4598      	cmp	r8, r3
 8007daa:	dc01      	bgt.n	8007db0 <__kernel_rem_pio2+0x4c8>
 8007dac:	45b8      	cmp	r8, r7
 8007dae:	ddea      	ble.n	8007d86 <__kernel_rem_pio2+0x49e>
 8007db0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007db4:	ab4a      	add	r3, sp, #296	; 0x128
 8007db6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007dba:	ed87 7b00 	vstr	d7, [r7]
 8007dbe:	3e01      	subs	r6, #1
 8007dc0:	e6f8      	b.n	8007bb4 <__kernel_rem_pio2+0x2cc>
 8007dc2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	dc0b      	bgt.n	8007de0 <__kernel_rem_pio2+0x4f8>
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dc35      	bgt.n	8007e38 <__kernel_rem_pio2+0x550>
 8007dcc:	d059      	beq.n	8007e82 <__kernel_rem_pio2+0x59a>
 8007dce:	9b04      	ldr	r3, [sp, #16]
 8007dd0:	f003 0007 	and.w	r0, r3, #7
 8007dd4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007dd8:	ecbd 8b02 	vpop	{d8}
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007de2:	2b03      	cmp	r3, #3
 8007de4:	d1f3      	bne.n	8007dce <__kernel_rem_pio2+0x4e6>
 8007de6:	ab4a      	add	r3, sp, #296	; 0x128
 8007de8:	4423      	add	r3, r4
 8007dea:	9306      	str	r3, [sp, #24]
 8007dec:	461c      	mov	r4, r3
 8007dee:	469a      	mov	sl, r3
 8007df0:	9502      	str	r5, [sp, #8]
 8007df2:	9b02      	ldr	r3, [sp, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f1aa 0a08 	sub.w	sl, sl, #8
 8007dfa:	dc6b      	bgt.n	8007ed4 <__kernel_rem_pio2+0x5ec>
 8007dfc:	46aa      	mov	sl, r5
 8007dfe:	f1ba 0f01 	cmp.w	sl, #1
 8007e02:	f1a4 0408 	sub.w	r4, r4, #8
 8007e06:	f300 8085 	bgt.w	8007f14 <__kernel_rem_pio2+0x62c>
 8007e0a:	9c06      	ldr	r4, [sp, #24]
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	3408      	adds	r4, #8
 8007e10:	2100      	movs	r1, #0
 8007e12:	2d01      	cmp	r5, #1
 8007e14:	f300 809d 	bgt.w	8007f52 <__kernel_rem_pio2+0x66a>
 8007e18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007e1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007e20:	f1bb 0f00 	cmp.w	fp, #0
 8007e24:	f040 809b 	bne.w	8007f5e <__kernel_rem_pio2+0x676>
 8007e28:	9b01      	ldr	r3, [sp, #4]
 8007e2a:	e9c3 5600 	strd	r5, r6, [r3]
 8007e2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007e32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007e36:	e7ca      	b.n	8007dce <__kernel_rem_pio2+0x4e6>
 8007e38:	3408      	adds	r4, #8
 8007e3a:	ab4a      	add	r3, sp, #296	; 0x128
 8007e3c:	441c      	add	r4, r3
 8007e3e:	462e      	mov	r6, r5
 8007e40:	2000      	movs	r0, #0
 8007e42:	2100      	movs	r1, #0
 8007e44:	2e00      	cmp	r6, #0
 8007e46:	da36      	bge.n	8007eb6 <__kernel_rem_pio2+0x5ce>
 8007e48:	f1bb 0f00 	cmp.w	fp, #0
 8007e4c:	d039      	beq.n	8007ec2 <__kernel_rem_pio2+0x5da>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e54:	9c01      	ldr	r4, [sp, #4]
 8007e56:	e9c4 2300 	strd	r2, r3, [r4]
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007e62:	f7f8 fa31 	bl	80002c8 <__aeabi_dsub>
 8007e66:	ae4c      	add	r6, sp, #304	; 0x130
 8007e68:	2401      	movs	r4, #1
 8007e6a:	42a5      	cmp	r5, r4
 8007e6c:	da2c      	bge.n	8007ec8 <__kernel_rem_pio2+0x5e0>
 8007e6e:	f1bb 0f00 	cmp.w	fp, #0
 8007e72:	d002      	beq.n	8007e7a <__kernel_rem_pio2+0x592>
 8007e74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e78:	4619      	mov	r1, r3
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007e80:	e7a5      	b.n	8007dce <__kernel_rem_pio2+0x4e6>
 8007e82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007e86:	eb0d 0403 	add.w	r4, sp, r3
 8007e8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007e8e:	2000      	movs	r0, #0
 8007e90:	2100      	movs	r1, #0
 8007e92:	2d00      	cmp	r5, #0
 8007e94:	da09      	bge.n	8007eaa <__kernel_rem_pio2+0x5c2>
 8007e96:	f1bb 0f00 	cmp.w	fp, #0
 8007e9a:	d002      	beq.n	8007ea2 <__kernel_rem_pio2+0x5ba>
 8007e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	9b01      	ldr	r3, [sp, #4]
 8007ea4:	e9c3 0100 	strd	r0, r1, [r3]
 8007ea8:	e791      	b.n	8007dce <__kernel_rem_pio2+0x4e6>
 8007eaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007eae:	f7f8 fa0d 	bl	80002cc <__adddf3>
 8007eb2:	3d01      	subs	r5, #1
 8007eb4:	e7ed      	b.n	8007e92 <__kernel_rem_pio2+0x5aa>
 8007eb6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007eba:	f7f8 fa07 	bl	80002cc <__adddf3>
 8007ebe:	3e01      	subs	r6, #1
 8007ec0:	e7c0      	b.n	8007e44 <__kernel_rem_pio2+0x55c>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	460b      	mov	r3, r1
 8007ec6:	e7c5      	b.n	8007e54 <__kernel_rem_pio2+0x56c>
 8007ec8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007ecc:	f7f8 f9fe 	bl	80002cc <__adddf3>
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	e7ca      	b.n	8007e6a <__kernel_rem_pio2+0x582>
 8007ed4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ed8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	9302      	str	r3, [sp, #8]
 8007ee2:	4632      	mov	r2, r6
 8007ee4:	463b      	mov	r3, r7
 8007ee6:	4640      	mov	r0, r8
 8007ee8:	4649      	mov	r1, r9
 8007eea:	f7f8 f9ef 	bl	80002cc <__adddf3>
 8007eee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	4649      	mov	r1, r9
 8007efa:	f7f8 f9e5 	bl	80002c8 <__aeabi_dsub>
 8007efe:	4632      	mov	r2, r6
 8007f00:	463b      	mov	r3, r7
 8007f02:	f7f8 f9e3 	bl	80002cc <__adddf3>
 8007f06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007f0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007f0e:	ed8a 7b00 	vstr	d7, [sl]
 8007f12:	e76e      	b.n	8007df2 <__kernel_rem_pio2+0x50a>
 8007f14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007f18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007f1c:	4640      	mov	r0, r8
 8007f1e:	4632      	mov	r2, r6
 8007f20:	463b      	mov	r3, r7
 8007f22:	4649      	mov	r1, r9
 8007f24:	f7f8 f9d2 	bl	80002cc <__adddf3>
 8007f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	f7f8 f9c8 	bl	80002c8 <__aeabi_dsub>
 8007f38:	4632      	mov	r2, r6
 8007f3a:	463b      	mov	r3, r7
 8007f3c:	f7f8 f9c6 	bl	80002cc <__adddf3>
 8007f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f48:	ed84 7b00 	vstr	d7, [r4]
 8007f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f50:	e755      	b.n	8007dfe <__kernel_rem_pio2+0x516>
 8007f52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007f56:	f7f8 f9b9 	bl	80002cc <__adddf3>
 8007f5a:	3d01      	subs	r5, #1
 8007f5c:	e759      	b.n	8007e12 <__kernel_rem_pio2+0x52a>
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	9a01      	ldr	r2, [sp, #4]
 8007f62:	601d      	str	r5, [r3, #0]
 8007f64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007f68:	605c      	str	r4, [r3, #4]
 8007f6a:	609f      	str	r7, [r3, #8]
 8007f6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007f70:	60d3      	str	r3, [r2, #12]
 8007f72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f76:	6110      	str	r0, [r2, #16]
 8007f78:	6153      	str	r3, [r2, #20]
 8007f7a:	e728      	b.n	8007dce <__kernel_rem_pio2+0x4e6>
 8007f7c:	41700000 	.word	0x41700000
 8007f80:	3e700000 	.word	0x3e700000
 8007f84:	00000000 	.word	0x00000000

08007f88 <__kernel_sin>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b04 	vpush	{d8-d9}
 8007f90:	eeb0 8a41 	vmov.f32	s16, s2
 8007f94:	eef0 8a61 	vmov.f32	s17, s3
 8007f98:	ec55 4b10 	vmov	r4, r5, d0
 8007f9c:	b083      	sub	sp, #12
 8007f9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007fa2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007fa6:	9001      	str	r0, [sp, #4]
 8007fa8:	da06      	bge.n	8007fb8 <__kernel_sin+0x30>
 8007faa:	ee10 0a10 	vmov	r0, s0
 8007fae:	4629      	mov	r1, r5
 8007fb0:	f7f8 fdf2 	bl	8000b98 <__aeabi_d2iz>
 8007fb4:	2800      	cmp	r0, #0
 8007fb6:	d051      	beq.n	800805c <__kernel_sin+0xd4>
 8007fb8:	4622      	mov	r2, r4
 8007fba:	462b      	mov	r3, r5
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	4629      	mov	r1, r5
 8007fc0:	f7f8 fb3a 	bl	8000638 <__aeabi_dmul>
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	468b      	mov	fp, r1
 8007fc8:	4602      	mov	r2, r0
 8007fca:	460b      	mov	r3, r1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	4629      	mov	r1, r5
 8007fd0:	f7f8 fb32 	bl	8000638 <__aeabi_dmul>
 8007fd4:	a341      	add	r3, pc, #260	; (adr r3, 80080dc <__kernel_sin+0x154>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4689      	mov	r9, r1
 8007fde:	4650      	mov	r0, sl
 8007fe0:	4659      	mov	r1, fp
 8007fe2:	f7f8 fb29 	bl	8000638 <__aeabi_dmul>
 8007fe6:	a33f      	add	r3, pc, #252	; (adr r3, 80080e4 <__kernel_sin+0x15c>)
 8007fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fec:	f7f8 f96c 	bl	80002c8 <__aeabi_dsub>
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	465b      	mov	r3, fp
 8007ff4:	f7f8 fb20 	bl	8000638 <__aeabi_dmul>
 8007ff8:	a33c      	add	r3, pc, #240	; (adr r3, 80080ec <__kernel_sin+0x164>)
 8007ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffe:	f7f8 f965 	bl	80002cc <__adddf3>
 8008002:	4652      	mov	r2, sl
 8008004:	465b      	mov	r3, fp
 8008006:	f7f8 fb17 	bl	8000638 <__aeabi_dmul>
 800800a:	a33a      	add	r3, pc, #232	; (adr r3, 80080f4 <__kernel_sin+0x16c>)
 800800c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008010:	f7f8 f95a 	bl	80002c8 <__aeabi_dsub>
 8008014:	4652      	mov	r2, sl
 8008016:	465b      	mov	r3, fp
 8008018:	f7f8 fb0e 	bl	8000638 <__aeabi_dmul>
 800801c:	a337      	add	r3, pc, #220	; (adr r3, 80080fc <__kernel_sin+0x174>)
 800801e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008022:	f7f8 f953 	bl	80002cc <__adddf3>
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	4606      	mov	r6, r0
 800802a:	460f      	mov	r7, r1
 800802c:	b9eb      	cbnz	r3, 800806a <__kernel_sin+0xe2>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	4650      	mov	r0, sl
 8008034:	4659      	mov	r1, fp
 8008036:	f7f8 faff 	bl	8000638 <__aeabi_dmul>
 800803a:	a325      	add	r3, pc, #148	; (adr r3, 80080d0 <__kernel_sin+0x148>)
 800803c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008040:	f7f8 f942 	bl	80002c8 <__aeabi_dsub>
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	f7f8 faf6 	bl	8000638 <__aeabi_dmul>
 800804c:	4602      	mov	r2, r0
 800804e:	460b      	mov	r3, r1
 8008050:	4620      	mov	r0, r4
 8008052:	4629      	mov	r1, r5
 8008054:	f7f8 f93a 	bl	80002cc <__adddf3>
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	ec45 4b10 	vmov	d0, r4, r5
 8008060:	b003      	add	sp, #12
 8008062:	ecbd 8b04 	vpop	{d8-d9}
 8008066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806a:	4b1b      	ldr	r3, [pc, #108]	; (80080d8 <__kernel_sin+0x150>)
 800806c:	ec51 0b18 	vmov	r0, r1, d8
 8008070:	2200      	movs	r2, #0
 8008072:	f7f8 fae1 	bl	8000638 <__aeabi_dmul>
 8008076:	4632      	mov	r2, r6
 8008078:	ec41 0b19 	vmov	d9, r0, r1
 800807c:	463b      	mov	r3, r7
 800807e:	4640      	mov	r0, r8
 8008080:	4649      	mov	r1, r9
 8008082:	f7f8 fad9 	bl	8000638 <__aeabi_dmul>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	ec51 0b19 	vmov	r0, r1, d9
 800808e:	f7f8 f91b 	bl	80002c8 <__aeabi_dsub>
 8008092:	4652      	mov	r2, sl
 8008094:	465b      	mov	r3, fp
 8008096:	f7f8 facf 	bl	8000638 <__aeabi_dmul>
 800809a:	ec53 2b18 	vmov	r2, r3, d8
 800809e:	f7f8 f913 	bl	80002c8 <__aeabi_dsub>
 80080a2:	a30b      	add	r3, pc, #44	; (adr r3, 80080d0 <__kernel_sin+0x148>)
 80080a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a8:	4606      	mov	r6, r0
 80080aa:	460f      	mov	r7, r1
 80080ac:	4640      	mov	r0, r8
 80080ae:	4649      	mov	r1, r9
 80080b0:	f7f8 fac2 	bl	8000638 <__aeabi_dmul>
 80080b4:	4602      	mov	r2, r0
 80080b6:	460b      	mov	r3, r1
 80080b8:	4630      	mov	r0, r6
 80080ba:	4639      	mov	r1, r7
 80080bc:	f7f8 f906 	bl	80002cc <__adddf3>
 80080c0:	4602      	mov	r2, r0
 80080c2:	460b      	mov	r3, r1
 80080c4:	4620      	mov	r0, r4
 80080c6:	4629      	mov	r1, r5
 80080c8:	f7f8 f8fe 	bl	80002c8 <__aeabi_dsub>
 80080cc:	e7c4      	b.n	8008058 <__kernel_sin+0xd0>
 80080ce:	bf00      	nop
 80080d0:	55555549 	.word	0x55555549
 80080d4:	3fc55555 	.word	0x3fc55555
 80080d8:	3fe00000 	.word	0x3fe00000
 80080dc:	5acfd57c 	.word	0x5acfd57c
 80080e0:	3de5d93a 	.word	0x3de5d93a
 80080e4:	8a2b9ceb 	.word	0x8a2b9ceb
 80080e8:	3e5ae5e6 	.word	0x3e5ae5e6
 80080ec:	57b1fe7d 	.word	0x57b1fe7d
 80080f0:	3ec71de3 	.word	0x3ec71de3
 80080f4:	19c161d5 	.word	0x19c161d5
 80080f8:	3f2a01a0 	.word	0x3f2a01a0
 80080fc:	1110f8a6 	.word	0x1110f8a6
 8008100:	3f811111 	.word	0x3f811111

08008104 <fabs>:
 8008104:	ec51 0b10 	vmov	r0, r1, d0
 8008108:	ee10 2a10 	vmov	r2, s0
 800810c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008110:	ec43 2b10 	vmov	d0, r2, r3
 8008114:	4770      	bx	lr
	...

08008118 <floor>:
 8008118:	ec51 0b10 	vmov	r0, r1, d0
 800811c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008124:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008128:	2e13      	cmp	r6, #19
 800812a:	ee10 5a10 	vmov	r5, s0
 800812e:	ee10 8a10 	vmov	r8, s0
 8008132:	460c      	mov	r4, r1
 8008134:	dc32      	bgt.n	800819c <floor+0x84>
 8008136:	2e00      	cmp	r6, #0
 8008138:	da14      	bge.n	8008164 <floor+0x4c>
 800813a:	a333      	add	r3, pc, #204	; (adr r3, 8008208 <floor+0xf0>)
 800813c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008140:	f7f8 f8c4 	bl	80002cc <__adddf3>
 8008144:	2200      	movs	r2, #0
 8008146:	2300      	movs	r3, #0
 8008148:	f7f8 fd06 	bl	8000b58 <__aeabi_dcmpgt>
 800814c:	b138      	cbz	r0, 800815e <floor+0x46>
 800814e:	2c00      	cmp	r4, #0
 8008150:	da57      	bge.n	8008202 <floor+0xea>
 8008152:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008156:	431d      	orrs	r5, r3
 8008158:	d001      	beq.n	800815e <floor+0x46>
 800815a:	4c2d      	ldr	r4, [pc, #180]	; (8008210 <floor+0xf8>)
 800815c:	2500      	movs	r5, #0
 800815e:	4621      	mov	r1, r4
 8008160:	4628      	mov	r0, r5
 8008162:	e025      	b.n	80081b0 <floor+0x98>
 8008164:	4f2b      	ldr	r7, [pc, #172]	; (8008214 <floor+0xfc>)
 8008166:	4137      	asrs	r7, r6
 8008168:	ea01 0307 	and.w	r3, r1, r7
 800816c:	4303      	orrs	r3, r0
 800816e:	d01f      	beq.n	80081b0 <floor+0x98>
 8008170:	a325      	add	r3, pc, #148	; (adr r3, 8008208 <floor+0xf0>)
 8008172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008176:	f7f8 f8a9 	bl	80002cc <__adddf3>
 800817a:	2200      	movs	r2, #0
 800817c:	2300      	movs	r3, #0
 800817e:	f7f8 fceb 	bl	8000b58 <__aeabi_dcmpgt>
 8008182:	2800      	cmp	r0, #0
 8008184:	d0eb      	beq.n	800815e <floor+0x46>
 8008186:	2c00      	cmp	r4, #0
 8008188:	bfbe      	ittt	lt
 800818a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800818e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008192:	19a4      	addlt	r4, r4, r6
 8008194:	ea24 0407 	bic.w	r4, r4, r7
 8008198:	2500      	movs	r5, #0
 800819a:	e7e0      	b.n	800815e <floor+0x46>
 800819c:	2e33      	cmp	r6, #51	; 0x33
 800819e:	dd0b      	ble.n	80081b8 <floor+0xa0>
 80081a0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80081a4:	d104      	bne.n	80081b0 <floor+0x98>
 80081a6:	ee10 2a10 	vmov	r2, s0
 80081aa:	460b      	mov	r3, r1
 80081ac:	f7f8 f88e 	bl	80002cc <__adddf3>
 80081b0:	ec41 0b10 	vmov	d0, r0, r1
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80081bc:	f04f 33ff 	mov.w	r3, #4294967295
 80081c0:	fa23 f707 	lsr.w	r7, r3, r7
 80081c4:	4207      	tst	r7, r0
 80081c6:	d0f3      	beq.n	80081b0 <floor+0x98>
 80081c8:	a30f      	add	r3, pc, #60	; (adr r3, 8008208 <floor+0xf0>)
 80081ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ce:	f7f8 f87d 	bl	80002cc <__adddf3>
 80081d2:	2200      	movs	r2, #0
 80081d4:	2300      	movs	r3, #0
 80081d6:	f7f8 fcbf 	bl	8000b58 <__aeabi_dcmpgt>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d0bf      	beq.n	800815e <floor+0x46>
 80081de:	2c00      	cmp	r4, #0
 80081e0:	da02      	bge.n	80081e8 <floor+0xd0>
 80081e2:	2e14      	cmp	r6, #20
 80081e4:	d103      	bne.n	80081ee <floor+0xd6>
 80081e6:	3401      	adds	r4, #1
 80081e8:	ea25 0507 	bic.w	r5, r5, r7
 80081ec:	e7b7      	b.n	800815e <floor+0x46>
 80081ee:	2301      	movs	r3, #1
 80081f0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80081f4:	fa03 f606 	lsl.w	r6, r3, r6
 80081f8:	4435      	add	r5, r6
 80081fa:	4545      	cmp	r5, r8
 80081fc:	bf38      	it	cc
 80081fe:	18e4      	addcc	r4, r4, r3
 8008200:	e7f2      	b.n	80081e8 <floor+0xd0>
 8008202:	2500      	movs	r5, #0
 8008204:	462c      	mov	r4, r5
 8008206:	e7aa      	b.n	800815e <floor+0x46>
 8008208:	8800759c 	.word	0x8800759c
 800820c:	7e37e43c 	.word	0x7e37e43c
 8008210:	bff00000 	.word	0xbff00000
 8008214:	000fffff 	.word	0x000fffff

08008218 <scalbn>:
 8008218:	b570      	push	{r4, r5, r6, lr}
 800821a:	ec55 4b10 	vmov	r4, r5, d0
 800821e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008222:	4606      	mov	r6, r0
 8008224:	462b      	mov	r3, r5
 8008226:	b99a      	cbnz	r2, 8008250 <scalbn+0x38>
 8008228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800822c:	4323      	orrs	r3, r4
 800822e:	d036      	beq.n	800829e <scalbn+0x86>
 8008230:	4b39      	ldr	r3, [pc, #228]	; (8008318 <scalbn+0x100>)
 8008232:	4629      	mov	r1, r5
 8008234:	ee10 0a10 	vmov	r0, s0
 8008238:	2200      	movs	r2, #0
 800823a:	f7f8 f9fd 	bl	8000638 <__aeabi_dmul>
 800823e:	4b37      	ldr	r3, [pc, #220]	; (800831c <scalbn+0x104>)
 8008240:	429e      	cmp	r6, r3
 8008242:	4604      	mov	r4, r0
 8008244:	460d      	mov	r5, r1
 8008246:	da10      	bge.n	800826a <scalbn+0x52>
 8008248:	a32b      	add	r3, pc, #172	; (adr r3, 80082f8 <scalbn+0xe0>)
 800824a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824e:	e03a      	b.n	80082c6 <scalbn+0xae>
 8008250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008254:	428a      	cmp	r2, r1
 8008256:	d10c      	bne.n	8008272 <scalbn+0x5a>
 8008258:	ee10 2a10 	vmov	r2, s0
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	f7f8 f834 	bl	80002cc <__adddf3>
 8008264:	4604      	mov	r4, r0
 8008266:	460d      	mov	r5, r1
 8008268:	e019      	b.n	800829e <scalbn+0x86>
 800826a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800826e:	460b      	mov	r3, r1
 8008270:	3a36      	subs	r2, #54	; 0x36
 8008272:	4432      	add	r2, r6
 8008274:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008278:	428a      	cmp	r2, r1
 800827a:	dd08      	ble.n	800828e <scalbn+0x76>
 800827c:	2d00      	cmp	r5, #0
 800827e:	a120      	add	r1, pc, #128	; (adr r1, 8008300 <scalbn+0xe8>)
 8008280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008284:	da1c      	bge.n	80082c0 <scalbn+0xa8>
 8008286:	a120      	add	r1, pc, #128	; (adr r1, 8008308 <scalbn+0xf0>)
 8008288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800828c:	e018      	b.n	80082c0 <scalbn+0xa8>
 800828e:	2a00      	cmp	r2, #0
 8008290:	dd08      	ble.n	80082a4 <scalbn+0x8c>
 8008292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800829a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800829e:	ec45 4b10 	vmov	d0, r4, r5
 80082a2:	bd70      	pop	{r4, r5, r6, pc}
 80082a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80082a8:	da19      	bge.n	80082de <scalbn+0xc6>
 80082aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80082ae:	429e      	cmp	r6, r3
 80082b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80082b4:	dd0a      	ble.n	80082cc <scalbn+0xb4>
 80082b6:	a112      	add	r1, pc, #72	; (adr r1, 8008300 <scalbn+0xe8>)
 80082b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1e2      	bne.n	8008286 <scalbn+0x6e>
 80082c0:	a30f      	add	r3, pc, #60	; (adr r3, 8008300 <scalbn+0xe8>)
 80082c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c6:	f7f8 f9b7 	bl	8000638 <__aeabi_dmul>
 80082ca:	e7cb      	b.n	8008264 <scalbn+0x4c>
 80082cc:	a10a      	add	r1, pc, #40	; (adr r1, 80082f8 <scalbn+0xe0>)
 80082ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d0b8      	beq.n	8008248 <scalbn+0x30>
 80082d6:	a10e      	add	r1, pc, #56	; (adr r1, 8008310 <scalbn+0xf8>)
 80082d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80082dc:	e7b4      	b.n	8008248 <scalbn+0x30>
 80082de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80082e2:	3236      	adds	r2, #54	; 0x36
 80082e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80082e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80082ec:	4620      	mov	r0, r4
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <scalbn+0x108>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	e7e8      	b.n	80082c6 <scalbn+0xae>
 80082f4:	f3af 8000 	nop.w
 80082f8:	c2f8f359 	.word	0xc2f8f359
 80082fc:	01a56e1f 	.word	0x01a56e1f
 8008300:	8800759c 	.word	0x8800759c
 8008304:	7e37e43c 	.word	0x7e37e43c
 8008308:	8800759c 	.word	0x8800759c
 800830c:	fe37e43c 	.word	0xfe37e43c
 8008310:	c2f8f359 	.word	0xc2f8f359
 8008314:	81a56e1f 	.word	0x81a56e1f
 8008318:	43500000 	.word	0x43500000
 800831c:	ffff3cb0 	.word	0xffff3cb0
 8008320:	3c900000 	.word	0x3c900000

08008324 <_init>:
 8008324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008326:	bf00      	nop
 8008328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800832a:	bc08      	pop	{r3}
 800832c:	469e      	mov	lr, r3
 800832e:	4770      	bx	lr

08008330 <_fini>:
 8008330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008332:	bf00      	nop
 8008334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008336:	bc08      	pop	{r3}
 8008338:	469e      	mov	lr, r3
 800833a:	4770      	bx	lr
